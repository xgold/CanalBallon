
CanalBallon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b14  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08002bd4  08002bd4  00012bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002d14  08002d14  00012d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002d1c  08002d1c  00012d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002d20  08002d20  00012d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000068  20000000  08002d24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000110  20000068  08002d8c  00020068  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000178  08002d8c  00020178  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000b904  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001af0  00000000  00000000  0002b994  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002cef  00000000  00000000  0002d484  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000558  00000000  00000000  00030178  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000690  00000000  00000000  000306d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00003569  00000000  00000000  00030d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000024dc  00000000  00000000  000342c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000367a5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001618  00000000  00000000  00036824  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stab         0000009c  00000000  00000000  00037e3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      0000014d  00000000  00000000  00037ed8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002bbc 	.word	0x08002bbc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08002bbc 	.word	0x08002bbc

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	1c08      	adds	r0, r1, #0
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f806 	bl	8000274 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__udivmoddi4>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	4657      	mov	r7, sl
 8000278:	464e      	mov	r6, r9
 800027a:	4645      	mov	r5, r8
 800027c:	46de      	mov	lr, fp
 800027e:	b5e0      	push	{r5, r6, r7, lr}
 8000280:	0004      	movs	r4, r0
 8000282:	b083      	sub	sp, #12
 8000284:	000d      	movs	r5, r1
 8000286:	4692      	mov	sl, r2
 8000288:	4699      	mov	r9, r3
 800028a:	428b      	cmp	r3, r1
 800028c:	d82f      	bhi.n	80002ee <__udivmoddi4+0x7a>
 800028e:	d02c      	beq.n	80002ea <__udivmoddi4+0x76>
 8000290:	4649      	mov	r1, r9
 8000292:	4650      	mov	r0, sl
 8000294:	f000 f8ae 	bl	80003f4 <__clzdi2>
 8000298:	0029      	movs	r1, r5
 800029a:	0006      	movs	r6, r0
 800029c:	0020      	movs	r0, r4
 800029e:	f000 f8a9 	bl	80003f4 <__clzdi2>
 80002a2:	1a33      	subs	r3, r6, r0
 80002a4:	4698      	mov	r8, r3
 80002a6:	3b20      	subs	r3, #32
 80002a8:	469b      	mov	fp, r3
 80002aa:	d500      	bpl.n	80002ae <__udivmoddi4+0x3a>
 80002ac:	e074      	b.n	8000398 <__udivmoddi4+0x124>
 80002ae:	4653      	mov	r3, sl
 80002b0:	465a      	mov	r2, fp
 80002b2:	4093      	lsls	r3, r2
 80002b4:	001f      	movs	r7, r3
 80002b6:	4653      	mov	r3, sl
 80002b8:	4642      	mov	r2, r8
 80002ba:	4093      	lsls	r3, r2
 80002bc:	001e      	movs	r6, r3
 80002be:	42af      	cmp	r7, r5
 80002c0:	d829      	bhi.n	8000316 <__udivmoddi4+0xa2>
 80002c2:	d026      	beq.n	8000312 <__udivmoddi4+0x9e>
 80002c4:	465b      	mov	r3, fp
 80002c6:	1ba4      	subs	r4, r4, r6
 80002c8:	41bd      	sbcs	r5, r7
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	da00      	bge.n	80002d0 <__udivmoddi4+0x5c>
 80002ce:	e079      	b.n	80003c4 <__udivmoddi4+0x150>
 80002d0:	2200      	movs	r2, #0
 80002d2:	2300      	movs	r3, #0
 80002d4:	9200      	str	r2, [sp, #0]
 80002d6:	9301      	str	r3, [sp, #4]
 80002d8:	2301      	movs	r3, #1
 80002da:	465a      	mov	r2, fp
 80002dc:	4093      	lsls	r3, r2
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	2301      	movs	r3, #1
 80002e2:	4642      	mov	r2, r8
 80002e4:	4093      	lsls	r3, r2
 80002e6:	9300      	str	r3, [sp, #0]
 80002e8:	e019      	b.n	800031e <__udivmoddi4+0xaa>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	d9d0      	bls.n	8000290 <__udivmoddi4+0x1c>
 80002ee:	2200      	movs	r2, #0
 80002f0:	2300      	movs	r3, #0
 80002f2:	9200      	str	r2, [sp, #0]
 80002f4:	9301      	str	r3, [sp, #4]
 80002f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <__udivmoddi4+0x8c>
 80002fc:	601c      	str	r4, [r3, #0]
 80002fe:	605d      	str	r5, [r3, #4]
 8000300:	9800      	ldr	r0, [sp, #0]
 8000302:	9901      	ldr	r1, [sp, #4]
 8000304:	b003      	add	sp, #12
 8000306:	bc3c      	pop	{r2, r3, r4, r5}
 8000308:	4690      	mov	r8, r2
 800030a:	4699      	mov	r9, r3
 800030c:	46a2      	mov	sl, r4
 800030e:	46ab      	mov	fp, r5
 8000310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000312:	42a3      	cmp	r3, r4
 8000314:	d9d6      	bls.n	80002c4 <__udivmoddi4+0x50>
 8000316:	2200      	movs	r2, #0
 8000318:	2300      	movs	r3, #0
 800031a:	9200      	str	r2, [sp, #0]
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	4643      	mov	r3, r8
 8000320:	2b00      	cmp	r3, #0
 8000322:	d0e8      	beq.n	80002f6 <__udivmoddi4+0x82>
 8000324:	07fb      	lsls	r3, r7, #31
 8000326:	0872      	lsrs	r2, r6, #1
 8000328:	431a      	orrs	r2, r3
 800032a:	4646      	mov	r6, r8
 800032c:	087b      	lsrs	r3, r7, #1
 800032e:	e00e      	b.n	800034e <__udivmoddi4+0xda>
 8000330:	42ab      	cmp	r3, r5
 8000332:	d101      	bne.n	8000338 <__udivmoddi4+0xc4>
 8000334:	42a2      	cmp	r2, r4
 8000336:	d80c      	bhi.n	8000352 <__udivmoddi4+0xde>
 8000338:	1aa4      	subs	r4, r4, r2
 800033a:	419d      	sbcs	r5, r3
 800033c:	2001      	movs	r0, #1
 800033e:	1924      	adds	r4, r4, r4
 8000340:	416d      	adcs	r5, r5
 8000342:	2100      	movs	r1, #0
 8000344:	3e01      	subs	r6, #1
 8000346:	1824      	adds	r4, r4, r0
 8000348:	414d      	adcs	r5, r1
 800034a:	2e00      	cmp	r6, #0
 800034c:	d006      	beq.n	800035c <__udivmoddi4+0xe8>
 800034e:	42ab      	cmp	r3, r5
 8000350:	d9ee      	bls.n	8000330 <__udivmoddi4+0xbc>
 8000352:	3e01      	subs	r6, #1
 8000354:	1924      	adds	r4, r4, r4
 8000356:	416d      	adcs	r5, r5
 8000358:	2e00      	cmp	r6, #0
 800035a:	d1f8      	bne.n	800034e <__udivmoddi4+0xda>
 800035c:	465b      	mov	r3, fp
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	1900      	adds	r0, r0, r4
 8000364:	4169      	adcs	r1, r5
 8000366:	2b00      	cmp	r3, #0
 8000368:	db22      	blt.n	80003b0 <__udivmoddi4+0x13c>
 800036a:	002b      	movs	r3, r5
 800036c:	465a      	mov	r2, fp
 800036e:	40d3      	lsrs	r3, r2
 8000370:	002a      	movs	r2, r5
 8000372:	4644      	mov	r4, r8
 8000374:	40e2      	lsrs	r2, r4
 8000376:	001c      	movs	r4, r3
 8000378:	465b      	mov	r3, fp
 800037a:	0015      	movs	r5, r2
 800037c:	2b00      	cmp	r3, #0
 800037e:	db2c      	blt.n	80003da <__udivmoddi4+0x166>
 8000380:	0026      	movs	r6, r4
 8000382:	409e      	lsls	r6, r3
 8000384:	0033      	movs	r3, r6
 8000386:	0026      	movs	r6, r4
 8000388:	4647      	mov	r7, r8
 800038a:	40be      	lsls	r6, r7
 800038c:	0032      	movs	r2, r6
 800038e:	1a80      	subs	r0, r0, r2
 8000390:	4199      	sbcs	r1, r3
 8000392:	9000      	str	r0, [sp, #0]
 8000394:	9101      	str	r1, [sp, #4]
 8000396:	e7ae      	b.n	80002f6 <__udivmoddi4+0x82>
 8000398:	4642      	mov	r2, r8
 800039a:	2320      	movs	r3, #32
 800039c:	1a9b      	subs	r3, r3, r2
 800039e:	4652      	mov	r2, sl
 80003a0:	40da      	lsrs	r2, r3
 80003a2:	4641      	mov	r1, r8
 80003a4:	0013      	movs	r3, r2
 80003a6:	464a      	mov	r2, r9
 80003a8:	408a      	lsls	r2, r1
 80003aa:	0017      	movs	r7, r2
 80003ac:	431f      	orrs	r7, r3
 80003ae:	e782      	b.n	80002b6 <__udivmoddi4+0x42>
 80003b0:	4642      	mov	r2, r8
 80003b2:	2320      	movs	r3, #32
 80003b4:	1a9b      	subs	r3, r3, r2
 80003b6:	002a      	movs	r2, r5
 80003b8:	4646      	mov	r6, r8
 80003ba:	409a      	lsls	r2, r3
 80003bc:	0023      	movs	r3, r4
 80003be:	40f3      	lsrs	r3, r6
 80003c0:	4313      	orrs	r3, r2
 80003c2:	e7d5      	b.n	8000370 <__udivmoddi4+0xfc>
 80003c4:	4642      	mov	r2, r8
 80003c6:	2320      	movs	r3, #32
 80003c8:	2100      	movs	r1, #0
 80003ca:	1a9b      	subs	r3, r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	9100      	str	r1, [sp, #0]
 80003d0:	9201      	str	r2, [sp, #4]
 80003d2:	2201      	movs	r2, #1
 80003d4:	40da      	lsrs	r2, r3
 80003d6:	9201      	str	r2, [sp, #4]
 80003d8:	e782      	b.n	80002e0 <__udivmoddi4+0x6c>
 80003da:	4642      	mov	r2, r8
 80003dc:	2320      	movs	r3, #32
 80003de:	0026      	movs	r6, r4
 80003e0:	1a9b      	subs	r3, r3, r2
 80003e2:	40de      	lsrs	r6, r3
 80003e4:	002f      	movs	r7, r5
 80003e6:	46b4      	mov	ip, r6
 80003e8:	4097      	lsls	r7, r2
 80003ea:	4666      	mov	r6, ip
 80003ec:	003b      	movs	r3, r7
 80003ee:	4333      	orrs	r3, r6
 80003f0:	e7c9      	b.n	8000386 <__udivmoddi4+0x112>
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__clzdi2>:
 80003f4:	b510      	push	{r4, lr}
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d103      	bne.n	8000402 <__clzdi2+0xe>
 80003fa:	f000 f807 	bl	800040c <__clzsi2>
 80003fe:	3020      	adds	r0, #32
 8000400:	e002      	b.n	8000408 <__clzdi2+0x14>
 8000402:	1c08      	adds	r0, r1, #0
 8000404:	f000 f802 	bl	800040c <__clzsi2>
 8000408:	bd10      	pop	{r4, pc}
 800040a:	46c0      	nop			; (mov r8, r8)

0800040c <__clzsi2>:
 800040c:	211c      	movs	r1, #28
 800040e:	2301      	movs	r3, #1
 8000410:	041b      	lsls	r3, r3, #16
 8000412:	4298      	cmp	r0, r3
 8000414:	d301      	bcc.n	800041a <__clzsi2+0xe>
 8000416:	0c00      	lsrs	r0, r0, #16
 8000418:	3910      	subs	r1, #16
 800041a:	0a1b      	lsrs	r3, r3, #8
 800041c:	4298      	cmp	r0, r3
 800041e:	d301      	bcc.n	8000424 <__clzsi2+0x18>
 8000420:	0a00      	lsrs	r0, r0, #8
 8000422:	3908      	subs	r1, #8
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0x22>
 800042a:	0900      	lsrs	r0, r0, #4
 800042c:	3904      	subs	r1, #4
 800042e:	a202      	add	r2, pc, #8	; (adr r2, 8000438 <__clzsi2+0x2c>)
 8000430:	5c10      	ldrb	r0, [r2, r0]
 8000432:	1840      	adds	r0, r0, r1
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	02020304 	.word	0x02020304
 800043c:	01010101 	.word	0x01010101
	...

08000448 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000448:	21fa      	movs	r1, #250	; 0xfa
 800044a:	4b08      	ldr	r3, [pc, #32]	; (800046c <HAL_InitTick+0x24>)
{
 800044c:	b510      	push	{r4, lr}
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 800044e:	0089      	lsls	r1, r1, #2
{
 8000450:	0004      	movs	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000452:	6818      	ldr	r0, [r3, #0]
 8000454:	f7ff fe62 	bl	800011c <__udivsi3>
 8000458:	f000 f864 	bl	8000524 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 800045c:	2001      	movs	r0, #1
 800045e:	2200      	movs	r2, #0
 8000460:	0021      	movs	r1, r4
 8000462:	4240      	negs	r0, r0
 8000464:	f000 f82e 	bl	80004c4 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000468:	2000      	movs	r0, #0
 800046a:	bd10      	pop	{r4, pc}
 800046c:	20000000 	.word	0x20000000

08000470 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000470:	2340      	movs	r3, #64	; 0x40
 8000472:	4a06      	ldr	r2, [pc, #24]	; (800048c <HAL_Init+0x1c>)
{
 8000474:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000476:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000478:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800047a:	430b      	orrs	r3, r1
 800047c:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800047e:	f7ff ffe3 	bl	8000448 <HAL_InitTick>
  HAL_MspInit();
 8000482:	f001 fad7 	bl	8001a34 <HAL_MspInit>
}
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	40022000 	.word	0x40022000

08000490 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000490:	4a02      	ldr	r2, [pc, #8]	; (800049c <HAL_IncTick+0xc>)
 8000492:	6813      	ldr	r3, [r2, #0]
 8000494:	3301      	adds	r3, #1
 8000496:	6013      	str	r3, [r2, #0]
}
 8000498:	4770      	bx	lr
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	20000090 	.word	0x20000090

080004a0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80004a0:	4b01      	ldr	r3, [pc, #4]	; (80004a8 <HAL_GetTick+0x8>)
 80004a2:	6818      	ldr	r0, [r3, #0]
}
 80004a4:	4770      	bx	lr
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	20000090 	.word	0x20000090

080004ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80004ac:	b513      	push	{r0, r1, r4, lr}
 80004ae:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0U;
  tickstart = HAL_GetTick();
 80004b0:	f7ff fff6 	bl	80004a0 <HAL_GetTick>
 80004b4:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80004b6:	f7ff fff3 	bl	80004a0 <HAL_GetTick>
 80004ba:	9b01      	ldr	r3, [sp, #4]
 80004bc:	1b00      	subs	r0, r0, r4
 80004be:	4298      	cmp	r0, r3
 80004c0:	d3f9      	bcc.n	80004b6 <HAL_Delay+0xa>
  {
  }
}
 80004c2:	bd13      	pop	{r0, r1, r4, pc}

080004c4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80004c8:	2800      	cmp	r0, #0
 80004ca:	da14      	bge.n	80004f6 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004cc:	230f      	movs	r3, #15
 80004ce:	b2c0      	uxtb	r0, r0
 80004d0:	4003      	ands	r3, r0
 80004d2:	3b08      	subs	r3, #8
 80004d4:	4a11      	ldr	r2, [pc, #68]	; (800051c <HAL_NVIC_SetPriority+0x58>)
 80004d6:	089b      	lsrs	r3, r3, #2
 80004d8:	009b      	lsls	r3, r3, #2
 80004da:	189b      	adds	r3, r3, r2
 80004dc:	2203      	movs	r2, #3
 80004de:	4010      	ands	r0, r2
 80004e0:	4090      	lsls	r0, r2
 80004e2:	32fc      	adds	r2, #252	; 0xfc
 80004e4:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004e6:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004e8:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004ea:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004ec:	69dc      	ldr	r4, [r3, #28]
 80004ee:	43ac      	bics	r4, r5
 80004f0:	4321      	orrs	r1, r4
 80004f2:	61d9      	str	r1, [r3, #28]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80004f4:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004f6:	2503      	movs	r5, #3
 80004f8:	0883      	lsrs	r3, r0, #2
 80004fa:	4028      	ands	r0, r5
 80004fc:	40a8      	lsls	r0, r5
 80004fe:	35fc      	adds	r5, #252	; 0xfc
 8000500:	002e      	movs	r6, r5
 8000502:	4a07      	ldr	r2, [pc, #28]	; (8000520 <HAL_NVIC_SetPriority+0x5c>)
 8000504:	009b      	lsls	r3, r3, #2
 8000506:	189b      	adds	r3, r3, r2
 8000508:	22c0      	movs	r2, #192	; 0xc0
 800050a:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800050c:	4029      	ands	r1, r5
 800050e:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000510:	0092      	lsls	r2, r2, #2
 8000512:	589c      	ldr	r4, [r3, r2]
 8000514:	43b4      	bics	r4, r6
 8000516:	4321      	orrs	r1, r4
 8000518:	5099      	str	r1, [r3, r2]
 800051a:	e7eb      	b.n	80004f4 <HAL_NVIC_SetPriority+0x30>
 800051c:	e000ed00 	.word	0xe000ed00
 8000520:	e000e100 	.word	0xe000e100

08000524 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000524:	4a09      	ldr	r2, [pc, #36]	; (800054c <HAL_SYSTICK_Config+0x28>)
 8000526:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000528:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800052a:	4293      	cmp	r3, r2
 800052c:	d80d      	bhi.n	800054a <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800052e:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000530:	4a07      	ldr	r2, [pc, #28]	; (8000550 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000532:	4808      	ldr	r0, [pc, #32]	; (8000554 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000534:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000536:	6a03      	ldr	r3, [r0, #32]
 8000538:	0609      	lsls	r1, r1, #24
 800053a:	021b      	lsls	r3, r3, #8
 800053c:	0a1b      	lsrs	r3, r3, #8
 800053e:	430b      	orrs	r3, r1
 8000540:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000542:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000544:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000546:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000548:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800054a:	4770      	bx	lr
 800054c:	00ffffff 	.word	0x00ffffff
 8000550:	e000e010 	.word	0xe000e010
 8000554:	e000ed00 	.word	0xe000ed00

08000558 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000558:	4b05      	ldr	r3, [pc, #20]	; (8000570 <HAL_SYSTICK_CLKSourceConfig+0x18>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800055a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800055c:	2804      	cmp	r0, #4
 800055e:	d102      	bne.n	8000566 <HAL_SYSTICK_CLKSourceConfig+0xe>
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000560:	4310      	orrs	r0, r2
 8000562:	6018      	str	r0, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000564:	4770      	bx	lr
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000566:	2104      	movs	r1, #4
 8000568:	438a      	bics	r2, r1
 800056a:	601a      	str	r2, [r3, #0]
}
 800056c:	e7fa      	b.n	8000564 <HAL_SYSTICK_CLKSourceConfig+0xc>
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	e000e010 	.word	0xe000e010

08000574 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000574:	4770      	bx	lr

08000576 <HAL_SYSTICK_IRQHandler>:
{
 8000576:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 8000578:	f7ff fffc 	bl	8000574 <HAL_SYSTICK_Callback>
}
 800057c:	bd10      	pop	{r4, pc}
	...

08000580 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000580:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000582:	4a55      	ldr	r2, [pc, #340]	; (80006d8 <HAL_GPIO_Init+0x158>)
  while (((GPIO_Init->Pin) >> position) != 0)
 8000584:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000586:	1882      	adds	r2, r0, r2
 8000588:	1e54      	subs	r4, r2, #1
 800058a:	41a2      	sbcs	r2, r4
{
 800058c:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 800058e:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00U;
 8000590:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000592:	3205      	adds	r2, #5
 8000594:	9203      	str	r2, [sp, #12]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000596:	9a01      	ldr	r2, [sp, #4]
 8000598:	40da      	lsrs	r2, r3
 800059a:	d101      	bne.n	80005a0 <HAL_GPIO_Init+0x20>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 800059c:	b005      	add	sp, #20
 800059e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80005a0:	2501      	movs	r5, #1
 80005a2:	409d      	lsls	r5, r3
 80005a4:	9a01      	ldr	r2, [sp, #4]
 80005a6:	402a      	ands	r2, r5
 80005a8:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 80005aa:	d100      	bne.n	80005ae <HAL_GPIO_Init+0x2e>
 80005ac:	e091      	b.n	80006d2 <HAL_GPIO_Init+0x152>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80005ae:	684a      	ldr	r2, [r1, #4]
 80005b0:	4694      	mov	ip, r2
 80005b2:	2210      	movs	r2, #16
 80005b4:	4664      	mov	r4, ip
 80005b6:	4394      	bics	r4, r2
 80005b8:	0022      	movs	r2, r4
 80005ba:	3c01      	subs	r4, #1
 80005bc:	2a02      	cmp	r2, #2
 80005be:	d11f      	bne.n	8000600 <HAL_GPIO_Init+0x80>
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80005c0:	2407      	movs	r4, #7
 80005c2:	270f      	movs	r7, #15
 80005c4:	401c      	ands	r4, r3
 80005c6:	00a4      	lsls	r4, r4, #2
 80005c8:	40a7      	lsls	r7, r4
        temp = GPIOx->AFR[position >> 3U];
 80005ca:	08da      	lsrs	r2, r3, #3
 80005cc:	0092      	lsls	r2, r2, #2
 80005ce:	1882      	adds	r2, r0, r2
 80005d0:	6a16      	ldr	r6, [r2, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80005d2:	43be      	bics	r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80005d4:	690f      	ldr	r7, [r1, #16]
 80005d6:	40a7      	lsls	r7, r4
 80005d8:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 80005da:	6216      	str	r6, [r2, #32]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80005dc:	2403      	movs	r4, #3
 80005de:	005e      	lsls	r6, r3, #1
 80005e0:	40b4      	lsls	r4, r6
        temp = GPIOx->OSPEEDR;
 80005e2:	6882      	ldr	r2, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80005e4:	43a2      	bics	r2, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80005e6:	68cc      	ldr	r4, [r1, #12]
 80005e8:	40b4      	lsls	r4, r6
 80005ea:	4322      	orrs	r2, r4
        GPIOx->OSPEEDR = temp;
 80005ec:	6082      	str	r2, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80005ee:	4662      	mov	r2, ip
 80005f0:	06d2      	lsls	r2, r2, #27
 80005f2:	0fd2      	lsrs	r2, r2, #31
 80005f4:	409a      	lsls	r2, r3
        temp= GPIOx->OTYPER;
 80005f6:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80005f8:	43ac      	bics	r4, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80005fa:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80005fc:	6042      	str	r2, [r0, #4]
 80005fe:	e001      	b.n	8000604 <HAL_GPIO_Init+0x84>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000600:	2c01      	cmp	r4, #1
 8000602:	d9eb      	bls.n	80005dc <HAL_GPIO_Init+0x5c>
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000604:	2603      	movs	r6, #3
 8000606:	0034      	movs	r4, r6
 8000608:	005d      	lsls	r5, r3, #1
 800060a:	40ac      	lsls	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800060c:	4662      	mov	r2, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800060e:	43e4      	mvns	r4, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000610:	4032      	ands	r2, r6
 8000612:	40aa      	lsls	r2, r5
      temp = GPIOx->MODER;
 8000614:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000616:	4027      	ands	r7, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000618:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 800061a:	6002      	str	r2, [r0, #0]
      temp = GPIOx->PUPDR;
 800061c:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800061e:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8000620:	688a      	ldr	r2, [r1, #8]
 8000622:	40aa      	lsls	r2, r5
 8000624:	4314      	orrs	r4, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000626:	4662      	mov	r2, ip
      GPIOx->PUPDR = temp;
 8000628:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800062a:	00d2      	lsls	r2, r2, #3
 800062c:	d551      	bpl.n	80006d2 <HAL_GPIO_Init+0x152>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800062e:	2501      	movs	r5, #1
 8000630:	4c2a      	ldr	r4, [pc, #168]	; (80006dc <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000632:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000634:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000636:	432a      	orrs	r2, r5
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000638:	001d      	movs	r5, r3
 800063a:	4035      	ands	r5, r6
 800063c:	00ad      	lsls	r5, r5, #2
 800063e:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000640:	6362      	str	r2, [r4, #52]	; 0x34
 8000642:	4a27      	ldr	r2, [pc, #156]	; (80006e0 <HAL_GPIO_Init+0x160>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8000644:	089c      	lsrs	r4, r3, #2
 8000646:	00a4      	lsls	r4, r4, #2
 8000648:	18a4      	adds	r4, r4, r2
 800064a:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800064c:	43ba      	bics	r2, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800064e:	27a0      	movs	r7, #160	; 0xa0
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000650:	9202      	str	r2, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000652:	05ff      	lsls	r7, r7, #23
 8000654:	2200      	movs	r2, #0
 8000656:	42b8      	cmp	r0, r7
 8000658:	d010      	beq.n	800067c <HAL_GPIO_Init+0xfc>
 800065a:	4f22      	ldr	r7, [pc, #136]	; (80006e4 <HAL_GPIO_Init+0x164>)
 800065c:	3201      	adds	r2, #1
 800065e:	42b8      	cmp	r0, r7
 8000660:	d00c      	beq.n	800067c <HAL_GPIO_Init+0xfc>
 8000662:	4f21      	ldr	r7, [pc, #132]	; (80006e8 <HAL_GPIO_Init+0x168>)
 8000664:	3201      	adds	r2, #1
 8000666:	42b8      	cmp	r0, r7
 8000668:	d008      	beq.n	800067c <HAL_GPIO_Init+0xfc>
 800066a:	4f20      	ldr	r7, [pc, #128]	; (80006ec <HAL_GPIO_Init+0x16c>)
 800066c:	0032      	movs	r2, r6
 800066e:	42b8      	cmp	r0, r7
 8000670:	d004      	beq.n	800067c <HAL_GPIO_Init+0xfc>
 8000672:	4e1f      	ldr	r6, [pc, #124]	; (80006f0 <HAL_GPIO_Init+0x170>)
 8000674:	3201      	adds	r2, #1
 8000676:	42b0      	cmp	r0, r6
 8000678:	d000      	beq.n	800067c <HAL_GPIO_Init+0xfc>
 800067a:	9a03      	ldr	r2, [sp, #12]
 800067c:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800067e:	4667      	mov	r7, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000680:	9d02      	ldr	r5, [sp, #8]
 8000682:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000684:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8000686:	4a1b      	ldr	r2, [pc, #108]	; (80006f4 <HAL_GPIO_Init+0x174>)
        temp &= ~((uint32_t)iocurrent);
 8000688:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->IMR;
 800068a:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 800068c:	9d00      	ldr	r5, [sp, #0]
        temp &= ~((uint32_t)iocurrent);
 800068e:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8000690:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000692:	03ff      	lsls	r7, r7, #15
 8000694:	d401      	bmi.n	800069a <HAL_GPIO_Init+0x11a>
        temp &= ~((uint32_t)iocurrent);
 8000696:	0035      	movs	r5, r6
 8000698:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800069a:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 800069c:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 800069e:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 80006a0:	9d00      	ldr	r5, [sp, #0]
 80006a2:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006a4:	03bf      	lsls	r7, r7, #14
 80006a6:	d401      	bmi.n	80006ac <HAL_GPIO_Init+0x12c>
        temp &= ~((uint32_t)iocurrent);
 80006a8:	0035      	movs	r5, r6
 80006aa:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006ac:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 80006ae:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80006b0:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 80006b2:	9d00      	ldr	r5, [sp, #0]
 80006b4:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006b6:	02ff      	lsls	r7, r7, #11
 80006b8:	d401      	bmi.n	80006be <HAL_GPIO_Init+0x13e>
        temp &= ~((uint32_t)iocurrent);
 80006ba:	0035      	movs	r5, r6
 80006bc:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006be:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 80006c0:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80006c2:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 80006c4:	9e00      	ldr	r6, [sp, #0]
 80006c6:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006c8:	02bf      	lsls	r7, r7, #10
 80006ca:	d401      	bmi.n	80006d0 <HAL_GPIO_Init+0x150>
        temp &= ~((uint32_t)iocurrent);
 80006cc:	4025      	ands	r5, r4
 80006ce:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 80006d0:	60d6      	str	r6, [r2, #12]
    position++;
 80006d2:	3301      	adds	r3, #1
 80006d4:	e75f      	b.n	8000596 <HAL_GPIO_Init+0x16>
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	afffe400 	.word	0xafffe400
 80006dc:	40021000 	.word	0x40021000
 80006e0:	40010000 	.word	0x40010000
 80006e4:	50000400 	.word	0x50000400
 80006e8:	50000800 	.word	0x50000800
 80006ec:	50000c00 	.word	0x50000c00
 80006f0:	50001000 	.word	0x50001000
 80006f4:	40010400 	.word	0x40010400

080006f8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 80006f8:	2a00      	cmp	r2, #0
 80006fa:	d001      	beq.n	8000700 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 80006fc:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80006fe:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8000700:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000702:	e7fc      	b.n	80006fe <HAL_GPIO_WritePin+0x6>

08000704 <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8000704:	22f0      	movs	r2, #240	; 0xf0
 8000706:	4b17      	ldr	r3, [pc, #92]	; (8000764 <RCC_SetFlashLatencyFromMSIRange+0x60>)
{
 8000708:	b530      	push	{r4, r5, lr}
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800070a:	68d9      	ldr	r1, [r3, #12]
 800070c:	4211      	tst	r1, r2
 800070e:	d00b      	beq.n	8000728 <RCC_SetFlashLatencyFromMSIRange+0x24>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8000710:	2300      	movs	r3, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 8000712:	2101      	movs	r1, #1
 8000714:	4814      	ldr	r0, [pc, #80]	; (8000768 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8000716:	6802      	ldr	r2, [r0, #0]
 8000718:	438a      	bics	r2, r1
 800071a:	431a      	orrs	r2, r3
 800071c:	6002      	str	r2, [r0, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800071e:	6800      	ldr	r0, [r0, #0]
 8000720:	4008      	ands	r0, r1
 8000722:	4058      	eors	r0, r3
 8000724:	4008      	ands	r0, r1
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 8000726:	bd30      	pop	{r4, r5, pc}
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000728:	2180      	movs	r1, #128	; 0x80
 800072a:	22c0      	movs	r2, #192	; 0xc0
 800072c:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 800072e:	0549      	lsls	r1, r1, #21
 8000730:	4c0e      	ldr	r4, [pc, #56]	; (800076c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8000732:	0152      	lsls	r2, r2, #5
 8000734:	420d      	tst	r5, r1
 8000736:	d00a      	beq.n	800074e <RCC_SetFlashLatencyFromMSIRange+0x4a>
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8000738:	6823      	ldr	r3, [r4, #0]
 800073a:	401a      	ands	r2, r3
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800073c:	23c0      	movs	r3, #192	; 0xc0
 800073e:	015b      	lsls	r3, r3, #5
 8000740:	429a      	cmp	r2, r3
 8000742:	d1e5      	bne.n	8000710 <RCC_SetFlashLatencyFromMSIRange+0xc>
 8000744:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8000746:	18c0      	adds	r0, r0, r3
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8000748:	4243      	negs	r3, r0
 800074a:	4143      	adcs	r3, r0
 800074c:	e7e1      	b.n	8000712 <RCC_SetFlashLatencyFromMSIRange+0xe>
      __HAL_RCC_PWR_CLK_ENABLE();
 800074e:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8000750:	4329      	orrs	r1, r5
 8000752:	6399      	str	r1, [r3, #56]	; 0x38
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8000754:	6821      	ldr	r1, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 8000756:	4c07      	ldr	r4, [pc, #28]	; (8000774 <RCC_SetFlashLatencyFromMSIRange+0x70>)
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8000758:	400a      	ands	r2, r1
      __HAL_RCC_PWR_CLK_DISABLE();
 800075a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800075c:	4021      	ands	r1, r4
 800075e:	6399      	str	r1, [r3, #56]	; 0x38
 8000760:	e7ec      	b.n	800073c <RCC_SetFlashLatencyFromMSIRange+0x38>
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	40021000 	.word	0x40021000
 8000768:	40022000 	.word	0x40022000
 800076c:	40007000 	.word	0x40007000
 8000770:	ffff4000 	.word	0xffff4000
 8000774:	efffffff 	.word	0xefffffff

08000778 <HAL_RCC_OscConfig>:
{
 8000778:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800077a:	6803      	ldr	r3, [r0, #0]
{
 800077c:	b085      	sub	sp, #20
 800077e:	0004      	movs	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000780:	07db      	lsls	r3, r3, #31
 8000782:	d44e      	bmi.n	8000822 <HAL_RCC_OscConfig+0xaa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000784:	6823      	ldr	r3, [r4, #0]
 8000786:	079b      	lsls	r3, r3, #30
 8000788:	d500      	bpl.n	800078c <HAL_RCC_OscConfig+0x14>
 800078a:	e09f      	b.n	80008cc <HAL_RCC_OscConfig+0x154>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800078c:	6823      	ldr	r3, [r4, #0]
 800078e:	06db      	lsls	r3, r3, #27
 8000790:	d535      	bpl.n	80007fe <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8000792:	230c      	movs	r3, #12
 8000794:	4dbc      	ldr	r5, [pc, #752]	; (8000a88 <HAL_RCC_OscConfig+0x310>)
 8000796:	68ea      	ldr	r2, [r5, #12]
 8000798:	421a      	tst	r2, r3
 800079a:	d000      	beq.n	800079e <HAL_RCC_OscConfig+0x26>
 800079c:	e0e9      	b.n	8000972 <HAL_RCC_OscConfig+0x1fa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800079e:	682b      	ldr	r3, [r5, #0]
 80007a0:	059b      	lsls	r3, r3, #22
 80007a2:	d502      	bpl.n	80007aa <HAL_RCC_OscConfig+0x32>
 80007a4:	69e3      	ldr	r3, [r4, #28]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d050      	beq.n	800084c <HAL_RCC_OscConfig+0xd4>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80007aa:	22e0      	movs	r2, #224	; 0xe0
 80007ac:	686b      	ldr	r3, [r5, #4]
 80007ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80007b0:	0212      	lsls	r2, r2, #8
 80007b2:	4013      	ands	r3, r2
 80007b4:	4298      	cmp	r0, r3
 80007b6:	d800      	bhi.n	80007ba <HAL_RCC_OscConfig+0x42>
 80007b8:	e0c9      	b.n	800094e <HAL_RCC_OscConfig+0x1d6>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80007ba:	f7ff ffa3 	bl	8000704 <RCC_SetFlashLatencyFromMSIRange>
 80007be:	2800      	cmp	r0, #0
 80007c0:	d144      	bne.n	800084c <HAL_RCC_OscConfig+0xd4>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80007c2:	686b      	ldr	r3, [r5, #4]
 80007c4:	4ab1      	ldr	r2, [pc, #708]	; (8000a8c <HAL_RCC_OscConfig+0x314>)
 80007c6:	4013      	ands	r3, r2
 80007c8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80007ca:	4313      	orrs	r3, r2
 80007cc:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80007ce:	686a      	ldr	r2, [r5, #4]
 80007d0:	6a23      	ldr	r3, [r4, #32]
 80007d2:	0212      	lsls	r2, r2, #8
 80007d4:	061b      	lsls	r3, r3, #24
 80007d6:	0a12      	lsrs	r2, r2, #8
 80007d8:	4313      	orrs	r3, r2
 80007da:	606b      	str	r3, [r5, #4]
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80007dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80007de:	68ea      	ldr	r2, [r5, #12]
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80007e0:	0b59      	lsrs	r1, r3, #13
 80007e2:	2380      	movs	r3, #128	; 0x80
 80007e4:	3101      	adds	r1, #1
 80007e6:	021b      	lsls	r3, r3, #8
 80007e8:	408b      	lsls	r3, r1
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80007ea:	0612      	lsls	r2, r2, #24
 80007ec:	49a8      	ldr	r1, [pc, #672]	; (8000a90 <HAL_RCC_OscConfig+0x318>)
 80007ee:	0f12      	lsrs	r2, r2, #28
 80007f0:	5c8a      	ldrb	r2, [r1, r2]
        HAL_InitTick (TICK_INT_PRIORITY);
 80007f2:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80007f4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80007f6:	4aa7      	ldr	r2, [pc, #668]	; (8000a94 <HAL_RCC_OscConfig+0x31c>)
 80007f8:	6013      	str	r3, [r2, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 80007fa:	f7ff fe25 	bl	8000448 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80007fe:	6823      	ldr	r3, [r4, #0]
 8000800:	071b      	lsls	r3, r3, #28
 8000802:	d500      	bpl.n	8000806 <HAL_RCC_OscConfig+0x8e>
 8000804:	e0ec      	b.n	80009e0 <HAL_RCC_OscConfig+0x268>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000806:	6823      	ldr	r3, [r4, #0]
 8000808:	075b      	lsls	r3, r3, #29
 800080a:	d500      	bpl.n	800080e <HAL_RCC_OscConfig+0x96>
 800080c:	e10f      	b.n	8000a2e <HAL_RCC_OscConfig+0x2b6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800080e:	6823      	ldr	r3, [r4, #0]
 8000810:	069b      	lsls	r3, r3, #26
 8000812:	d500      	bpl.n	8000816 <HAL_RCC_OscConfig+0x9e>
 8000814:	e190      	b.n	8000b38 <HAL_RCC_OscConfig+0x3c0>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000816:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000818:	2900      	cmp	r1, #0
 800081a:	d000      	beq.n	800081e <HAL_RCC_OscConfig+0xa6>
 800081c:	e1c0      	b.n	8000ba0 <HAL_RCC_OscConfig+0x428>
  return HAL_OK;
 800081e:	2000      	movs	r0, #0
 8000820:	e015      	b.n	800084e <HAL_RCC_OscConfig+0xd6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000822:	210c      	movs	r1, #12
 8000824:	4d98      	ldr	r5, [pc, #608]	; (8000a88 <HAL_RCC_OscConfig+0x310>)
 8000826:	68eb      	ldr	r3, [r5, #12]
 8000828:	400b      	ands	r3, r1
 800082a:	2b08      	cmp	r3, #8
 800082c:	d008      	beq.n	8000840 <HAL_RCC_OscConfig+0xc8>
 800082e:	2380      	movs	r3, #128	; 0x80
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000830:	68ea      	ldr	r2, [r5, #12]
 8000832:	025b      	lsls	r3, r3, #9
 8000834:	400a      	ands	r2, r1
 8000836:	428a      	cmp	r2, r1
 8000838:	d10b      	bne.n	8000852 <HAL_RCC_OscConfig+0xda>
 800083a:	68ea      	ldr	r2, [r5, #12]
 800083c:	421a      	tst	r2, r3
 800083e:	d008      	beq.n	8000852 <HAL_RCC_OscConfig+0xda>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000840:	682b      	ldr	r3, [r5, #0]
 8000842:	039b      	lsls	r3, r3, #14
 8000844:	d59e      	bpl.n	8000784 <HAL_RCC_OscConfig+0xc>
 8000846:	6863      	ldr	r3, [r4, #4]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d19b      	bne.n	8000784 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800084c:	2001      	movs	r0, #1
}
 800084e:	b005      	add	sp, #20
 8000850:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000852:	6862      	ldr	r2, [r4, #4]
 8000854:	429a      	cmp	r2, r3
 8000856:	d112      	bne.n	800087e <HAL_RCC_OscConfig+0x106>
 8000858:	682a      	ldr	r2, [r5, #0]
 800085a:	4313      	orrs	r3, r2
 800085c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800085e:	f7ff fe1f 	bl	80004a0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000862:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000864:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000866:	02b6      	lsls	r6, r6, #10
 8000868:	682b      	ldr	r3, [r5, #0]
 800086a:	4233      	tst	r3, r6
 800086c:	d000      	beq.n	8000870 <HAL_RCC_OscConfig+0xf8>
 800086e:	e789      	b.n	8000784 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000870:	f7ff fe16 	bl	80004a0 <HAL_GetTick>
 8000874:	1bc0      	subs	r0, r0, r7
 8000876:	2864      	cmp	r0, #100	; 0x64
 8000878:	d9f6      	bls.n	8000868 <HAL_RCC_OscConfig+0xf0>
            return HAL_TIMEOUT;
 800087a:	2003      	movs	r0, #3
 800087c:	e7e7      	b.n	800084e <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800087e:	21a0      	movs	r1, #160	; 0xa0
 8000880:	02c9      	lsls	r1, r1, #11
 8000882:	428a      	cmp	r2, r1
 8000884:	d105      	bne.n	8000892 <HAL_RCC_OscConfig+0x11a>
 8000886:	2280      	movs	r2, #128	; 0x80
 8000888:	6829      	ldr	r1, [r5, #0]
 800088a:	02d2      	lsls	r2, r2, #11
 800088c:	430a      	orrs	r2, r1
 800088e:	602a      	str	r2, [r5, #0]
 8000890:	e7e2      	b.n	8000858 <HAL_RCC_OscConfig+0xe0>
 8000892:	6829      	ldr	r1, [r5, #0]
 8000894:	4880      	ldr	r0, [pc, #512]	; (8000a98 <HAL_RCC_OscConfig+0x320>)
 8000896:	4001      	ands	r1, r0
 8000898:	6029      	str	r1, [r5, #0]
 800089a:	6829      	ldr	r1, [r5, #0]
 800089c:	400b      	ands	r3, r1
 800089e:	9303      	str	r3, [sp, #12]
 80008a0:	9b03      	ldr	r3, [sp, #12]
 80008a2:	497e      	ldr	r1, [pc, #504]	; (8000a9c <HAL_RCC_OscConfig+0x324>)
 80008a4:	682b      	ldr	r3, [r5, #0]
 80008a6:	400b      	ands	r3, r1
 80008a8:	602b      	str	r3, [r5, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80008aa:	2a00      	cmp	r2, #0
 80008ac:	d1d7      	bne.n	800085e <HAL_RCC_OscConfig+0xe6>
        tickstart = HAL_GetTick();
 80008ae:	f7ff fdf7 	bl	80004a0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008b2:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80008b4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008b6:	02b6      	lsls	r6, r6, #10
 80008b8:	682b      	ldr	r3, [r5, #0]
 80008ba:	4233      	tst	r3, r6
 80008bc:	d100      	bne.n	80008c0 <HAL_RCC_OscConfig+0x148>
 80008be:	e761      	b.n	8000784 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008c0:	f7ff fdee 	bl	80004a0 <HAL_GetTick>
 80008c4:	1bc0      	subs	r0, r0, r7
 80008c6:	2864      	cmp	r0, #100	; 0x64
 80008c8:	d9f6      	bls.n	80008b8 <HAL_RCC_OscConfig+0x140>
 80008ca:	e7d6      	b.n	800087a <HAL_RCC_OscConfig+0x102>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80008cc:	210c      	movs	r1, #12
 80008ce:	4d6e      	ldr	r5, [pc, #440]	; (8000a88 <HAL_RCC_OscConfig+0x310>)
 80008d0:	68ea      	ldr	r2, [r5, #12]
 80008d2:	400a      	ands	r2, r1
 80008d4:	2a04      	cmp	r2, #4
 80008d6:	d006      	beq.n	80008e6 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80008d8:	68eb      	ldr	r3, [r5, #12]
 80008da:	400b      	ands	r3, r1
 80008dc:	428b      	cmp	r3, r1
 80008de:	d110      	bne.n	8000902 <HAL_RCC_OscConfig+0x18a>
 80008e0:	68eb      	ldr	r3, [r5, #12]
 80008e2:	03db      	lsls	r3, r3, #15
 80008e4:	d40d      	bmi.n	8000902 <HAL_RCC_OscConfig+0x18a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008e6:	682b      	ldr	r3, [r5, #0]
 80008e8:	075b      	lsls	r3, r3, #29
 80008ea:	d502      	bpl.n	80008f2 <HAL_RCC_OscConfig+0x17a>
 80008ec:	68e3      	ldr	r3, [r4, #12]
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d1ac      	bne.n	800084c <HAL_RCC_OscConfig+0xd4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008f2:	686a      	ldr	r2, [r5, #4]
 80008f4:	6923      	ldr	r3, [r4, #16]
 80008f6:	496a      	ldr	r1, [pc, #424]	; (8000aa0 <HAL_RCC_OscConfig+0x328>)
 80008f8:	021b      	lsls	r3, r3, #8
 80008fa:	400a      	ands	r2, r1
 80008fc:	4313      	orrs	r3, r2
 80008fe:	606b      	str	r3, [r5, #4]
 8000900:	e744      	b.n	800078c <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000902:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000904:	682b      	ldr	r3, [r5, #0]
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000906:	2a00      	cmp	r2, #0
 8000908:	d010      	beq.n	800092c <HAL_RCC_OscConfig+0x1b4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800090a:	2109      	movs	r1, #9
 800090c:	438b      	bics	r3, r1
 800090e:	4313      	orrs	r3, r2
 8000910:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000912:	f7ff fdc5 	bl	80004a0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000916:	2604      	movs	r6, #4
        tickstart = HAL_GetTick();
 8000918:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800091a:	682b      	ldr	r3, [r5, #0]
 800091c:	4233      	tst	r3, r6
 800091e:	d1e8      	bne.n	80008f2 <HAL_RCC_OscConfig+0x17a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000920:	f7ff fdbe 	bl	80004a0 <HAL_GetTick>
 8000924:	1bc0      	subs	r0, r0, r7
 8000926:	2802      	cmp	r0, #2
 8000928:	d9f7      	bls.n	800091a <HAL_RCC_OscConfig+0x1a2>
 800092a:	e7a6      	b.n	800087a <HAL_RCC_OscConfig+0x102>
        __HAL_RCC_HSI_DISABLE();
 800092c:	2201      	movs	r2, #1
 800092e:	4393      	bics	r3, r2
 8000930:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000932:	f7ff fdb5 	bl	80004a0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000936:	2604      	movs	r6, #4
        tickstart = HAL_GetTick();
 8000938:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800093a:	682b      	ldr	r3, [r5, #0]
 800093c:	4233      	tst	r3, r6
 800093e:	d100      	bne.n	8000942 <HAL_RCC_OscConfig+0x1ca>
 8000940:	e724      	b.n	800078c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000942:	f7ff fdad 	bl	80004a0 <HAL_GetTick>
 8000946:	1bc0      	subs	r0, r0, r7
 8000948:	2802      	cmp	r0, #2
 800094a:	d9f6      	bls.n	800093a <HAL_RCC_OscConfig+0x1c2>
 800094c:	e795      	b.n	800087a <HAL_RCC_OscConfig+0x102>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800094e:	686b      	ldr	r3, [r5, #4]
 8000950:	4a4e      	ldr	r2, [pc, #312]	; (8000a8c <HAL_RCC_OscConfig+0x314>)
 8000952:	4013      	ands	r3, r2
 8000954:	4303      	orrs	r3, r0
 8000956:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000958:	686a      	ldr	r2, [r5, #4]
 800095a:	6a23      	ldr	r3, [r4, #32]
 800095c:	0212      	lsls	r2, r2, #8
 800095e:	061b      	lsls	r3, r3, #24
 8000960:	0a12      	lsrs	r2, r2, #8
 8000962:	4313      	orrs	r3, r2
 8000964:	606b      	str	r3, [r5, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000966:	f7ff fecd 	bl	8000704 <RCC_SetFlashLatencyFromMSIRange>
 800096a:	2800      	cmp	r0, #0
 800096c:	d100      	bne.n	8000970 <HAL_RCC_OscConfig+0x1f8>
 800096e:	e735      	b.n	80007dc <HAL_RCC_OscConfig+0x64>
 8000970:	e76c      	b.n	800084c <HAL_RCC_OscConfig+0xd4>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000972:	69e3      	ldr	r3, [r4, #28]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d020      	beq.n	80009ba <HAL_RCC_OscConfig+0x242>
        __HAL_RCC_MSI_ENABLE();
 8000978:	2380      	movs	r3, #128	; 0x80
 800097a:	682a      	ldr	r2, [r5, #0]
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	4313      	orrs	r3, r2
 8000980:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000982:	f7ff fd8d 	bl	80004a0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8000986:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000988:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 800098a:	00b6      	lsls	r6, r6, #2
 800098c:	682b      	ldr	r3, [r5, #0]
 800098e:	4233      	tst	r3, r6
 8000990:	d00d      	beq.n	80009ae <HAL_RCC_OscConfig+0x236>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000992:	686b      	ldr	r3, [r5, #4]
 8000994:	4a3d      	ldr	r2, [pc, #244]	; (8000a8c <HAL_RCC_OscConfig+0x314>)
 8000996:	4013      	ands	r3, r2
 8000998:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800099a:	4313      	orrs	r3, r2
 800099c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800099e:	686a      	ldr	r2, [r5, #4]
 80009a0:	6a23      	ldr	r3, [r4, #32]
 80009a2:	0212      	lsls	r2, r2, #8
 80009a4:	061b      	lsls	r3, r3, #24
 80009a6:	0a12      	lsrs	r2, r2, #8
 80009a8:	4313      	orrs	r3, r2
 80009aa:	606b      	str	r3, [r5, #4]
 80009ac:	e727      	b.n	80007fe <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80009ae:	f7ff fd77 	bl	80004a0 <HAL_GetTick>
 80009b2:	1bc0      	subs	r0, r0, r7
 80009b4:	2802      	cmp	r0, #2
 80009b6:	d9e9      	bls.n	800098c <HAL_RCC_OscConfig+0x214>
 80009b8:	e75f      	b.n	800087a <HAL_RCC_OscConfig+0x102>
        __HAL_RCC_MSI_DISABLE();
 80009ba:	682b      	ldr	r3, [r5, #0]
 80009bc:	4a39      	ldr	r2, [pc, #228]	; (8000aa4 <HAL_RCC_OscConfig+0x32c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 80009be:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_MSI_DISABLE();
 80009c0:	4013      	ands	r3, r2
 80009c2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80009c4:	f7ff fd6c 	bl	80004a0 <HAL_GetTick>
 80009c8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 80009ca:	00b6      	lsls	r6, r6, #2
 80009cc:	682b      	ldr	r3, [r5, #0]
 80009ce:	4233      	tst	r3, r6
 80009d0:	d100      	bne.n	80009d4 <HAL_RCC_OscConfig+0x25c>
 80009d2:	e714      	b.n	80007fe <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80009d4:	f7ff fd64 	bl	80004a0 <HAL_GetTick>
 80009d8:	1bc0      	subs	r0, r0, r7
 80009da:	2802      	cmp	r0, #2
 80009dc:	d9f6      	bls.n	80009cc <HAL_RCC_OscConfig+0x254>
 80009de:	e74c      	b.n	800087a <HAL_RCC_OscConfig+0x102>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80009e0:	6962      	ldr	r2, [r4, #20]
 80009e2:	2301      	movs	r3, #1
 80009e4:	4d28      	ldr	r5, [pc, #160]	; (8000a88 <HAL_RCC_OscConfig+0x310>)
 80009e6:	2a00      	cmp	r2, #0
 80009e8:	d010      	beq.n	8000a0c <HAL_RCC_OscConfig+0x294>
      __HAL_RCC_LSI_ENABLE();
 80009ea:	6d2a      	ldr	r2, [r5, #80]	; 0x50
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009ec:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 80009ee:	4313      	orrs	r3, r2
 80009f0:	652b      	str	r3, [r5, #80]	; 0x50
      tickstart = HAL_GetTick();
 80009f2:	f7ff fd55 	bl	80004a0 <HAL_GetTick>
 80009f6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009f8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80009fa:	4233      	tst	r3, r6
 80009fc:	d000      	beq.n	8000a00 <HAL_RCC_OscConfig+0x288>
 80009fe:	e702      	b.n	8000806 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a00:	f7ff fd4e 	bl	80004a0 <HAL_GetTick>
 8000a04:	1bc0      	subs	r0, r0, r7
 8000a06:	2802      	cmp	r0, #2
 8000a08:	d9f6      	bls.n	80009f8 <HAL_RCC_OscConfig+0x280>
 8000a0a:	e736      	b.n	800087a <HAL_RCC_OscConfig+0x102>
      __HAL_RCC_LSI_DISABLE();
 8000a0c:	6d2a      	ldr	r2, [r5, #80]	; 0x50
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a0e:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8000a10:	439a      	bics	r2, r3
 8000a12:	652a      	str	r2, [r5, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000a14:	f7ff fd44 	bl	80004a0 <HAL_GetTick>
 8000a18:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a1a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000a1c:	4233      	tst	r3, r6
 8000a1e:	d100      	bne.n	8000a22 <HAL_RCC_OscConfig+0x2aa>
 8000a20:	e6f1      	b.n	8000806 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a22:	f7ff fd3d 	bl	80004a0 <HAL_GetTick>
 8000a26:	1bc0      	subs	r0, r0, r7
 8000a28:	2802      	cmp	r0, #2
 8000a2a:	d9f6      	bls.n	8000a1a <HAL_RCC_OscConfig+0x2a2>
 8000a2c:	e725      	b.n	800087a <HAL_RCC_OscConfig+0x102>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a2e:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000a30:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a32:	4d15      	ldr	r5, [pc, #84]	; (8000a88 <HAL_RCC_OscConfig+0x310>)
 8000a34:	055b      	lsls	r3, r3, #21
 8000a36:	6baa      	ldr	r2, [r5, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8000a38:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a3a:	421a      	tst	r2, r3
 8000a3c:	d104      	bne.n	8000a48 <HAL_RCC_OscConfig+0x2d0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a3e:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000a40:	4313      	orrs	r3, r2
 8000a42:	63ab      	str	r3, [r5, #56]	; 0x38
      pwrclkchanged = SET;
 8000a44:	2301      	movs	r3, #1
 8000a46:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a48:	2780      	movs	r7, #128	; 0x80
 8000a4a:	4e17      	ldr	r6, [pc, #92]	; (8000aa8 <HAL_RCC_OscConfig+0x330>)
 8000a4c:	007f      	lsls	r7, r7, #1
 8000a4e:	6833      	ldr	r3, [r6, #0]
 8000a50:	423b      	tst	r3, r7
 8000a52:	d008      	beq.n	8000a66 <HAL_RCC_OscConfig+0x2ee>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a54:	2280      	movs	r2, #128	; 0x80
 8000a56:	68a3      	ldr	r3, [r4, #8]
 8000a58:	0052      	lsls	r2, r2, #1
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d126      	bne.n	8000aac <HAL_RCC_OscConfig+0x334>
 8000a5e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8000a60:	4313      	orrs	r3, r2
 8000a62:	652b      	str	r3, [r5, #80]	; 0x50
 8000a64:	e047      	b.n	8000af6 <HAL_RCC_OscConfig+0x37e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a66:	6833      	ldr	r3, [r6, #0]
 8000a68:	433b      	orrs	r3, r7
 8000a6a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000a6c:	f7ff fd18 	bl	80004a0 <HAL_GetTick>
 8000a70:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a72:	6833      	ldr	r3, [r6, #0]
 8000a74:	423b      	tst	r3, r7
 8000a76:	d1ed      	bne.n	8000a54 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a78:	f7ff fd12 	bl	80004a0 <HAL_GetTick>
 8000a7c:	9b01      	ldr	r3, [sp, #4]
 8000a7e:	1ac0      	subs	r0, r0, r3
 8000a80:	2864      	cmp	r0, #100	; 0x64
 8000a82:	d9f6      	bls.n	8000a72 <HAL_RCC_OscConfig+0x2fa>
 8000a84:	e6f9      	b.n	800087a <HAL_RCC_OscConfig+0x102>
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	ffff1fff 	.word	0xffff1fff
 8000a90:	08002c59 	.word	0x08002c59
 8000a94:	20000000 	.word	0x20000000
 8000a98:	fffeffff 	.word	0xfffeffff
 8000a9c:	fffbffff 	.word	0xfffbffff
 8000aa0:	ffffe0ff 	.word	0xffffe0ff
 8000aa4:	fffffeff 	.word	0xfffffeff
 8000aa8:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d116      	bne.n	8000ade <HAL_RCC_OscConfig+0x366>
 8000ab0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000ab2:	4a60      	ldr	r2, [pc, #384]	; (8000c34 <HAL_RCC_OscConfig+0x4bc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ab4:	2780      	movs	r7, #128	; 0x80
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	652b      	str	r3, [r5, #80]	; 0x50
 8000aba:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000abc:	4a5e      	ldr	r2, [pc, #376]	; (8000c38 <HAL_RCC_OscConfig+0x4c0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000abe:	00bf      	lsls	r7, r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	652b      	str	r3, [r5, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000ac4:	f7ff fcec 	bl	80004a0 <HAL_GetTick>
 8000ac8:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000aca:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000acc:	423b      	tst	r3, r7
 8000ace:	d02a      	beq.n	8000b26 <HAL_RCC_OscConfig+0x3ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ad0:	f7ff fce6 	bl	80004a0 <HAL_GetTick>
 8000ad4:	4b59      	ldr	r3, [pc, #356]	; (8000c3c <HAL_RCC_OscConfig+0x4c4>)
 8000ad6:	1b80      	subs	r0, r0, r6
 8000ad8:	4298      	cmp	r0, r3
 8000ada:	d9f6      	bls.n	8000aca <HAL_RCC_OscConfig+0x352>
 8000adc:	e6cd      	b.n	800087a <HAL_RCC_OscConfig+0x102>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ade:	21a0      	movs	r1, #160	; 0xa0
 8000ae0:	00c9      	lsls	r1, r1, #3
 8000ae2:	428b      	cmp	r3, r1
 8000ae4:	d10d      	bne.n	8000b02 <HAL_RCC_OscConfig+0x38a>
 8000ae6:	2380      	movs	r3, #128	; 0x80
 8000ae8:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8000aea:	00db      	lsls	r3, r3, #3
 8000aec:	430b      	orrs	r3, r1
 8000aee:	652b      	str	r3, [r5, #80]	; 0x50
 8000af0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000af2:	431a      	orrs	r2, r3
 8000af4:	652a      	str	r2, [r5, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000af6:	f7ff fcd3 	bl	80004a0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000afa:	2780      	movs	r7, #128	; 0x80
      tickstart = HAL_GetTick();
 8000afc:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000afe:	00bf      	lsls	r7, r7, #2
 8000b00:	e00e      	b.n	8000b20 <HAL_RCC_OscConfig+0x3a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b02:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000b04:	4a4b      	ldr	r2, [pc, #300]	; (8000c34 <HAL_RCC_OscConfig+0x4bc>)
 8000b06:	4013      	ands	r3, r2
 8000b08:	652b      	str	r3, [r5, #80]	; 0x50
 8000b0a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000b0c:	4a4a      	ldr	r2, [pc, #296]	; (8000c38 <HAL_RCC_OscConfig+0x4c0>)
 8000b0e:	4013      	ands	r3, r2
 8000b10:	e7a7      	b.n	8000a62 <HAL_RCC_OscConfig+0x2ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b12:	f7ff fcc5 	bl	80004a0 <HAL_GetTick>
 8000b16:	4b49      	ldr	r3, [pc, #292]	; (8000c3c <HAL_RCC_OscConfig+0x4c4>)
 8000b18:	1b80      	subs	r0, r0, r6
 8000b1a:	4298      	cmp	r0, r3
 8000b1c:	d900      	bls.n	8000b20 <HAL_RCC_OscConfig+0x3a8>
 8000b1e:	e6ac      	b.n	800087a <HAL_RCC_OscConfig+0x102>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b20:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000b22:	423b      	tst	r3, r7
 8000b24:	d0f5      	beq.n	8000b12 <HAL_RCC_OscConfig+0x39a>
    if(pwrclkchanged == SET)
 8000b26:	9b00      	ldr	r3, [sp, #0]
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d000      	beq.n	8000b2e <HAL_RCC_OscConfig+0x3b6>
 8000b2c:	e66f      	b.n	800080e <HAL_RCC_OscConfig+0x96>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b2e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000b30:	4a43      	ldr	r2, [pc, #268]	; (8000c40 <HAL_RCC_OscConfig+0x4c8>)
 8000b32:	4013      	ands	r3, r2
 8000b34:	63ab      	str	r3, [r5, #56]	; 0x38
 8000b36:	e66a      	b.n	800080e <HAL_RCC_OscConfig+0x96>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000b38:	69a1      	ldr	r1, [r4, #24]
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	4d41      	ldr	r5, [pc, #260]	; (8000c44 <HAL_RCC_OscConfig+0x4cc>)
 8000b3e:	4a42      	ldr	r2, [pc, #264]	; (8000c48 <HAL_RCC_OscConfig+0x4d0>)
 8000b40:	2900      	cmp	r1, #0
 8000b42:	d018      	beq.n	8000b76 <HAL_RCC_OscConfig+0x3fe>
        __HAL_RCC_HSI48_ENABLE();
 8000b44:	68a9      	ldr	r1, [r5, #8]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000b46:	2602      	movs	r6, #2
        __HAL_RCC_HSI48_ENABLE();
 8000b48:	4319      	orrs	r1, r3
 8000b4a:	60a9      	str	r1, [r5, #8]
 8000b4c:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8000b4e:	430b      	orrs	r3, r1
 8000b50:	636b      	str	r3, [r5, #52]	; 0x34
 8000b52:	2380      	movs	r3, #128	; 0x80
 8000b54:	6a11      	ldr	r1, [r2, #32]
 8000b56:	019b      	lsls	r3, r3, #6
 8000b58:	430b      	orrs	r3, r1
 8000b5a:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8000b5c:	f7ff fca0 	bl	80004a0 <HAL_GetTick>
 8000b60:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000b62:	68ab      	ldr	r3, [r5, #8]
 8000b64:	4233      	tst	r3, r6
 8000b66:	d000      	beq.n	8000b6a <HAL_RCC_OscConfig+0x3f2>
 8000b68:	e655      	b.n	8000816 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000b6a:	f7ff fc99 	bl	80004a0 <HAL_GetTick>
 8000b6e:	1bc0      	subs	r0, r0, r7
 8000b70:	2802      	cmp	r0, #2
 8000b72:	d9f6      	bls.n	8000b62 <HAL_RCC_OscConfig+0x3ea>
 8000b74:	e681      	b.n	800087a <HAL_RCC_OscConfig+0x102>
        __HAL_RCC_HSI48_DISABLE();
 8000b76:	68a9      	ldr	r1, [r5, #8]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000b78:	2602      	movs	r6, #2
        __HAL_RCC_HSI48_DISABLE();
 8000b7a:	4399      	bics	r1, r3
 8000b7c:	60a9      	str	r1, [r5, #8]
 8000b7e:	6a13      	ldr	r3, [r2, #32]
 8000b80:	4932      	ldr	r1, [pc, #200]	; (8000c4c <HAL_RCC_OscConfig+0x4d4>)
 8000b82:	400b      	ands	r3, r1
 8000b84:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8000b86:	f7ff fc8b 	bl	80004a0 <HAL_GetTick>
 8000b8a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000b8c:	68ab      	ldr	r3, [r5, #8]
 8000b8e:	4233      	tst	r3, r6
 8000b90:	d100      	bne.n	8000b94 <HAL_RCC_OscConfig+0x41c>
 8000b92:	e640      	b.n	8000816 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000b94:	f7ff fc84 	bl	80004a0 <HAL_GetTick>
 8000b98:	1bc0      	subs	r0, r0, r7
 8000b9a:	2802      	cmp	r0, #2
 8000b9c:	d9f6      	bls.n	8000b8c <HAL_RCC_OscConfig+0x414>
 8000b9e:	e66c      	b.n	800087a <HAL_RCC_OscConfig+0x102>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ba0:	220c      	movs	r2, #12
 8000ba2:	4d28      	ldr	r5, [pc, #160]	; (8000c44 <HAL_RCC_OscConfig+0x4cc>)
      return HAL_ERROR;
 8000ba4:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ba6:	68eb      	ldr	r3, [r5, #12]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d100      	bne.n	8000bb0 <HAL_RCC_OscConfig+0x438>
 8000bae:	e64e      	b.n	800084e <HAL_RCC_OscConfig+0xd6>
        __HAL_RCC_PLL_DISABLE();
 8000bb0:	682b      	ldr	r3, [r5, #0]
 8000bb2:	4a27      	ldr	r2, [pc, #156]	; (8000c50 <HAL_RCC_OscConfig+0x4d8>)
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000bb8:	2902      	cmp	r1, #2
 8000bba:	d12b      	bne.n	8000c14 <HAL_RCC_OscConfig+0x49c>
        tickstart = HAL_GetTick();
 8000bbc:	f7ff fc70 	bl	80004a0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bc0:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000bc2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bc4:	04b6      	lsls	r6, r6, #18
 8000bc6:	682b      	ldr	r3, [r5, #0]
 8000bc8:	4233      	tst	r3, r6
 8000bca:	d11d      	bne.n	8000c08 <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000bcc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000bce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000bd0:	68ea      	ldr	r2, [r5, #12]
 8000bd2:	430b      	orrs	r3, r1
 8000bd4:	491f      	ldr	r1, [pc, #124]	; (8000c54 <HAL_RCC_OscConfig+0x4dc>)
 8000bd6:	400a      	ands	r2, r1
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	6b62      	ldr	r2, [r4, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bdc:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000bde:	4313      	orrs	r3, r2
 8000be0:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8000be2:	2380      	movs	r3, #128	; 0x80
 8000be4:	682a      	ldr	r2, [r5, #0]
 8000be6:	045b      	lsls	r3, r3, #17
 8000be8:	4313      	orrs	r3, r2
 8000bea:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000bec:	f7ff fc58 	bl	80004a0 <HAL_GetTick>
 8000bf0:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bf2:	04a4      	lsls	r4, r4, #18
 8000bf4:	682b      	ldr	r3, [r5, #0]
 8000bf6:	4223      	tst	r3, r4
 8000bf8:	d000      	beq.n	8000bfc <HAL_RCC_OscConfig+0x484>
 8000bfa:	e610      	b.n	800081e <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bfc:	f7ff fc50 	bl	80004a0 <HAL_GetTick>
 8000c00:	1b80      	subs	r0, r0, r6
 8000c02:	2802      	cmp	r0, #2
 8000c04:	d9f6      	bls.n	8000bf4 <HAL_RCC_OscConfig+0x47c>
 8000c06:	e638      	b.n	800087a <HAL_RCC_OscConfig+0x102>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c08:	f7ff fc4a 	bl	80004a0 <HAL_GetTick>
 8000c0c:	1bc0      	subs	r0, r0, r7
 8000c0e:	2802      	cmp	r0, #2
 8000c10:	d9d9      	bls.n	8000bc6 <HAL_RCC_OscConfig+0x44e>
 8000c12:	e632      	b.n	800087a <HAL_RCC_OscConfig+0x102>
        tickstart = HAL_GetTick();
 8000c14:	f7ff fc44 	bl	80004a0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c18:	2480      	movs	r4, #128	; 0x80
        tickstart = HAL_GetTick();
 8000c1a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c1c:	04a4      	lsls	r4, r4, #18
 8000c1e:	682b      	ldr	r3, [r5, #0]
 8000c20:	4223      	tst	r3, r4
 8000c22:	d100      	bne.n	8000c26 <HAL_RCC_OscConfig+0x4ae>
 8000c24:	e5fb      	b.n	800081e <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c26:	f7ff fc3b 	bl	80004a0 <HAL_GetTick>
 8000c2a:	1b80      	subs	r0, r0, r6
 8000c2c:	2802      	cmp	r0, #2
 8000c2e:	d9f6      	bls.n	8000c1e <HAL_RCC_OscConfig+0x4a6>
 8000c30:	e623      	b.n	800087a <HAL_RCC_OscConfig+0x102>
 8000c32:	46c0      	nop			; (mov r8, r8)
 8000c34:	fffffeff 	.word	0xfffffeff
 8000c38:	fffffbff 	.word	0xfffffbff
 8000c3c:	00001388 	.word	0x00001388
 8000c40:	efffffff 	.word	0xefffffff
 8000c44:	40021000 	.word	0x40021000
 8000c48:	40010000 	.word	0x40010000
 8000c4c:	ffffdfff 	.word	0xffffdfff
 8000c50:	feffffff 	.word	0xfeffffff
 8000c54:	ff02ffff 	.word	0xff02ffff

08000c58 <HAL_RCC_GetSysClockFreq>:
  switch (tmpreg & RCC_CFGR_SWS)
 8000c58:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000c5a:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <HAL_RCC_GetSysClockFreq+0x64>)
{
 8000c5c:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8000c5e:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8000c60:	400a      	ands	r2, r1
 8000c62:	2a08      	cmp	r2, #8
 8000c64:	d026      	beq.n	8000cb4 <HAL_RCC_GetSysClockFreq+0x5c>
 8000c66:	2a0c      	cmp	r2, #12
 8000c68:	d006      	beq.n	8000c78 <HAL_RCC_GetSysClockFreq+0x20>
 8000c6a:	2a04      	cmp	r2, #4
 8000c6c:	d11a      	bne.n	8000ca4 <HAL_RCC_GetSysClockFreq+0x4c>
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	06db      	lsls	r3, r3, #27
 8000c72:	d421      	bmi.n	8000cb8 <HAL_RCC_GetSysClockFreq+0x60>
        sysclockfreq =  HSI_VALUE;
 8000c74:	4812      	ldr	r0, [pc, #72]	; (8000cc0 <HAL_RCC_GetSysClockFreq+0x68>)
}
 8000c76:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000c78:	028a      	lsls	r2, r1, #10
 8000c7a:	4812      	ldr	r0, [pc, #72]	; (8000cc4 <HAL_RCC_GetSysClockFreq+0x6c>)
 8000c7c:	0f12      	lsrs	r2, r2, #28
 8000c7e:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1;
 8000c80:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c82:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1;
 8000c84:	0f89      	lsrs	r1, r1, #30
 8000c86:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c88:	03c0      	lsls	r0, r0, #15
 8000c8a:	d504      	bpl.n	8000c96 <HAL_RCC_GetSysClockFreq+0x3e>
        pllvco = (HSE_VALUE * pllm) / plld;
 8000c8c:	480e      	ldr	r0, [pc, #56]	; (8000cc8 <HAL_RCC_GetSysClockFreq+0x70>)
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8000c8e:	4350      	muls	r0, r2
 8000c90:	f7ff fa44 	bl	800011c <__udivsi3>
 8000c94:	e7ef      	b.n	8000c76 <HAL_RCC_GetSysClockFreq+0x1e>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	06db      	lsls	r3, r3, #27
 8000c9a:	d501      	bpl.n	8000ca0 <HAL_RCC_GetSysClockFreq+0x48>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8000c9c:	480b      	ldr	r0, [pc, #44]	; (8000ccc <HAL_RCC_GetSysClockFreq+0x74>)
 8000c9e:	e7f6      	b.n	8000c8e <HAL_RCC_GetSysClockFreq+0x36>
         pllvco = (HSI_VALUE * pllm) / plld;
 8000ca0:	4807      	ldr	r0, [pc, #28]	; (8000cc0 <HAL_RCC_GetSysClockFreq+0x68>)
 8000ca2:	e7f4      	b.n	8000c8e <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = (32768 * (1 << (msiclkrange + 1)));
 8000ca4:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 8000ca6:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768 * (1 << (msiclkrange + 1)));
 8000ca8:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 8000caa:	041b      	lsls	r3, r3, #16
 8000cac:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768 * (1 << (msiclkrange + 1)));
 8000cae:	3301      	adds	r3, #1
 8000cb0:	4098      	lsls	r0, r3
 8000cb2:	e7e0      	b.n	8000c76 <HAL_RCC_GetSysClockFreq+0x1e>
      sysclockfreq = HSE_VALUE;
 8000cb4:	4804      	ldr	r0, [pc, #16]	; (8000cc8 <HAL_RCC_GetSysClockFreq+0x70>)
 8000cb6:	e7de      	b.n	8000c76 <HAL_RCC_GetSysClockFreq+0x1e>
        sysclockfreq =  (HSI_VALUE >> 2);
 8000cb8:	4804      	ldr	r0, [pc, #16]	; (8000ccc <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 8000cba:	e7dc      	b.n	8000c76 <HAL_RCC_GetSysClockFreq+0x1e>
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	00f42400 	.word	0x00f42400
 8000cc4:	08002c71 	.word	0x08002c71
 8000cc8:	007a1200 	.word	0x007a1200
 8000ccc:	003d0900 	.word	0x003d0900

08000cd0 <HAL_RCC_ClockConfig>:
{
 8000cd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	4c53      	ldr	r4, [pc, #332]	; (8000e24 <HAL_RCC_ClockConfig+0x154>)
{
 8000cd6:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000cd8:	6823      	ldr	r3, [r4, #0]
{
 8000cda:	9101      	str	r1, [sp, #4]
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000cdc:	4013      	ands	r3, r2
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d328      	bcc.n	8000d34 <HAL_RCC_ClockConfig+0x64>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ce2:	6832      	ldr	r2, [r6, #0]
 8000ce4:	0793      	lsls	r3, r2, #30
 8000ce6:	d431      	bmi.n	8000d4c <HAL_RCC_ClockConfig+0x7c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ce8:	07d3      	lsls	r3, r2, #31
 8000cea:	d437      	bmi.n	8000d5c <HAL_RCC_ClockConfig+0x8c>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000cec:	2301      	movs	r3, #1
 8000cee:	6822      	ldr	r2, [r4, #0]
 8000cf0:	9901      	ldr	r1, [sp, #4]
 8000cf2:	401a      	ands	r2, r3
 8000cf4:	4291      	cmp	r1, r2
 8000cf6:	d200      	bcs.n	8000cfa <HAL_RCC_ClockConfig+0x2a>
 8000cf8:	e085      	b.n	8000e06 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cfa:	6832      	ldr	r2, [r6, #0]
 8000cfc:	4c4a      	ldr	r4, [pc, #296]	; (8000e28 <HAL_RCC_ClockConfig+0x158>)
 8000cfe:	0753      	lsls	r3, r2, #29
 8000d00:	d500      	bpl.n	8000d04 <HAL_RCC_ClockConfig+0x34>
 8000d02:	e087      	b.n	8000e14 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d04:	0713      	lsls	r3, r2, #28
 8000d06:	d506      	bpl.n	8000d16 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000d08:	68e2      	ldr	r2, [r4, #12]
 8000d0a:	6933      	ldr	r3, [r6, #16]
 8000d0c:	4947      	ldr	r1, [pc, #284]	; (8000e2c <HAL_RCC_ClockConfig+0x15c>)
 8000d0e:	00db      	lsls	r3, r3, #3
 8000d10:	400a      	ands	r2, r1
 8000d12:	4313      	orrs	r3, r2
 8000d14:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000d16:	f7ff ff9f 	bl	8000c58 <HAL_RCC_GetSysClockFreq>
 8000d1a:	68e3      	ldr	r3, [r4, #12]
 8000d1c:	4a44      	ldr	r2, [pc, #272]	; (8000e30 <HAL_RCC_ClockConfig+0x160>)
 8000d1e:	061b      	lsls	r3, r3, #24
 8000d20:	0f1b      	lsrs	r3, r3, #28
 8000d22:	5cd3      	ldrb	r3, [r2, r3]
 8000d24:	40d8      	lsrs	r0, r3
 8000d26:	4b43      	ldr	r3, [pc, #268]	; (8000e34 <HAL_RCC_ClockConfig+0x164>)
 8000d28:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000d2a:	2000      	movs	r0, #0
 8000d2c:	f7ff fb8c 	bl	8000448 <HAL_InitTick>
  return HAL_OK;
 8000d30:	2000      	movs	r0, #0
 8000d32:	e00a      	b.n	8000d4a <HAL_RCC_ClockConfig+0x7a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d34:	6823      	ldr	r3, [r4, #0]
 8000d36:	9901      	ldr	r1, [sp, #4]
 8000d38:	4393      	bics	r3, r2
 8000d3a:	430b      	orrs	r3, r1
 8000d3c:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000d3e:	6823      	ldr	r3, [r4, #0]
 8000d40:	4013      	ands	r3, r2
 8000d42:	9a01      	ldr	r2, [sp, #4]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d0cc      	beq.n	8000ce2 <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8000d48:	2001      	movs	r0, #1
}
 8000d4a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d4c:	20f0      	movs	r0, #240	; 0xf0
 8000d4e:	4936      	ldr	r1, [pc, #216]	; (8000e28 <HAL_RCC_ClockConfig+0x158>)
 8000d50:	68cb      	ldr	r3, [r1, #12]
 8000d52:	4383      	bics	r3, r0
 8000d54:	68b0      	ldr	r0, [r6, #8]
 8000d56:	4303      	orrs	r3, r0
 8000d58:	60cb      	str	r3, [r1, #12]
 8000d5a:	e7c5      	b.n	8000ce8 <HAL_RCC_ClockConfig+0x18>
 8000d5c:	4d32      	ldr	r5, [pc, #200]	; (8000e28 <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d5e:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d60:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d62:	2a02      	cmp	r2, #2
 8000d64:	d119      	bne.n	8000d9a <HAL_RCC_ClockConfig+0xca>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d66:	039b      	lsls	r3, r3, #14
 8000d68:	d5ee      	bpl.n	8000d48 <HAL_RCC_ClockConfig+0x78>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d6a:	2103      	movs	r1, #3
 8000d6c:	68eb      	ldr	r3, [r5, #12]
 8000d6e:	438b      	bics	r3, r1
 8000d70:	4313      	orrs	r3, r2
 8000d72:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8000d74:	f7ff fb94 	bl	80004a0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d78:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000d7a:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	d119      	bne.n	8000db4 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d80:	220c      	movs	r2, #12
 8000d82:	68eb      	ldr	r3, [r5, #12]
 8000d84:	4013      	ands	r3, r2
 8000d86:	2b08      	cmp	r3, #8
 8000d88:	d0b0      	beq.n	8000cec <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d8a:	f7ff fb89 	bl	80004a0 <HAL_GetTick>
 8000d8e:	4b2a      	ldr	r3, [pc, #168]	; (8000e38 <HAL_RCC_ClockConfig+0x168>)
 8000d90:	1bc0      	subs	r0, r0, r7
 8000d92:	4298      	cmp	r0, r3
 8000d94:	d9f4      	bls.n	8000d80 <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 8000d96:	2003      	movs	r0, #3
 8000d98:	e7d7      	b.n	8000d4a <HAL_RCC_ClockConfig+0x7a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d9a:	2a03      	cmp	r2, #3
 8000d9c:	d102      	bne.n	8000da4 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d9e:	019b      	lsls	r3, r3, #6
 8000da0:	d4e3      	bmi.n	8000d6a <HAL_RCC_ClockConfig+0x9a>
 8000da2:	e7d1      	b.n	8000d48 <HAL_RCC_ClockConfig+0x78>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000da4:	2a01      	cmp	r2, #1
 8000da6:	d102      	bne.n	8000dae <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000da8:	075b      	lsls	r3, r3, #29
 8000daa:	d4de      	bmi.n	8000d6a <HAL_RCC_ClockConfig+0x9a>
 8000dac:	e7cc      	b.n	8000d48 <HAL_RCC_ClockConfig+0x78>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8000dae:	059b      	lsls	r3, r3, #22
 8000db0:	d4db      	bmi.n	8000d6a <HAL_RCC_ClockConfig+0x9a>
 8000db2:	e7c9      	b.n	8000d48 <HAL_RCC_ClockConfig+0x78>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000db4:	2b03      	cmp	r3, #3
 8000db6:	d10c      	bne.n	8000dd2 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000db8:	220c      	movs	r2, #12
 8000dba:	68eb      	ldr	r3, [r5, #12]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d100      	bne.n	8000dc4 <HAL_RCC_ClockConfig+0xf4>
 8000dc2:	e793      	b.n	8000cec <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dc4:	f7ff fb6c 	bl	80004a0 <HAL_GetTick>
 8000dc8:	4b1b      	ldr	r3, [pc, #108]	; (8000e38 <HAL_RCC_ClockConfig+0x168>)
 8000dca:	1bc0      	subs	r0, r0, r7
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	d9f3      	bls.n	8000db8 <HAL_RCC_ClockConfig+0xe8>
 8000dd0:	e7e1      	b.n	8000d96 <HAL_RCC_ClockConfig+0xc6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d011      	beq.n	8000dfa <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8000dd6:	220c      	movs	r2, #12
 8000dd8:	68eb      	ldr	r3, [r5, #12]
 8000dda:	4213      	tst	r3, r2
 8000ddc:	d100      	bne.n	8000de0 <HAL_RCC_ClockConfig+0x110>
 8000dde:	e785      	b.n	8000cec <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000de0:	f7ff fb5e 	bl	80004a0 <HAL_GetTick>
 8000de4:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <HAL_RCC_ClockConfig+0x168>)
 8000de6:	1bc0      	subs	r0, r0, r7
 8000de8:	4298      	cmp	r0, r3
 8000dea:	d9f4      	bls.n	8000dd6 <HAL_RCC_ClockConfig+0x106>
 8000dec:	e7d3      	b.n	8000d96 <HAL_RCC_ClockConfig+0xc6>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dee:	f7ff fb57 	bl	80004a0 <HAL_GetTick>
 8000df2:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <HAL_RCC_ClockConfig+0x168>)
 8000df4:	1bc0      	subs	r0, r0, r7
 8000df6:	4298      	cmp	r0, r3
 8000df8:	d8cd      	bhi.n	8000d96 <HAL_RCC_ClockConfig+0xc6>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000dfa:	220c      	movs	r2, #12
 8000dfc:	68eb      	ldr	r3, [r5, #12]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	2b04      	cmp	r3, #4
 8000e02:	d1f4      	bne.n	8000dee <HAL_RCC_ClockConfig+0x11e>
 8000e04:	e772      	b.n	8000cec <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e06:	6822      	ldr	r2, [r4, #0]
 8000e08:	439a      	bics	r2, r3
 8000e0a:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000e0c:	6822      	ldr	r2, [r4, #0]
 8000e0e:	421a      	tst	r2, r3
 8000e10:	d19a      	bne.n	8000d48 <HAL_RCC_ClockConfig+0x78>
 8000e12:	e772      	b.n	8000cfa <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e14:	68e3      	ldr	r3, [r4, #12]
 8000e16:	4909      	ldr	r1, [pc, #36]	; (8000e3c <HAL_RCC_ClockConfig+0x16c>)
 8000e18:	400b      	ands	r3, r1
 8000e1a:	68f1      	ldr	r1, [r6, #12]
 8000e1c:	430b      	orrs	r3, r1
 8000e1e:	60e3      	str	r3, [r4, #12]
 8000e20:	e770      	b.n	8000d04 <HAL_RCC_ClockConfig+0x34>
 8000e22:	46c0      	nop			; (mov r8, r8)
 8000e24:	40022000 	.word	0x40022000
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	ffffc7ff 	.word	0xffffc7ff
 8000e30:	08002c59 	.word	0x08002c59
 8000e34:	20000000 	.word	0x20000000
 8000e38:	00001388 	.word	0x00001388
 8000e3c:	fffff8ff 	.word	0xfffff8ff

08000e40 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8000e40:	4b01      	ldr	r3, [pc, #4]	; (8000e48 <HAL_RCC_GetHCLKFreq+0x8>)
 8000e42:	6818      	ldr	r0, [r3, #0]
}
 8000e44:	4770      	bx	lr
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	20000000 	.word	0x20000000

08000e4c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8000e4c:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000e4e:	4a05      	ldr	r2, [pc, #20]	; (8000e64 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000e50:	68db      	ldr	r3, [r3, #12]
 8000e52:	055b      	lsls	r3, r3, #21
 8000e54:	0f5b      	lsrs	r3, r3, #29
 8000e56:	5cd3      	ldrb	r3, [r2, r3]
 8000e58:	4a03      	ldr	r2, [pc, #12]	; (8000e68 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000e5a:	6810      	ldr	r0, [r2, #0]
 8000e5c:	40d8      	lsrs	r0, r3
}    
 8000e5e:	4770      	bx	lr
 8000e60:	40021000 	.word	0x40021000
 8000e64:	08002c69 	.word	0x08002c69
 8000e68:	20000000 	.word	0x20000000

08000e6c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000e6c:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000e6e:	4a05      	ldr	r2, [pc, #20]	; (8000e84 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000e70:	68db      	ldr	r3, [r3, #12]
 8000e72:	049b      	lsls	r3, r3, #18
 8000e74:	0f5b      	lsrs	r3, r3, #29
 8000e76:	5cd3      	ldrb	r3, [r2, r3]
 8000e78:	4a03      	ldr	r2, [pc, #12]	; (8000e88 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000e7a:	6810      	ldr	r0, [r2, #0]
 8000e7c:	40d8      	lsrs	r0, r3
} 
 8000e7e:	4770      	bx	lr
 8000e80:	40021000 	.word	0x40021000
 8000e84:	08002c69 	.word	0x08002c69
 8000e88:	20000000 	.word	0x20000000

08000e8c <HAL_RCCEx_PeriphCLKConfig>:
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8000e8c:	2382      	movs	r3, #130	; 0x82
{
 8000e8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
 8000e90:	6802      	ldr	r2, [r0, #0]
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8000e92:	011b      	lsls	r3, r3, #4
{
 8000e94:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
 8000e96:	421a      	tst	r2, r3
 8000e98:	d048      	beq.n	8000f2c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e9a:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000e9c:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e9e:	4c65      	ldr	r4, [pc, #404]	; (8001034 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8000ea0:	055b      	lsls	r3, r3, #21
 8000ea2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8000ea4:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ea6:	421a      	tst	r2, r3
 8000ea8:	d104      	bne.n	8000eb4 <HAL_RCCEx_PeriphCLKConfig+0x28>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000eaa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000eac:	4313      	orrs	r3, r2
 8000eae:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eb4:	2780      	movs	r7, #128	; 0x80
 8000eb6:	4e60      	ldr	r6, [pc, #384]	; (8001038 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8000eb8:	007f      	lsls	r7, r7, #1
 8000eba:	6833      	ldr	r3, [r6, #0]
 8000ebc:	423b      	tst	r3, r7
 8000ebe:	d077      	beq.n	8000fb0 <HAL_RCCEx_PeriphCLKConfig+0x124>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */ 
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8000ec0:	6869      	ldr	r1, [r5, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8000ec2:	22c0      	movs	r2, #192	; 0xc0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8000ec4:	0008      	movs	r0, r1
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8000ec6:	6823      	ldr	r3, [r4, #0]
 8000ec8:	0392      	lsls	r2, r2, #14
 8000eca:	4013      	ands	r3, r2
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8000ecc:	4010      	ands	r0, r2
 8000ece:	4283      	cmp	r3, r0
 8000ed0:	d103      	bne.n	8000eda <HAL_RCCEx_PeriphCLKConfig+0x4e>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8000ed2:	68a8      	ldr	r0, [r5, #8]
 8000ed4:	4002      	ands	r2, r0
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d009      	beq.n	8000eee <HAL_RCCEx_PeriphCLKConfig+0x62>
#endif /* LCD */
       )
    { /* Check HSE State */
      if (((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE) && HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8000eda:	23c0      	movs	r3, #192	; 0xc0
 8000edc:	000a      	movs	r2, r1
 8000ede:	029b      	lsls	r3, r3, #10
 8000ee0:	401a      	ands	r2, r3
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	d103      	bne.n	8000eee <HAL_RCCEx_PeriphCLKConfig+0x62>
 8000ee6:	6823      	ldr	r3, [r4, #0]
      {
        /* To update HSE divider, first switch-OFF HSE clock oscillator*/
        return HAL_ERROR; 
 8000ee8:	2001      	movs	r0, #1
      if (((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE) && HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8000eea:	039b      	lsls	r3, r3, #14
 8000eec:	d471      	bmi.n	8000fd2 <HAL_RCCEx_PeriphCLKConfig+0x146>
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8000eee:	22c0      	movs	r2, #192	; 0xc0
 8000ef0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000ef2:	0292      	lsls	r2, r2, #10
 8000ef4:	4013      	ands	r3, r2
    
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8000ef6:	d000      	beq.n	8000efa <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8000ef8:	e06c      	b.n	8000fd4 <HAL_RCCEx_PeriphCLKConfig+0x148>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000efa:	6869      	ldr	r1, [r5, #4]
 8000efc:	23c0      	movs	r3, #192	; 0xc0
 8000efe:	000a      	movs	r2, r1
 8000f00:	029b      	lsls	r3, r3, #10
 8000f02:	401a      	ands	r2, r3
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d107      	bne.n	8000f18 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8000f08:	6823      	ldr	r3, [r4, #0]
 8000f0a:	484c      	ldr	r0, [pc, #304]	; (800103c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8000f0c:	4003      	ands	r3, r0
 8000f0e:	20c0      	movs	r0, #192	; 0xc0
 8000f10:	0380      	lsls	r0, r0, #14
 8000f12:	4001      	ands	r1, r0
 8000f14:	430b      	orrs	r3, r1
 8000f16:	6023      	str	r3, [r4, #0]
 8000f18:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000f1a:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000f1c:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000f1e:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d103      	bne.n	8000f2c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000f26:	4a46      	ldr	r2, [pc, #280]	; (8001040 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8000f28:	4013      	ands	r3, r2
 8000f2a:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }
  
#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000f2c:	682b      	ldr	r3, [r5, #0]
 8000f2e:	07da      	lsls	r2, r3, #31
 8000f30:	d506      	bpl.n	8000f40 <HAL_RCCEx_PeriphCLKConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000f32:	2003      	movs	r0, #3
 8000f34:	493f      	ldr	r1, [pc, #252]	; (8001034 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8000f36:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000f38:	4382      	bics	r2, r0
 8000f3a:	68e8      	ldr	r0, [r5, #12]
 8000f3c:	4302      	orrs	r2, r0
 8000f3e:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */
  
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8000f40:	079a      	lsls	r2, r3, #30
 8000f42:	d506      	bpl.n	8000f52 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8000f44:	200c      	movs	r0, #12
 8000f46:	493b      	ldr	r1, [pc, #236]	; (8001034 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8000f48:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000f4a:	4382      	bics	r2, r0
 8000f4c:	6928      	ldr	r0, [r5, #16]
 8000f4e:	4302      	orrs	r2, r0
 8000f50:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
  
  /*------------------------------ LPUART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8000f52:	075a      	lsls	r2, r3, #29
 8000f54:	d506      	bpl.n	8000f64 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
    
    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8000f56:	4937      	ldr	r1, [pc, #220]	; (8001034 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8000f58:	483a      	ldr	r0, [pc, #232]	; (8001044 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8000f5a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000f5c:	4002      	ands	r2, r0
 8000f5e:	6968      	ldr	r0, [r5, #20]
 8000f60:	4302      	orrs	r2, r0
 8000f62:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000f64:	071a      	lsls	r2, r3, #28
 8000f66:	d506      	bpl.n	8000f76 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000f68:	4932      	ldr	r1, [pc, #200]	; (8001034 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8000f6a:	4837      	ldr	r0, [pc, #220]	; (8001048 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8000f6c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000f6e:	4002      	ands	r2, r0
 8000f70:	69a8      	ldr	r0, [r5, #24]
 8000f72:	4302      	orrs	r2, r0
 8000f74:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8000f76:	05da      	lsls	r2, r3, #23
 8000f78:	d506      	bpl.n	8000f88 <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8000f7a:	492e      	ldr	r1, [pc, #184]	; (8001034 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8000f7c:	4833      	ldr	r0, [pc, #204]	; (800104c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8000f7e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000f80:	4002      	ands	r2, r0
 8000f82:	69e8      	ldr	r0, [r5, #28]
 8000f84:	4302      	orrs	r2, r0
 8000f86:	64ca      	str	r2, [r1, #76]	; 0x4c
  }  
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8000f88:	065a      	lsls	r2, r3, #25
 8000f8a:	d506      	bpl.n	8000f9a <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000f8c:	4929      	ldr	r1, [pc, #164]	; (8001034 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8000f8e:	4830      	ldr	r0, [pc, #192]	; (8001050 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8000f90:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000f92:	4002      	ands	r2, r0
 8000f94:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8000f96:	4302      	orrs	r2, r0
 8000f98:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8000f9a:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8000f9c:	061b      	lsls	r3, r3, #24
 8000f9e:	d518      	bpl.n	8000fd2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8000fa0:	4a24      	ldr	r2, [pc, #144]	; (8001034 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8000fa2:	492c      	ldr	r1, [pc, #176]	; (8001054 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8000fa4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8000fa6:	400b      	ands	r3, r1
 8000fa8:	6a29      	ldr	r1, [r5, #32]
 8000faa:	430b      	orrs	r3, r1
 8000fac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fae:	e010      	b.n	8000fd2 <HAL_RCCEx_PeriphCLKConfig+0x146>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fb0:	6833      	ldr	r3, [r6, #0]
 8000fb2:	433b      	orrs	r3, r7
 8000fb4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000fb6:	f7ff fa73 	bl	80004a0 <HAL_GetTick>
 8000fba:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fbc:	6833      	ldr	r3, [r6, #0]
 8000fbe:	423b      	tst	r3, r7
 8000fc0:	d000      	beq.n	8000fc4 <HAL_RCCEx_PeriphCLKConfig+0x138>
 8000fc2:	e77d      	b.n	8000ec0 <HAL_RCCEx_PeriphCLKConfig+0x34>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fc4:	f7ff fa6c 	bl	80004a0 <HAL_GetTick>
 8000fc8:	9b01      	ldr	r3, [sp, #4]
 8000fca:	1ac0      	subs	r0, r0, r3
 8000fcc:	2864      	cmp	r0, #100	; 0x64
 8000fce:	d9f5      	bls.n	8000fbc <HAL_RCCEx_PeriphCLKConfig+0x130>
          return HAL_TIMEOUT;
 8000fd0:	2003      	movs	r0, #3
}
 8000fd2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8000fd4:	4011      	ands	r1, r2
 8000fd6:	428b      	cmp	r3, r1
 8000fd8:	d002      	beq.n	8000fe0 <HAL_RCCEx_PeriphCLKConfig+0x154>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000fda:	6829      	ldr	r1, [r5, #0]
 8000fdc:	0689      	lsls	r1, r1, #26
 8000fde:	d408      	bmi.n	8000ff2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8000fe0:	68a9      	ldr	r1, [r5, #8]
 8000fe2:	400a      	ands	r2, r1
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d100      	bne.n	8000fea <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8000fe8:	e787      	b.n	8000efa <HAL_RCCEx_PeriphCLKConfig+0x6e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8000fea:	682b      	ldr	r3, [r5, #0]
 8000fec:	051b      	lsls	r3, r3, #20
 8000fee:	d400      	bmi.n	8000ff2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8000ff0:	e783      	b.n	8000efa <HAL_RCCEx_PeriphCLKConfig+0x6e>
      __HAL_RCC_BACKUPRESET_FORCE();
 8000ff2:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8000ff4:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8000ff6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8000ff8:	0312      	lsls	r2, r2, #12
 8000ffa:	4302      	orrs	r2, r0
 8000ffc:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000ffe:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001000:	4b12      	ldr	r3, [pc, #72]	; (800104c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001002:	4815      	ldr	r0, [pc, #84]	; (8001058 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001004:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001006:	4002      	ands	r2, r0
 8001008:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 800100a:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800100c:	05cb      	lsls	r3, r1, #23
 800100e:	d400      	bmi.n	8001012 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001010:	e773      	b.n	8000efa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        tickstart = HAL_GetTick();
 8001012:	f7ff fa45 	bl	80004a0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001016:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8001018:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800101a:	00bf      	lsls	r7, r7, #2
 800101c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800101e:	423b      	tst	r3, r7
 8001020:	d000      	beq.n	8001024 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8001022:	e76a      	b.n	8000efa <HAL_RCCEx_PeriphCLKConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001024:	f7ff fa3c 	bl	80004a0 <HAL_GetTick>
 8001028:	4b0c      	ldr	r3, [pc, #48]	; (800105c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800102a:	1b80      	subs	r0, r0, r6
 800102c:	4298      	cmp	r0, r3
 800102e:	d9f5      	bls.n	800101c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8001030:	e7ce      	b.n	8000fd0 <HAL_RCCEx_PeriphCLKConfig+0x144>
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	40021000 	.word	0x40021000
 8001038:	40007000 	.word	0x40007000
 800103c:	ffcfffff 	.word	0xffcfffff
 8001040:	efffffff 	.word	0xefffffff
 8001044:	fffff3ff 	.word	0xfffff3ff
 8001048:	ffffcfff 	.word	0xffffcfff
 800104c:	fffcffff 	.word	0xfffcffff
 8001050:	fbffffff 	.word	0xfbffffff
 8001054:	fff3ffff 	.word	0xfff3ffff
 8001058:	fff7ffff 	.word	0xfff7ffff
 800105c:	00001388 	.word	0x00001388

08001060 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_I2C3     I2C3 peripheral clock (*)
  * @note   (*) means that this peripheral is not present on all the devices
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001060:	b570      	push	{r4, r5, r6, lr}
#endif /* USB */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8001062:	2810      	cmp	r0, #16
 8001064:	d100      	bne.n	8001068 <HAL_RCCEx_GetPeriphCLKFreq+0x8>
 8001066:	e0cd      	b.n	8001204 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8001068:	d81e      	bhi.n	80010a8 <HAL_RCCEx_GetPeriphCLKFreq+0x48>
 800106a:	2802      	cmp	r0, #2
 800106c:	d100      	bne.n	8001070 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
 800106e:	e09e      	b.n	80011ae <HAL_RCCEx_GetPeriphCLKFreq+0x14e>
 8001070:	d804      	bhi.n	800107c <HAL_RCCEx_GetPeriphCLKFreq+0x1c>
 8001072:	2801      	cmp	r0, #1
 8001074:	d100      	bne.n	8001078 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
 8001076:	e081      	b.n	800117c <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
  uint32_t temp_reg = 0U, clkprediv = 0U, frequency = 0U;
 8001078:	2000      	movs	r0, #0
 800107a:	e03b      	b.n	80010f4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
  switch (PeriphClk)
 800107c:	2804      	cmp	r0, #4
 800107e:	d100      	bne.n	8001082 <HAL_RCCEx_GetPeriphCLKFreq+0x22>
 8001080:	e0a6      	b.n	80011d0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8001082:	2808      	cmp	r0, #8
 8001084:	d1f8      	bne.n	8001078 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
      break;
    }    
  case RCC_PERIPHCLK_I2C1:
    {
      /* Get the current I2C1 source */
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8001086:	21c0      	movs	r1, #192	; 0xc0
 8001088:	4a6a      	ldr	r2, [pc, #424]	; (8001234 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 800108a:	0189      	lsls	r1, r1, #6
 800108c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800108e:	400b      	ands	r3, r1

      /* Check if I2C1 clock selection is PCLK1 */
      if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8001090:	d100      	bne.n	8001094 <HAL_RCCEx_GetPeriphCLKFreq+0x34>
 8001092:	e091      	b.n	80011b8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      {
        frequency = HAL_RCC_GetPCLK1Freq();
      }
      /* Check if HSI is ready and if I2C1 clock selection is HSI */
      else if ((srcclk == RCC_I2C1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8001094:	2180      	movs	r1, #128	; 0x80
 8001096:	0189      	lsls	r1, r1, #6
 8001098:	428b      	cmp	r3, r1
 800109a:	d100      	bne.n	800109e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 800109c:	e078      	b.n	8001190 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      {
        frequency = HSI_VALUE;
      }
      /* Check if I2C1 clock selection is SYSCLK */
      else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800109e:	2280      	movs	r2, #128	; 0x80
 80010a0:	0152      	lsls	r2, r2, #5
      else if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
      {
        frequency = HSI_VALUE;
      }
      /* Check if I2C3 clock selection is SYSCLK */
      else if (srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d1e8      	bne.n	8001078 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
 80010a6:	e079      	b.n	800119c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  switch (PeriphClk)
 80010a8:	2840      	cmp	r0, #64	; 0x40
 80010aa:	d03f      	beq.n	800112c <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 80010ac:	d80f      	bhi.n	80010ce <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
 80010ae:	2820      	cmp	r0, #32
 80010b0:	d1e2      	bne.n	8001078 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80010b2:	25c0      	movs	r5, #192	; 0xc0
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSERDY)))
 80010b4:	2080      	movs	r0, #128	; 0x80
      temp_reg = RCC->CSR;
 80010b6:	495f      	ldr	r1, [pc, #380]	; (8001234 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80010b8:	02ad      	lsls	r5, r5, #10
      temp_reg = RCC->CSR;
 80010ba:	6d0b      	ldr	r3, [r1, #80]	; 0x50
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80010bc:	6d0a      	ldr	r2, [r1, #80]	; 0x50
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSERDY)))
 80010be:	0240      	lsls	r0, r0, #9
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80010c0:	402a      	ands	r2, r5
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSERDY)))
 80010c2:	4282      	cmp	r2, r0
 80010c4:	d10d      	bne.n	80010e2 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
 80010c6:	0598      	lsls	r0, r3, #22
        frequency = LSE_VALUE;
 80010c8:	0fc0      	lsrs	r0, r0, #31
 80010ca:	03c0      	lsls	r0, r0, #15
 80010cc:	e012      	b.n	80010f4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
  switch (PeriphClk)
 80010ce:	2380      	movs	r3, #128	; 0x80
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	4298      	cmp	r0, r3
 80010d4:	d100      	bne.n	80010d8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
 80010d6:	e09d      	b.n	8001214 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 80010d8:	2380      	movs	r3, #128	; 0x80
 80010da:	011b      	lsls	r3, r3, #4
 80010dc:	4298      	cmp	r0, r3
 80010de:	d0e8      	beq.n	80010b2 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 80010e0:	e7ca      	b.n	8001078 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
      else if ((srcclk == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSIRDY)))
 80010e2:	2480      	movs	r4, #128	; 0x80
 80010e4:	02a4      	lsls	r4, r4, #10
 80010e6:	42a2      	cmp	r2, r4
 80010e8:	d105      	bne.n	80010f6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
 80010ea:	2002      	movs	r0, #2
 80010ec:	4003      	ands	r3, r0
            frequency = 0U;
 80010ee:	1e18      	subs	r0, r3, #0
      else if ((srcclk == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSIRDY)))
 80010f0:	d000      	beq.n	80010f4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
        frequency = LSI_VALUE;
 80010f2:	4851      	ldr	r0, [pc, #324]	; (8001238 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
    {
      break;
    }
  }
  return(frequency);
}
 80010f4:	bd70      	pop	{r4, r5, r6, pc}
            frequency = 0U;
 80010f6:	2000      	movs	r0, #0
      else if ((srcclk == RCC_RTCCLKSOURCE_HSE_DIVX) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80010f8:	42aa      	cmp	r2, r5
 80010fa:	d1fb      	bne.n	80010f4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
 80010fc:	680b      	ldr	r3, [r1, #0]
 80010fe:	4223      	tst	r3, r4
 8001100:	d0f8      	beq.n	80010f4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
        clkprediv = __HAL_RCC_GET_RTC_HSE_PRESCALER();
 8001102:	22c0      	movs	r2, #192	; 0xc0
 8001104:	680b      	ldr	r3, [r1, #0]
        switch (clkprediv)
 8001106:	2180      	movs	r1, #128	; 0x80
        clkprediv = __HAL_RCC_GET_RTC_HSE_PRESCALER();
 8001108:	0392      	lsls	r2, r2, #14
 800110a:	4013      	ands	r3, r2
        switch (clkprediv)
 800110c:	0389      	lsls	r1, r1, #14
 800110e:	428b      	cmp	r3, r1
 8001110:	d008      	beq.n	8001124 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 8001112:	4293      	cmp	r3, r2
 8001114:	d100      	bne.n	8001118 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8001116:	e08a      	b.n	800122e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8001118:	2280      	movs	r2, #128	; 0x80
 800111a:	0352      	lsls	r2, r2, #13
 800111c:	4293      	cmp	r3, r2
 800111e:	d103      	bne.n	8001128 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
            frequency = HSE_VALUE / 4U;
 8001120:	4846      	ldr	r0, [pc, #280]	; (800123c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
            break;
 8001122:	e7e7      	b.n	80010f4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
            frequency = HSE_VALUE / 8U;
 8001124:	4846      	ldr	r0, [pc, #280]	; (8001240 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 8001126:	e7e5      	b.n	80010f4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
            frequency = HSE_VALUE / 2U;
 8001128:	4846      	ldr	r0, [pc, #280]	; (8001244 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>)
            break;
 800112a:	e7e3      	b.n	80010f4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800112c:	2080      	movs	r0, #128	; 0x80
 800112e:	4b41      	ldr	r3, [pc, #260]	; (8001234 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8001130:	04c0      	lsls	r0, r0, #19
 8001132:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001134:	4010      	ands	r0, r2
        if((srcclk == RCC_USBCLKSOURCE_PLL) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8001136:	d11a      	bne.n	800116e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	0192      	lsls	r2, r2, #6
 800113c:	d5da      	bpl.n	80010f4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
            pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 800113e:	68da      	ldr	r2, [r3, #12]
            pllmul = PLLMulTable[(pllmul >> RCC_CFGR_PLLMUL_Pos)];
 8001140:	4841      	ldr	r0, [pc, #260]	; (8001248 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>)
            plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 8001142:	68d9      	ldr	r1, [r3, #12]
            pllmul = PLLMulTable[(pllmul >> RCC_CFGR_PLLMUL_Pos)];
 8001144:	0292      	lsls	r2, r2, #10
 8001146:	0f12      	lsrs	r2, r2, #28
 8001148:	5c80      	ldrb	r0, [r0, r2]
            plldiv = (plldiv >> RCC_CFGR_PLLDIV_Pos) + 1U;   
 800114a:	0209      	lsls	r1, r1, #8
            if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)
 800114c:	68da      	ldr	r2, [r3, #12]
            plldiv = (plldiv >> RCC_CFGR_PLLDIV_Pos) + 1U;   
 800114e:	0f89      	lsrs	r1, r1, #30
 8001150:	3101      	adds	r1, #1
            if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)
 8001152:	03d2      	lsls	r2, r2, #15
 8001154:	d407      	bmi.n	8001166 <HAL_RCCEx_GetPeriphCLKFreq+0x106>
                if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	06db      	lsls	r3, r3, #27
 800115a:	d406      	bmi.n	800116a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
                    pllvco =  HSI_VALUE;
 800115c:	4b3b      	ldr	r3, [pc, #236]	; (800124c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>)
            pllvco = (pllvco * pllmul);
 800115e:	4358      	muls	r0, r3
            frequency = (pllvco/ plldiv);
 8001160:	f7fe ffdc 	bl	800011c <__udivsi3>
 8001164:	e7c6      	b.n	80010f4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
                pllvco = HSE_VALUE;
 8001166:	4b3a      	ldr	r3, [pc, #232]	; (8001250 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>)
 8001168:	e7f9      	b.n	800115e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
                    pllvco =  (HSI_VALUE >> 2U);
 800116a:	4b36      	ldr	r3, [pc, #216]	; (8001244 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>)
 800116c:	e7f7      	b.n	800115e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
        else if((srcclk == RCC_USBCLKSOURCE_HSI48) && (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)))
 800116e:	2202      	movs	r2, #2
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	4013      	ands	r3, r2
            frequency = 0U;
 8001174:	1e18      	subs	r0, r3, #0
        else if((srcclk == RCC_USBCLKSOURCE_HSI48) && (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)))
 8001176:	d0bd      	beq.n	80010f4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
            frequency = HSI48_VALUE;
 8001178:	4836      	ldr	r0, [pc, #216]	; (8001254 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>)
 800117a:	e7bb      	b.n	80010f4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800117c:	2103      	movs	r1, #3
 800117e:	4a2d      	ldr	r2, [pc, #180]	; (8001234 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8001180:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001182:	400b      	ands	r3, r1
      if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8001184:	d102      	bne.n	800118c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        frequency = HAL_RCC_GetPCLK2Freq();
 8001186:	f7ff fe71 	bl	8000e6c <HAL_RCC_GetPCLK2Freq>
 800118a:	e7b3      	b.n	80010f4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      else if ((srcclk == RCC_USART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 800118c:	2b02      	cmp	r3, #2
 800118e:	d103      	bne.n	8001198 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
      else if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8001190:	6813      	ldr	r3, [r2, #0]
 8001192:	2204      	movs	r2, #4
 8001194:	4013      	ands	r3, r2
 8001196:	e027      	b.n	80011e8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8001198:	2b01      	cmp	r3, #1
 800119a:	d102      	bne.n	80011a2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        frequency = HAL_RCC_GetSysClockFreq();
 800119c:	f7ff fd5c 	bl	8000c58 <HAL_RCC_GetSysClockFreq>
 80011a0:	e7a8      	b.n	80010f4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
            frequency = 0U;
 80011a2:	2000      	movs	r0, #0
      else if ((srcclk == RCC_USART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 80011a4:	2b03      	cmp	r3, #3
 80011a6:	d1a5      	bne.n	80010f4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
 80011a8:	6d10      	ldr	r0, [r2, #80]	; 0x50
 80011aa:	0580      	lsls	r0, r0, #22
 80011ac:	e78c      	b.n	80010c8 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80011ae:	210c      	movs	r1, #12
 80011b0:	4a20      	ldr	r2, [pc, #128]	; (8001234 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 80011b2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80011b4:	400b      	ands	r3, r1
      if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80011b6:	d102      	bne.n	80011be <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        frequency = HAL_RCC_GetPCLK1Freq();
 80011b8:	f7ff fe48 	bl	8000e4c <HAL_RCC_GetPCLK1Freq>
 80011bc:	e79a      	b.n	80010f4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      else if ((srcclk == RCC_USART2CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80011be:	2b08      	cmp	r3, #8
 80011c0:	d0e6      	beq.n	8001190 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80011c2:	2b04      	cmp	r3, #4
 80011c4:	d0ea      	beq.n	800119c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
            frequency = 0U;
 80011c6:	2000      	movs	r0, #0
      else if ((srcclk == RCC_USART2CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 80011c8:	2b0c      	cmp	r3, #12
 80011ca:	d000      	beq.n	80011ce <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
 80011cc:	e792      	b.n	80010f4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
 80011ce:	e7eb      	b.n	80011a8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80011d0:	21c0      	movs	r1, #192	; 0xc0
 80011d2:	4a18      	ldr	r2, [pc, #96]	; (8001234 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 80011d4:	0109      	lsls	r1, r1, #4
 80011d6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80011d8:	400b      	ands	r3, r1
      if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 80011da:	d0ed      	beq.n	80011b8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      else if ((srcclk == RCC_LPUART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80011dc:	2480      	movs	r4, #128	; 0x80
 80011de:	0124      	lsls	r4, r4, #4
 80011e0:	42a3      	cmp	r3, r4
 80011e2:	d106      	bne.n	80011f2 <HAL_RCCEx_GetPeriphCLKFreq+0x192>
 80011e4:	6813      	ldr	r3, [r2, #0]
 80011e6:	4003      	ands	r3, r0
            frequency = 0U;
 80011e8:	1e18      	subs	r0, r3, #0
      else if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80011ea:	d100      	bne.n	80011ee <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
 80011ec:	e782      	b.n	80010f4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
        frequency = HSI_VALUE;
 80011ee:	4817      	ldr	r0, [pc, #92]	; (800124c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>)
 80011f0:	e780      	b.n	80010f4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80011f2:	2080      	movs	r0, #128	; 0x80
 80011f4:	00c0      	lsls	r0, r0, #3
 80011f6:	4283      	cmp	r3, r0
 80011f8:	d0d0      	beq.n	800119c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
            frequency = 0U;
 80011fa:	2000      	movs	r0, #0
      else if ((srcclk == RCC_LPUART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 80011fc:	428b      	cmp	r3, r1
 80011fe:	d000      	beq.n	8001202 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8001200:	e778      	b.n	80010f4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
 8001202:	e7d1      	b.n	80011a8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      if (READ_BIT(RCC->APB1ENR, (RCC_APB1ENR_I2C2EN))==RCC_APB1ENR_I2C2EN)
 8001204:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8001206:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001208:	2380      	movs	r3, #128	; 0x80
 800120a:	03db      	lsls	r3, r3, #15
 800120c:	4018      	ands	r0, r3
 800120e:	d100      	bne.n	8001212 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
 8001210:	e770      	b.n	80010f4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
 8001212:	e7d1      	b.n	80011b8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8001214:	21c0      	movs	r1, #192	; 0xc0
 8001216:	4a07      	ldr	r2, [pc, #28]	; (8001234 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8001218:	0289      	lsls	r1, r1, #10
 800121a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800121c:	400b      	ands	r3, r1
      if (srcclk == RCC_I2C3CLKSOURCE_PCLK1)
 800121e:	d0cb      	beq.n	80011b8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      else if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8001220:	2180      	movs	r1, #128	; 0x80
 8001222:	0289      	lsls	r1, r1, #10
 8001224:	428b      	cmp	r3, r1
 8001226:	d0b3      	beq.n	8001190 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      else if (srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 8001228:	2280      	movs	r2, #128	; 0x80
 800122a:	0252      	lsls	r2, r2, #9
 800122c:	e739      	b.n	80010a2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
            frequency = HSE_VALUE / 16U;
 800122e:	480a      	ldr	r0, [pc, #40]	; (8001258 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>)
 8001230:	e760      	b.n	80010f4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
 8001232:	46c0      	nop			; (mov r8, r8)
 8001234:	40021000 	.word	0x40021000
 8001238:	00009088 	.word	0x00009088
 800123c:	001e8480 	.word	0x001e8480
 8001240:	000f4240 	.word	0x000f4240
 8001244:	003d0900 	.word	0x003d0900
 8001248:	08002c71 	.word	0x08002c71
 800124c:	00f42400 	.word	0x00f42400
 8001250:	007a1200 	.word	0x007a1200
 8001254:	02dc6c00 	.word	0x02dc6c00
 8001258:	0007a120 	.word	0x0007a120

0800125c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800125c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800125e:	0005      	movs	r5, r0
  HAL_StatusTypeDef ret               = HAL_OK;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if(UART_INSTANCE_LOWPOWER(huart))
 8001260:	6803      	ldr	r3, [r0, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001262:	6882      	ldr	r2, [r0, #8]
 8001264:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001266:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001268:	4302      	orrs	r2, r0
 800126a:	6968      	ldr	r0, [r5, #20]
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800126c:	4e82      	ldr	r6, [pc, #520]	; (8001478 <UART_SetConfig+0x21c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800126e:	4302      	orrs	r2, r0
 8001270:	69e8      	ldr	r0, [r5, #28]
 8001272:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001274:	4881      	ldr	r0, [pc, #516]	; (800147c <UART_SetConfig+0x220>)
 8001276:	4001      	ands	r1, r0
 8001278:	430a      	orrs	r2, r1
 800127a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800127c:	685a      	ldr	r2, [r3, #4]
 800127e:	4980      	ldr	r1, [pc, #512]	; (8001480 <UART_SetConfig+0x224>)
 8001280:	400a      	ands	r2, r1
 8001282:	68e9      	ldr	r1, [r5, #12]
 8001284:	430a      	orrs	r2, r1
 8001286:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001288:	69a9      	ldr	r1, [r5, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800128a:	42b3      	cmp	r3, r6
 800128c:	d001      	beq.n	8001292 <UART_SetConfig+0x36>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800128e:	6a2a      	ldr	r2, [r5, #32]
 8001290:	4311      	orrs	r1, r2
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001292:	689a      	ldr	r2, [r3, #8]
 8001294:	487b      	ldr	r0, [pc, #492]	; (8001484 <UART_SetConfig+0x228>)
 8001296:	4002      	ands	r2, r0
 8001298:	430a      	orrs	r2, r1
 800129a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800129c:	4a7a      	ldr	r2, [pc, #488]	; (8001488 <UART_SetConfig+0x22c>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d117      	bne.n	80012d2 <UART_SetConfig+0x76>
 80012a2:	2203      	movs	r2, #3
 80012a4:	4b79      	ldr	r3, [pc, #484]	; (800148c <UART_SetConfig+0x230>)
 80012a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a8:	4013      	ands	r3, r2
 80012aa:	4a79      	ldr	r2, [pc, #484]	; (8001490 <UART_SetConfig+0x234>)
 80012ac:	5cd4      	ldrb	r4, [r2, r3]
  uint32_t frequency = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_USART2);
 80012ae:	2002      	movs	r0, #2
 80012b0:	f7ff fed6 	bl	8001060 <HAL_RCCEx_GetPeriphCLKFreq>

  /* Check LPUART instance */
  if(UART_INSTANCE_LOWPOWER(huart))
 80012b4:	682f      	ldr	r7, [r5, #0]
  uint32_t frequency = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_USART2);
 80012b6:	0003      	movs	r3, r0
  if(UART_INSTANCE_LOWPOWER(huart))
 80012b8:	42b7      	cmp	r7, r6
 80012ba:	d166      	bne.n	800138a <UART_SetConfig+0x12e>
  {
    /* Retrieve frequency clock */
    tmpreg = 0;

    switch (clocksource)
 80012bc:	2c08      	cmp	r4, #8
 80012be:	d900      	bls.n	80012c2 <UART_SetConfig+0x66>
 80012c0:	e0d7      	b.n	8001472 <UART_SetConfig+0x216>
 80012c2:	0020      	movs	r0, r4
 80012c4:	f7fe ff20 	bl	8000108 <__gnu_thumb1_case_uqi>
 80012c8:	d539d531 	.word	0xd539d531
 80012cc:	d5d5d559 	.word	0xd5d5d559
 80012d0:	5c          	.byte	0x5c
 80012d1:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80012d2:	4a70      	ldr	r2, [pc, #448]	; (8001494 <UART_SetConfig+0x238>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d105      	bne.n	80012e4 <UART_SetConfig+0x88>
 80012d8:	220c      	movs	r2, #12
 80012da:	4b6c      	ldr	r3, [pc, #432]	; (800148c <UART_SetConfig+0x230>)
 80012dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012de:	4013      	ands	r3, r2
 80012e0:	4a6d      	ldr	r2, [pc, #436]	; (8001498 <UART_SetConfig+0x23c>)
 80012e2:	e7e3      	b.n	80012ac <UART_SetConfig+0x50>
 80012e4:	4a6d      	ldr	r2, [pc, #436]	; (800149c <UART_SetConfig+0x240>)
 80012e6:	2400      	movs	r4, #0
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d0e0      	beq.n	80012ae <UART_SetConfig+0x52>
 80012ec:	4a6c      	ldr	r2, [pc, #432]	; (80014a0 <UART_SetConfig+0x244>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d0dd      	beq.n	80012ae <UART_SetConfig+0x52>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80012f2:	3410      	adds	r4, #16
  UART_GETCLOCKSOURCE(huart, clocksource);
 80012f4:	42b3      	cmp	r3, r6
 80012f6:	d1da      	bne.n	80012ae <UART_SetConfig+0x52>
 80012f8:	22c0      	movs	r2, #192	; 0xc0
 80012fa:	2180      	movs	r1, #128	; 0x80
 80012fc:	4b63      	ldr	r3, [pc, #396]	; (800148c <UART_SetConfig+0x230>)
 80012fe:	0112      	lsls	r2, r2, #4
 8001300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001302:	00c9      	lsls	r1, r1, #3
 8001304:	4013      	ands	r3, r2
 8001306:	3c0c      	subs	r4, #12
 8001308:	428b      	cmp	r3, r1
 800130a:	d0d0      	beq.n	80012ae <UART_SetConfig+0x52>
 800130c:	d804      	bhi.n	8001318 <UART_SetConfig+0xbc>
 800130e:	2400      	movs	r4, #0
 8001310:	42a3      	cmp	r3, r4
 8001312:	d0cc      	beq.n	80012ae <UART_SetConfig+0x52>
 8001314:	2410      	movs	r4, #16
 8001316:	e7ca      	b.n	80012ae <UART_SetConfig+0x52>
 8001318:	2180      	movs	r1, #128	; 0x80
 800131a:	2402      	movs	r4, #2
 800131c:	0109      	lsls	r1, r1, #4
 800131e:	428b      	cmp	r3, r1
 8001320:	d0c5      	beq.n	80012ae <UART_SetConfig+0x52>
 8001322:	3406      	adds	r4, #6
 8001324:	4293      	cmp	r3, r2
 8001326:	d0c2      	beq.n	80012ae <UART_SetConfig+0x52>
 8001328:	e7f4      	b.n	8001314 <UART_SetConfig+0xb8>
    {
    case UART_CLOCKSOURCE_PCLK1:
      tmpreg = HAL_RCC_GetPCLK1Freq();
 800132a:	f7ff fd8f 	bl	8000e4c <HAL_RCC_GetPCLK1Freq>
 800132e:	2400      	movs	r4, #0
      {
        tmpreg = (uint32_t) HSI_VALUE;
      }
      break;
    case UART_CLOCKSOURCE_SYSCLK:
      tmpreg = HAL_RCC_GetSysClockFreq();
 8001330:	0003      	movs	r3, r0
        ret = HAL_ERROR;
      break;
    }

    /* if proper clock source reported */
    if (tmpreg != 0)
 8001332:	42a0      	cmp	r0, r4
 8001334:	d106      	bne.n	8001344 <UART_SetConfig+0xe8>
    }
  }

  return ret;

}
 8001336:	0020      	movs	r0, r4
 8001338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800133a:	4b54      	ldr	r3, [pc, #336]	; (800148c <UART_SetConfig+0x230>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	06db      	lsls	r3, r3, #27
 8001340:	d421      	bmi.n	8001386 <UART_SetConfig+0x12a>
        tmpreg = (uint32_t) HSI_VALUE;
 8001342:	4b58      	ldr	r3, [pc, #352]	; (80014a4 <UART_SetConfig+0x248>)
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8001344:	2103      	movs	r1, #3
 8001346:	686a      	ldr	r2, [r5, #4]
        ret = HAL_ERROR;
 8001348:	2401      	movs	r4, #1
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 800134a:	4351      	muls	r1, r2
 800134c:	4299      	cmp	r1, r3
 800134e:	d8f2      	bhi.n	8001336 <UART_SetConfig+0xda>
           (tmpreg > (4096 * huart->Init.BaudRate) ))
 8001350:	0311      	lsls	r1, r2, #12
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8001352:	4299      	cmp	r1, r3
 8001354:	d3ef      	bcc.n	8001336 <UART_SetConfig+0xda>
        tmpreg = (uint32_t)(UART_DIV_LPUART(tmpreg, huart->Init.BaudRate));
 8001356:	2700      	movs	r7, #0
 8001358:	0856      	lsrs	r6, r2, #1
 800135a:	0e19      	lsrs	r1, r3, #24
 800135c:	0218      	lsls	r0, r3, #8
 800135e:	1980      	adds	r0, r0, r6
 8001360:	4179      	adcs	r1, r7
 8001362:	003b      	movs	r3, r7
 8001364:	f7fe ff66 	bl	8000234 <__aeabi_uldivmod>
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 8001368:	4b4f      	ldr	r3, [pc, #316]	; (80014a8 <UART_SetConfig+0x24c>)
 800136a:	18c2      	adds	r2, r0, r3
 800136c:	4b4f      	ldr	r3, [pc, #316]	; (80014ac <UART_SetConfig+0x250>)
 800136e:	429a      	cmp	r2, r3
 8001370:	d8e1      	bhi.n	8001336 <UART_SetConfig+0xda>
           huart->Instance->BRR = tmpreg;
 8001372:	682b      	ldr	r3, [r5, #0]
 8001374:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001376:	2400      	movs	r4, #0
      break;
 8001378:	e7dd      	b.n	8001336 <UART_SetConfig+0xda>
      tmpreg = HAL_RCC_GetSysClockFreq();
 800137a:	f7ff fc6d 	bl	8000c58 <HAL_RCC_GetSysClockFreq>
 800137e:	e7d6      	b.n	800132e <UART_SetConfig+0xd2>
      tmpreg = (uint32_t) LSE_VALUE;
 8001380:	2380      	movs	r3, #128	; 0x80
 8001382:	021b      	lsls	r3, r3, #8
 8001384:	e7de      	b.n	8001344 <UART_SetConfig+0xe8>
        tmpreg = (uint32_t) (HSI_VALUE >> 2U);
 8001386:	4b4a      	ldr	r3, [pc, #296]	; (80014b0 <UART_SetConfig+0x254>)
 8001388:	e7dc      	b.n	8001344 <UART_SetConfig+0xe8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800138a:	2280      	movs	r2, #128	; 0x80
 800138c:	69e9      	ldr	r1, [r5, #28]
 800138e:	0212      	lsls	r2, r2, #8
 8001390:	4291      	cmp	r1, r2
 8001392:	d13f      	bne.n	8001414 <UART_SetConfig+0x1b8>
    switch (clocksource)
 8001394:	2c08      	cmp	r4, #8
 8001396:	d83a      	bhi.n	800140e <UART_SetConfig+0x1b2>
 8001398:	0020      	movs	r0, r4
 800139a:	f7fe feb5 	bl	8000108 <__gnu_thumb1_case_uqi>
 800139e:	0f05      	.short	0x0f05
 80013a0:	38303817 	.word	0x38303817
 80013a4:	3838      	.short	0x3838
 80013a6:	33          	.byte	0x33
 80013a7:	00          	.byte	0x00
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(frequency, huart->Init.BaudRate));
 80013a8:	686a      	ldr	r2, [r5, #4]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	0011      	movs	r1, r2
 80013ae:	0850      	lsrs	r0, r2, #1
 80013b0:	1818      	adds	r0, r3, r0
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80013b2:	f7fe feb3 	bl	800011c <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 80013b6:	2400      	movs	r4, #0
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80013b8:	b280      	uxth	r0, r0
      break;
 80013ba:	e016      	b.n	80013ea <UART_SetConfig+0x18e>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80013bc:	f7ff fd56 	bl	8000e6c <HAL_RCC_GetPCLK2Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80013c0:	686b      	ldr	r3, [r5, #4]
 80013c2:	0040      	lsls	r0, r0, #1
 80013c4:	085b      	lsrs	r3, r3, #1
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80013c6:	18c0      	adds	r0, r0, r3
 80013c8:	6869      	ldr	r1, [r5, #4]
 80013ca:	e7f2      	b.n	80013b2 <UART_SetConfig+0x156>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80013cc:	4b2f      	ldr	r3, [pc, #188]	; (800148c <UART_SetConfig+0x230>)
 80013ce:	6869      	ldr	r1, [r5, #4]
 80013d0:	681c      	ldr	r4, [r3, #0]
 80013d2:	2310      	movs	r3, #16
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80013d4:	0848      	lsrs	r0, r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80013d6:	401c      	ands	r4, r3
 80013d8:	d002      	beq.n	80013e0 <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80013da:	4b36      	ldr	r3, [pc, #216]	; (80014b4 <UART_SetConfig+0x258>)
 80013dc:	18c0      	adds	r0, r0, r3
 80013de:	e7e8      	b.n	80013b2 <UART_SetConfig+0x156>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate)); 
 80013e0:	4b35      	ldr	r3, [pc, #212]	; (80014b8 <UART_SetConfig+0x25c>)
 80013e2:	18c0      	adds	r0, r0, r3
 80013e4:	f7fe fe9a 	bl	800011c <__udivsi3>
 80013e8:	b280      	uxth	r0, r0
    brrtemp = usartdiv & 0xFFF0U;
 80013ea:	230f      	movs	r3, #15
 80013ec:	0002      	movs	r2, r0
 80013ee:	439a      	bics	r2, r3
 80013f0:	0013      	movs	r3, r2
    brrtemp |= (uint16_t)((uint16_t)(usartdiv & (uint16_t)0x000FU) >> (uint16_t)1U);
 80013f2:	0700      	lsls	r0, r0, #28
    huart->Instance->BRR = brrtemp;
 80013f4:	682a      	ldr	r2, [r5, #0]
    brrtemp |= (uint16_t)((uint16_t)(usartdiv & (uint16_t)0x000FU) >> (uint16_t)1U);
 80013f6:	0f40      	lsrs	r0, r0, #29
    huart->Instance->BRR = brrtemp;
 80013f8:	4318      	orrs	r0, r3
 80013fa:	60d0      	str	r0, [r2, #12]
 80013fc:	e79b      	b.n	8001336 <UART_SetConfig+0xda>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80013fe:	f7ff fc2b 	bl	8000c58 <HAL_RCC_GetSysClockFreq>
 8001402:	e7dd      	b.n	80013c0 <UART_SetConfig+0x164>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001404:	686b      	ldr	r3, [r5, #4]
 8001406:	0858      	lsrs	r0, r3, #1
 8001408:	2380      	movs	r3, #128	; 0x80
 800140a:	025b      	lsls	r3, r3, #9
 800140c:	e7db      	b.n	80013c6 <UART_SetConfig+0x16a>
        ret = HAL_ERROR;
 800140e:	2401      	movs	r4, #1
  uint16_t usartdiv                   = 0x0000U;
 8001410:	2000      	movs	r0, #0
 8001412:	e7ea      	b.n	80013ea <UART_SetConfig+0x18e>
    switch (clocksource)
 8001414:	2c08      	cmp	r4, #8
 8001416:	d82c      	bhi.n	8001472 <UART_SetConfig+0x216>
 8001418:	0020      	movs	r0, r4
 800141a:	f7fe fe75 	bl	8000108 <__gnu_thumb1_case_uqi>
 800141e:	0f05      	.short	0x0f05
 8001420:	2a222a12 	.word	0x2a222a12
 8001424:	2a2a      	.short	0x2a2a
 8001426:	25          	.byte	0x25
 8001427:	00          	.byte	0x00
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001428:	f7ff fd10 	bl	8000e4c <HAL_RCC_GetPCLK1Freq>
 800142c:	6869      	ldr	r1, [r5, #4]
 800142e:	084b      	lsrs	r3, r1, #1
 8001430:	1818      	adds	r0, r3, r0
 8001432:	f7fe fe73 	bl	800011c <__udivsi3>
 8001436:	b280      	uxth	r0, r0
 8001438:	60f8      	str	r0, [r7, #12]
 800143a:	e79c      	b.n	8001376 <UART_SetConfig+0x11a>
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800143c:	f7ff fd16 	bl	8000e6c <HAL_RCC_GetPCLK2Freq>
 8001440:	e7f4      	b.n	800142c <UART_SetConfig+0x1d0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001442:	4b12      	ldr	r3, [pc, #72]	; (800148c <UART_SetConfig+0x230>)
 8001444:	6869      	ldr	r1, [r5, #4]
 8001446:	681c      	ldr	r4, [r3, #0]
 8001448:	2310      	movs	r3, #16
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800144a:	0848      	lsrs	r0, r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800144c:	401c      	ands	r4, r3
 800144e:	d001      	beq.n	8001454 <UART_SetConfig+0x1f8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8001450:	4b17      	ldr	r3, [pc, #92]	; (80014b0 <UART_SetConfig+0x254>)
 8001452:	e7ed      	b.n	8001430 <UART_SetConfig+0x1d4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001454:	4b13      	ldr	r3, [pc, #76]	; (80014a4 <UART_SetConfig+0x248>)
 8001456:	18c0      	adds	r0, r0, r3
 8001458:	f7fe fe60 	bl	800011c <__udivsi3>
 800145c:	b280      	uxth	r0, r0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	e769      	b.n	8001336 <UART_SetConfig+0xda>
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001462:	f7ff fbf9 	bl	8000c58 <HAL_RCC_GetSysClockFreq>
 8001466:	e7e1      	b.n	800142c <UART_SetConfig+0x1d0>
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001468:	2380      	movs	r3, #128	; 0x80
 800146a:	6869      	ldr	r1, [r5, #4]
 800146c:	021b      	lsls	r3, r3, #8
 800146e:	0848      	lsrs	r0, r1, #1
 8001470:	e7de      	b.n	8001430 <UART_SetConfig+0x1d4>
        ret = HAL_ERROR;
 8001472:	2401      	movs	r4, #1
 8001474:	e75f      	b.n	8001336 <UART_SetConfig+0xda>
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	40004800 	.word	0x40004800
 800147c:	efff69f3 	.word	0xefff69f3
 8001480:	ffffcfff 	.word	0xffffcfff
 8001484:	fffff4ff 	.word	0xfffff4ff
 8001488:	40013800 	.word	0x40013800
 800148c:	40021000 	.word	0x40021000
 8001490:	08002bd4 	.word	0x08002bd4
 8001494:	40004400 	.word	0x40004400
 8001498:	08002bd8 	.word	0x08002bd8
 800149c:	40004c00 	.word	0x40004c00
 80014a0:	40005000 	.word	0x40005000
 80014a4:	00f42400 	.word	0x00f42400
 80014a8:	fffffd00 	.word	0xfffffd00
 80014ac:	000ffcff 	.word	0x000ffcff
 80014b0:	003d0900 	.word	0x003d0900
 80014b4:	007a1200 	.word	0x007a1200
 80014b8:	01e84800 	.word	0x01e84800

080014bc <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80014bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80014be:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80014c0:	07da      	lsls	r2, r3, #31
 80014c2:	d506      	bpl.n	80014d2 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80014c4:	6801      	ldr	r1, [r0, #0]
 80014c6:	4c28      	ldr	r4, [pc, #160]	; (8001568 <UART_AdvFeatureConfig+0xac>)
 80014c8:	684a      	ldr	r2, [r1, #4]
 80014ca:	4022      	ands	r2, r4
 80014cc:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80014ce:	4322      	orrs	r2, r4
 80014d0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80014d2:	079a      	lsls	r2, r3, #30
 80014d4:	d506      	bpl.n	80014e4 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80014d6:	6801      	ldr	r1, [r0, #0]
 80014d8:	4c24      	ldr	r4, [pc, #144]	; (800156c <UART_AdvFeatureConfig+0xb0>)
 80014da:	684a      	ldr	r2, [r1, #4]
 80014dc:	4022      	ands	r2, r4
 80014de:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80014e0:	4322      	orrs	r2, r4
 80014e2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80014e4:	075a      	lsls	r2, r3, #29
 80014e6:	d506      	bpl.n	80014f6 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80014e8:	6801      	ldr	r1, [r0, #0]
 80014ea:	4c21      	ldr	r4, [pc, #132]	; (8001570 <UART_AdvFeatureConfig+0xb4>)
 80014ec:	684a      	ldr	r2, [r1, #4]
 80014ee:	4022      	ands	r2, r4
 80014f0:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80014f2:	4322      	orrs	r2, r4
 80014f4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80014f6:	071a      	lsls	r2, r3, #28
 80014f8:	d506      	bpl.n	8001508 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80014fa:	6801      	ldr	r1, [r0, #0]
 80014fc:	4c1d      	ldr	r4, [pc, #116]	; (8001574 <UART_AdvFeatureConfig+0xb8>)
 80014fe:	684a      	ldr	r2, [r1, #4]
 8001500:	4022      	ands	r2, r4
 8001502:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001504:	4322      	orrs	r2, r4
 8001506:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001508:	06da      	lsls	r2, r3, #27
 800150a:	d506      	bpl.n	800151a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800150c:	6801      	ldr	r1, [r0, #0]
 800150e:	4c1a      	ldr	r4, [pc, #104]	; (8001578 <UART_AdvFeatureConfig+0xbc>)
 8001510:	688a      	ldr	r2, [r1, #8]
 8001512:	4022      	ands	r2, r4
 8001514:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001516:	4322      	orrs	r2, r4
 8001518:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800151a:	069a      	lsls	r2, r3, #26
 800151c:	d506      	bpl.n	800152c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800151e:	6801      	ldr	r1, [r0, #0]
 8001520:	4c16      	ldr	r4, [pc, #88]	; (800157c <UART_AdvFeatureConfig+0xc0>)
 8001522:	688a      	ldr	r2, [r1, #8]
 8001524:	4022      	ands	r2, r4
 8001526:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001528:	4322      	orrs	r2, r4
 800152a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800152c:	065a      	lsls	r2, r3, #25
 800152e:	d510      	bpl.n	8001552 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001530:	6801      	ldr	r1, [r0, #0]
 8001532:	4d13      	ldr	r5, [pc, #76]	; (8001580 <UART_AdvFeatureConfig+0xc4>)
 8001534:	684a      	ldr	r2, [r1, #4]
 8001536:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001538:	402a      	ands	r2, r5
 800153a:	4322      	orrs	r2, r4
 800153c:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800153e:	2280      	movs	r2, #128	; 0x80
 8001540:	0352      	lsls	r2, r2, #13
 8001542:	4294      	cmp	r4, r2
 8001544:	d105      	bne.n	8001552 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001546:	684a      	ldr	r2, [r1, #4]
 8001548:	4c0e      	ldr	r4, [pc, #56]	; (8001584 <UART_AdvFeatureConfig+0xc8>)
 800154a:	4022      	ands	r2, r4
 800154c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800154e:	4322      	orrs	r2, r4
 8001550:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001552:	061b      	lsls	r3, r3, #24
 8001554:	d506      	bpl.n	8001564 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001556:	6802      	ldr	r2, [r0, #0]
 8001558:	490b      	ldr	r1, [pc, #44]	; (8001588 <UART_AdvFeatureConfig+0xcc>)
 800155a:	6853      	ldr	r3, [r2, #4]
 800155c:	400b      	ands	r3, r1
 800155e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001560:	430b      	orrs	r3, r1
 8001562:	6053      	str	r3, [r2, #4]
  }
}
 8001564:	bd30      	pop	{r4, r5, pc}
 8001566:	46c0      	nop			; (mov r8, r8)
 8001568:	fffdffff 	.word	0xfffdffff
 800156c:	fffeffff 	.word	0xfffeffff
 8001570:	fffbffff 	.word	0xfffbffff
 8001574:	ffff7fff 	.word	0xffff7fff
 8001578:	ffffefff 	.word	0xffffefff
 800157c:	ffffdfff 	.word	0xffffdfff
 8001580:	ffefffff 	.word	0xffefffff
 8001584:	ff9fffff 	.word	0xff9fffff
 8001588:	fff7ffff 	.word	0xfff7ffff

0800158c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800158c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800158e:	0004      	movs	r4, r0
 8001590:	000e      	movs	r6, r1
 8001592:	0015      	movs	r5, r2
 8001594:	001f      	movs	r7, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001596:	6822      	ldr	r2, [r4, #0]
 8001598:	69d3      	ldr	r3, [r2, #28]
 800159a:	4033      	ands	r3, r6
 800159c:	1b9b      	subs	r3, r3, r6
 800159e:	4259      	negs	r1, r3
 80015a0:	414b      	adcs	r3, r1
 80015a2:	42ab      	cmp	r3, r5
 80015a4:	d001      	beq.n	80015aa <UART_WaitOnFlagUntilTimeout+0x1e>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80015a6:	2000      	movs	r0, #0
 80015a8:	e018      	b.n	80015dc <UART_WaitOnFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 80015aa:	9b06      	ldr	r3, [sp, #24]
 80015ac:	3301      	adds	r3, #1
 80015ae:	d0f3      	beq.n	8001598 <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 80015b0:	9b06      	ldr	r3, [sp, #24]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d113      	bne.n	80015de <UART_WaitOnFlagUntilTimeout+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80015b6:	6823      	ldr	r3, [r4, #0]
 80015b8:	490c      	ldr	r1, [pc, #48]	; (80015ec <UART_WaitOnFlagUntilTimeout+0x60>)
 80015ba:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 80015bc:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80015be:	400a      	ands	r2, r1
 80015c0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80015c2:	689a      	ldr	r2, [r3, #8]
 80015c4:	31a3      	adds	r1, #163	; 0xa3
 80015c6:	31ff      	adds	r1, #255	; 0xff
 80015c8:	438a      	bics	r2, r1
 80015ca:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 80015cc:	0022      	movs	r2, r4
 80015ce:	2320      	movs	r3, #32
 80015d0:	3269      	adds	r2, #105	; 0x69
 80015d2:	7013      	strb	r3, [r2, #0]
        huart->RxState = HAL_UART_STATE_READY;
 80015d4:	7053      	strb	r3, [r2, #1]
        __HAL_UNLOCK(huart);
 80015d6:	2300      	movs	r3, #0
 80015d8:	3468      	adds	r4, #104	; 0x68
 80015da:	7023      	strb	r3, [r4, #0]
}
 80015dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 80015de:	f7fe ff5f 	bl	80004a0 <HAL_GetTick>
 80015e2:	9b06      	ldr	r3, [sp, #24]
 80015e4:	1bc0      	subs	r0, r0, r7
 80015e6:	4283      	cmp	r3, r0
 80015e8:	d2d5      	bcs.n	8001596 <UART_WaitOnFlagUntilTimeout+0xa>
 80015ea:	e7e4      	b.n	80015b6 <UART_WaitOnFlagUntilTimeout+0x2a>
 80015ec:	fffffe5f 	.word	0xfffffe5f

080015f0 <HAL_UART_Transmit>:
{
 80015f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 80015f2:	0007      	movs	r7, r0
{
 80015f4:	b085      	sub	sp, #20
 80015f6:	9303      	str	r3, [sp, #12]
  if(huart->gState == HAL_UART_STATE_READY)
 80015f8:	3769      	adds	r7, #105	; 0x69
 80015fa:	783b      	ldrb	r3, [r7, #0]
{
 80015fc:	0004      	movs	r4, r0
 80015fe:	000d      	movs	r5, r1
 8001600:	0016      	movs	r6, r2
    return HAL_BUSY;
 8001602:	2002      	movs	r0, #2
  if(huart->gState == HAL_UART_STATE_READY)
 8001604:	2b20      	cmp	r3, #32
 8001606:	d146      	bne.n	8001696 <HAL_UART_Transmit+0xa6>
      return  HAL_ERROR;
 8001608:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 800160a:	2900      	cmp	r1, #0
 800160c:	d043      	beq.n	8001696 <HAL_UART_Transmit+0xa6>
 800160e:	2a00      	cmp	r2, #0
 8001610:	d041      	beq.n	8001696 <HAL_UART_Transmit+0xa6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001612:	2380      	movs	r3, #128	; 0x80
 8001614:	68a2      	ldr	r2, [r4, #8]
 8001616:	015b      	lsls	r3, r3, #5
 8001618:	429a      	cmp	r2, r3
 800161a:	d104      	bne.n	8001626 <HAL_UART_Transmit+0x36>
 800161c:	6923      	ldr	r3, [r4, #16]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d101      	bne.n	8001626 <HAL_UART_Transmit+0x36>
      if((((uint32_t)pData)&1) != 0)
 8001622:	4201      	tst	r1, r0
 8001624:	d137      	bne.n	8001696 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 8001626:	0023      	movs	r3, r4
 8001628:	3368      	adds	r3, #104	; 0x68
 800162a:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 800162c:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 800162e:	2a01      	cmp	r2, #1
 8001630:	d031      	beq.n	8001696 <HAL_UART_Transmit+0xa6>
 8001632:	2201      	movs	r2, #1
 8001634:	701a      	strb	r2, [r3, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001636:	2300      	movs	r3, #0
 8001638:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800163a:	3321      	adds	r3, #33	; 0x21
 800163c:	703b      	strb	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800163e:	f7fe ff2f 	bl	80004a0 <HAL_GetTick>
    huart->TxXferSize = Size;
 8001642:	0023      	movs	r3, r4
 8001644:	3350      	adds	r3, #80	; 0x50
 8001646:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 8001648:	805e      	strh	r6, [r3, #2]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800164a:	2680      	movs	r6, #128	; 0x80
    tickstart = HAL_GetTick();
 800164c:	9002      	str	r0, [sp, #8]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800164e:	0176      	lsls	r6, r6, #5
    while(huart->TxXferCount > 0U)
 8001650:	0021      	movs	r1, r4
 8001652:	3152      	adds	r1, #82	; 0x52
 8001654:	880a      	ldrh	r2, [r1, #0]
 8001656:	b292      	uxth	r2, r2
 8001658:	2a00      	cmp	r2, #0
 800165a:	d10d      	bne.n	8001678 <HAL_UART_Transmit+0x88>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800165c:	9b03      	ldr	r3, [sp, #12]
 800165e:	2140      	movs	r1, #64	; 0x40
 8001660:	9300      	str	r3, [sp, #0]
 8001662:	0020      	movs	r0, r4
 8001664:	9b02      	ldr	r3, [sp, #8]
 8001666:	f7ff ff91 	bl	800158c <UART_WaitOnFlagUntilTimeout>
 800166a:	2800      	cmp	r0, #0
 800166c:	d112      	bne.n	8001694 <HAL_UART_Transmit+0xa4>
    huart->gState = HAL_UART_STATE_READY;
 800166e:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001670:	3468      	adds	r4, #104	; 0x68
    huart->gState = HAL_UART_STATE_READY;
 8001672:	703b      	strb	r3, [r7, #0]
    __HAL_UNLOCK(huart);
 8001674:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8001676:	e00e      	b.n	8001696 <HAL_UART_Transmit+0xa6>
      huart->TxXferCount--;
 8001678:	880b      	ldrh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800167a:	2200      	movs	r2, #0
      huart->TxXferCount--;
 800167c:	3b01      	subs	r3, #1
 800167e:	b29b      	uxth	r3, r3
 8001680:	800b      	strh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001682:	9b03      	ldr	r3, [sp, #12]
 8001684:	2180      	movs	r1, #128	; 0x80
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	0020      	movs	r0, r4
 800168a:	9b02      	ldr	r3, [sp, #8]
 800168c:	f7ff ff7e 	bl	800158c <UART_WaitOnFlagUntilTimeout>
 8001690:	2800      	cmp	r0, #0
 8001692:	d002      	beq.n	800169a <HAL_UART_Transmit+0xaa>
        return HAL_TIMEOUT;
 8001694:	2003      	movs	r0, #3
}
 8001696:	b005      	add	sp, #20
 8001698:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800169a:	68a3      	ldr	r3, [r4, #8]
 800169c:	6822      	ldr	r2, [r4, #0]
 800169e:	42b3      	cmp	r3, r6
 80016a0:	d108      	bne.n	80016b4 <HAL_UART_Transmit+0xc4>
 80016a2:	6923      	ldr	r3, [r4, #16]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d105      	bne.n	80016b4 <HAL_UART_Transmit+0xc4>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80016a8:	882b      	ldrh	r3, [r5, #0]
        pData += 2U;
 80016aa:	3502      	adds	r5, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80016ac:	05db      	lsls	r3, r3, #23
 80016ae:	0ddb      	lsrs	r3, r3, #23
 80016b0:	6293      	str	r3, [r2, #40]	; 0x28
        pData += 2U;
 80016b2:	e7cd      	b.n	8001650 <HAL_UART_Transmit+0x60>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80016b4:	782b      	ldrb	r3, [r5, #0]
 80016b6:	3501      	adds	r5, #1
 80016b8:	6293      	str	r3, [r2, #40]	; 0x28
 80016ba:	e7c9      	b.n	8001650 <HAL_UART_Transmit+0x60>

080016bc <UART_CheckIdleState>:
{
 80016bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016be:	2600      	movs	r6, #0
{
 80016c0:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016c2:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 80016c4:	f7fe feec 	bl	80004a0 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80016c8:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80016ca:	0005      	movs	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	071b      	lsls	r3, r3, #28
 80016d0:	d417      	bmi.n	8001702 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80016d2:	6823      	ldr	r3, [r4, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	075b      	lsls	r3, r3, #29
 80016d8:	d50a      	bpl.n	80016f0 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80016da:	2180      	movs	r1, #128	; 0x80
 80016dc:	4b0f      	ldr	r3, [pc, #60]	; (800171c <UART_CheckIdleState+0x60>)
 80016de:	2200      	movs	r2, #0
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	03c9      	lsls	r1, r1, #15
 80016e4:	002b      	movs	r3, r5
 80016e6:	0020      	movs	r0, r4
 80016e8:	f7ff ff50 	bl	800158c <UART_WaitOnFlagUntilTimeout>
 80016ec:	2800      	cmp	r0, #0
 80016ee:	d113      	bne.n	8001718 <UART_CheckIdleState+0x5c>
  huart->gState  = HAL_UART_STATE_READY;
 80016f0:	0022      	movs	r2, r4
 80016f2:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80016f4:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 80016f6:	3269      	adds	r2, #105	; 0x69
  __HAL_UNLOCK(huart);
 80016f8:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 80016fa:	7013      	strb	r3, [r2, #0]
  huart->RxState = HAL_UART_STATE_READY;
 80016fc:	7053      	strb	r3, [r2, #1]
  __HAL_UNLOCK(huart);
 80016fe:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8001700:	e00b      	b.n	800171a <UART_CheckIdleState+0x5e>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001702:	2180      	movs	r1, #128	; 0x80
 8001704:	4b05      	ldr	r3, [pc, #20]	; (800171c <UART_CheckIdleState+0x60>)
 8001706:	0032      	movs	r2, r6
 8001708:	9300      	str	r3, [sp, #0]
 800170a:	0389      	lsls	r1, r1, #14
 800170c:	0003      	movs	r3, r0
 800170e:	0020      	movs	r0, r4
 8001710:	f7ff ff3c 	bl	800158c <UART_WaitOnFlagUntilTimeout>
 8001714:	2800      	cmp	r0, #0
 8001716:	d0dc      	beq.n	80016d2 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001718:	2003      	movs	r0, #3
}
 800171a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800171c:	01ffffff 	.word	0x01ffffff

08001720 <HAL_UART_Init>:
{
 8001720:	b570      	push	{r4, r5, r6, lr}
 8001722:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8001724:	d101      	bne.n	800172a <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8001726:	2001      	movs	r0, #1
}
 8001728:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 800172a:	0005      	movs	r5, r0
 800172c:	3569      	adds	r5, #105	; 0x69
 800172e:	782b      	ldrb	r3, [r5, #0]
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	d104      	bne.n	8001740 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 8001736:	0002      	movs	r2, r0
 8001738:	3268      	adds	r2, #104	; 0x68
 800173a:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 800173c:	f000 f99a 	bl	8001a74 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001740:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001742:	2101      	movs	r1, #1
 8001744:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001746:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8001748:	6813      	ldr	r3, [r2, #0]
 800174a:	438b      	bics	r3, r1
 800174c:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800174e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001750:	2b00      	cmp	r3, #0
 8001752:	d002      	beq.n	800175a <HAL_UART_Init+0x3a>
    UART_AdvFeatureConfig(huart);
 8001754:	0020      	movs	r0, r4
 8001756:	f7ff feb1 	bl	80014bc <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 800175a:	0020      	movs	r0, r4
 800175c:	f7ff fd7e 	bl	800125c <UART_SetConfig>
 8001760:	2801      	cmp	r0, #1
 8001762:	d0e0      	beq.n	8001726 <HAL_UART_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001764:	6823      	ldr	r3, [r4, #0]
 8001766:	4908      	ldr	r1, [pc, #32]	; (8001788 <HAL_UART_Init+0x68>)
 8001768:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 800176a:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800176c:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800176e:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001770:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001772:	689a      	ldr	r2, [r3, #8]
 8001774:	438a      	bics	r2, r1
 8001776:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001778:	2201      	movs	r2, #1
 800177a:	6819      	ldr	r1, [r3, #0]
 800177c:	430a      	orrs	r2, r1
 800177e:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8001780:	f7ff ff9c 	bl	80016bc <UART_CheckIdleState>
 8001784:	e7d0      	b.n	8001728 <HAL_UART_Init+0x8>
 8001786:	46c0      	nop			; (mov r8, r8)
 8001788:	ffffb7ff 	.word	0xffffb7ff

0800178c <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800178c:	4921      	ldr	r1, [pc, #132]	; (8001814 <SystemClock_Config+0x88>)
 800178e:	4a22      	ldr	r2, [pc, #136]	; (8001818 <SystemClock_Config+0x8c>)
 8001790:	680b      	ldr	r3, [r1, #0]
{
 8001792:	b510      	push	{r4, lr}
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001794:	401a      	ands	r2, r3
 8001796:	2380      	movs	r3, #128	; 0x80
 8001798:	011b      	lsls	r3, r3, #4
 800179a:	4313      	orrs	r3, r2
 800179c:	600b      	str	r3, [r1, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800179e:	2310      	movs	r3, #16
{
 80017a0:	b09e      	sub	sp, #120	; 0x78
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80017a2:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80017a4:	22a0      	movs	r2, #160	; 0xa0
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80017a6:	3b0f      	subs	r3, #15
 80017a8:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80017aa:	2300      	movs	r3, #0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80017ac:	0212      	lsls	r2, r2, #8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017ae:	a810      	add	r0, sp, #64	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80017b0:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80017b2:	9219      	str	r2, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017b4:	931a      	str	r3, [sp, #104]	; 0x68
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017b6:	f7fe ffdf 	bl	8000778 <HAL_RCC_OscConfig>
 80017ba:	1e01      	subs	r1, r0, #0
 80017bc:	d000      	beq.n	80017c0 <SystemClock_Config+0x34>
 80017be:	e7fe      	b.n	80017be <SystemClock_Config+0x32>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017c0:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80017c2:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017c4:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017c6:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017c8:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017ca:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017cc:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017ce:	f7ff fa7f 	bl	8000cd0 <HAL_RCC_ClockConfig>
 80017d2:	2800      	cmp	r0, #0
 80017d4:	d000      	beq.n	80017d8 <SystemClock_Config+0x4c>
 80017d6:	e7fe      	b.n	80017d6 <SystemClock_Config+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 80017d8:	2303      	movs	r3, #3
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80017da:	9009      	str	r0, [sp, #36]	; 0x24
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80017dc:	900a      	str	r0, [sp, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017de:	a806      	add	r0, sp, #24
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 80017e0:	9306      	str	r3, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017e2:	f7ff fb53 	bl	8000e8c <HAL_RCCEx_PeriphCLKConfig>
 80017e6:	1e04      	subs	r4, r0, #0
 80017e8:	d000      	beq.n	80017ec <SystemClock_Config+0x60>
 80017ea:	e7fe      	b.n	80017ea <SystemClock_Config+0x5e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80017ec:	f7ff fb28 	bl	8000e40 <HAL_RCC_GetHCLKFreq>
 80017f0:	21fa      	movs	r1, #250	; 0xfa
 80017f2:	0089      	lsls	r1, r1, #2
 80017f4:	f7fe fc92 	bl	800011c <__udivsi3>
 80017f8:	f7fe fe94 	bl	8000524 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80017fc:	2004      	movs	r0, #4
 80017fe:	f7fe feab 	bl	8000558 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001802:	2001      	movs	r0, #1
 8001804:	0022      	movs	r2, r4
 8001806:	0021      	movs	r1, r4
 8001808:	4240      	negs	r0, r0
 800180a:	f7fe fe5b 	bl	80004c4 <HAL_NVIC_SetPriority>
}
 800180e:	b01e      	add	sp, #120	; 0x78
 8001810:	bd10      	pop	{r4, pc}
 8001812:	46c0      	nop			; (mov r8, r8)
 8001814:	40007000 	.word	0x40007000
 8001818:	ffffe7ff 	.word	0xffffe7ff

0800181c <ConfigLoRaClick>:
/**
  * @}
  */

void ConfigLoRaClick(void)
{
 800181c:	b5f0      	push	{r4, r5, r6, r7, lr}
	char trame[] = "sys factoryRESET\r\n";
 800181e:	2413      	movs	r4, #19
	char trame1[] = "mac pause\r\n";
 8001820:	270c      	movs	r7, #12
{
 8001822:	b08f      	sub	sp, #60	; 0x3c
	char trame[] = "sys factoryRESET\r\n";
 8001824:	0022      	movs	r2, r4
 8001826:	4918      	ldr	r1, [pc, #96]	; (8001888 <ConfigLoRaClick+0x6c>)
 8001828:	a809      	add	r0, sp, #36	; 0x24
 800182a:	f000 f9d9 	bl	8001be0 <memcpy>
	char trame1[] = "mac pause\r\n";
 800182e:	003a      	movs	r2, r7
 8001830:	4916      	ldr	r1, [pc, #88]	; (800188c <ConfigLoRaClick+0x70>)
 8001832:	a801      	add	r0, sp, #4
 8001834:	f000 f9d4 	bl	8001be0 <memcpy>
	char trame2[] = "radio set wdt 0\r\n";

	//Remise a l'etat d'usine du module
	HAL_UART_Transmit(&huart1, (uint8_t*) trame, (uint16_t) sizeof(trame), HAL_MAX_DELAY);
 8001838:	2601      	movs	r6, #1
	char trame2[] = "radio set wdt 0\r\n";
 800183a:	2212      	movs	r2, #18
 800183c:	4914      	ldr	r1, [pc, #80]	; (8001890 <ConfigLoRaClick+0x74>)
 800183e:	a804      	add	r0, sp, #16
 8001840:	f000 f9ce 	bl	8001be0 <memcpy>
	HAL_UART_Transmit(&huart1, (uint8_t*) trame, (uint16_t) sizeof(trame), HAL_MAX_DELAY);
 8001844:	0022      	movs	r2, r4
	HAL_Delay(4000);
 8001846:	24fa      	movs	r4, #250	; 0xfa
	HAL_UART_Transmit(&huart1, (uint8_t*) trame, (uint16_t) sizeof(trame), HAL_MAX_DELAY);
 8001848:	4d12      	ldr	r5, [pc, #72]	; (8001894 <ConfigLoRaClick+0x78>)
 800184a:	4276      	negs	r6, r6
 800184c:	0033      	movs	r3, r6
 800184e:	a909      	add	r1, sp, #36	; 0x24
	HAL_Delay(4000);
 8001850:	0124      	lsls	r4, r4, #4
	HAL_UART_Transmit(&huart1, (uint8_t*) trame, (uint16_t) sizeof(trame), HAL_MAX_DELAY);
 8001852:	0028      	movs	r0, r5
 8001854:	f7ff fecc 	bl	80015f0 <HAL_UART_Transmit>
	HAL_Delay(4000);
 8001858:	0020      	movs	r0, r4
 800185a:	f7fe fe27 	bl	80004ac <HAL_Delay>

	//Verifiaction de la capacit� de trasmision
	HAL_UART_Transmit(&huart1, (uint8_t*) trame1, (uint16_t) sizeof(trame1), HAL_MAX_DELAY);
 800185e:	0033      	movs	r3, r6
 8001860:	003a      	movs	r2, r7
 8001862:	a901      	add	r1, sp, #4
 8001864:	0028      	movs	r0, r5
 8001866:	f7ff fec3 	bl	80015f0 <HAL_UART_Transmit>
	HAL_Delay(4000);
 800186a:	0020      	movs	r0, r4
 800186c:	f7fe fe1e 	bl	80004ac <HAL_Delay>

	//Wacth Dog desactive
	HAL_UART_Transmit(&huart1, (uint8_t*) trame2, (uint16_t) sizeof(trame2), HAL_MAX_DELAY);
 8001870:	0033      	movs	r3, r6
 8001872:	2212      	movs	r2, #18
 8001874:	a904      	add	r1, sp, #16
 8001876:	0028      	movs	r0, r5
 8001878:	f7ff feba 	bl	80015f0 <HAL_UART_Transmit>
	HAL_Delay(4000);
 800187c:	0020      	movs	r0, r4
 800187e:	f7fe fe15 	bl	80004ac <HAL_Delay>
}
 8001882:	b00f      	add	sp, #60	; 0x3c
 8001884:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001886:	46c0      	nop			; (mov r8, r8)
 8001888:	08002bff 	.word	0x08002bff
 800188c:	08002c12 	.word	0x08002c12
 8001890:	08002c1e 	.word	0x08002c1e
 8001894:	20000094 	.word	0x20000094

08001898 <ConversationHexaChar>:

void ConversationHexaChar(char TabChar[2], int nombreaconvertir)
{
 8001898:	b570      	push	{r4, r5, r6, lr}
 800189a:	000d      	movs	r5, r1
 800189c:	0004      	movs	r4, r0
    int digit1 = 0, digit2 = 0;

    printf("Nombre binaire en cours ...\n");
 800189e:	4810      	ldr	r0, [pc, #64]	; (80018e0 <ConversationHexaChar+0x48>)
 80018a0:	f000 fa2a 	bl	8001cf8 <puts>
    digit1 = nombreaconvertir / 16;
    //printf("%d", digit1);
    digit2 = nombreaconvertir % 16;
 80018a4:	4b0f      	ldr	r3, [pc, #60]	; (80018e4 <ConversationHexaChar+0x4c>)
 80018a6:	402b      	ands	r3, r5
 80018a8:	d504      	bpl.n	80018b4 <ConversationHexaChar+0x1c>
 80018aa:	2210      	movs	r2, #16
 80018ac:	3b01      	subs	r3, #1
 80018ae:	4252      	negs	r2, r2
 80018b0:	4313      	orrs	r3, r2
 80018b2:	3301      	adds	r3, #1
    digit1 = nombreaconvertir / 16;
 80018b4:	210f      	movs	r1, #15
 80018b6:	17ea      	asrs	r2, r5, #31
 80018b8:	400a      	ands	r2, r1
 80018ba:	1952      	adds	r2, r2, r5
 80018bc:	1112      	asrs	r2, r2, #4
    digit2 = nombreaconvertir % 16;
 80018be:	3112      	adds	r1, #18
 80018c0:	2a0f      	cmp	r2, #15
 80018c2:	d801      	bhi.n	80018c8 <ConversationHexaChar+0x30>
 80018c4:	4908      	ldr	r1, [pc, #32]	; (80018e8 <ConversationHexaChar+0x50>)
 80018c6:	5c89      	ldrb	r1, [r1, r2]
    //printf("%d\n", digit2);

    TabChar[0] = HexaChar(digit1);
 80018c8:	7021      	strb	r1, [r4, #0]
 80018ca:	2221      	movs	r2, #33	; 0x21
 80018cc:	2b0f      	cmp	r3, #15
 80018ce:	d801      	bhi.n	80018d4 <ConversationHexaChar+0x3c>
 80018d0:	4a05      	ldr	r2, [pc, #20]	; (80018e8 <ConversationHexaChar+0x50>)
 80018d2:	5cd2      	ldrb	r2, [r2, r3]
    TabChar[1] = HexaChar(digit2);
 80018d4:	7062      	strb	r2, [r4, #1]

    printf("Hexa : %c%c\n", TabChar[0], TabChar[1]);
 80018d6:	4805      	ldr	r0, [pc, #20]	; (80018ec <ConversationHexaChar+0x54>)
 80018d8:	f000 f994 	bl	8001c04 <iprintf>
}
 80018dc:	bd70      	pop	{r4, r5, r6, pc}
 80018de:	46c0      	nop			; (mov r8, r8)
 80018e0:	08002c30 	.word	0x08002c30
 80018e4:	8000000f 	.word	0x8000000f
 80018e8:	08002bef 	.word	0x08002bef
 80018ec:	08002c4c 	.word	0x08002c4c

080018f0 <AjouterUneValeurDansTrame>:

    return lettre;
}

void AjouterUneValeurDansTrame(char Trame[10],  char TabValeurASCII[2])
{
 80018f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    char EnteteTrame[] = "radio tx ";
 80018f2:	ae01      	add	r6, sp, #4
{
 80018f4:	0004      	movs	r4, r0
 80018f6:	000d      	movs	r5, r1
    char EnteteTrame[] = "radio tx ";
 80018f8:	220a      	movs	r2, #10
 80018fa:	490a      	ldr	r1, [pc, #40]	; (8001924 <AjouterUneValeurDansTrame+0x34>)
 80018fc:	0030      	movs	r0, r6
 80018fe:	f000 f96f 	bl	8001be0 <memcpy>
    int i = 0, j = 0;
 8001902:	2300      	movs	r3, #0

    while(EnteteTrame[i] != '\0')
 8001904:	5cf2      	ldrb	r2, [r6, r3]
 8001906:	2a00      	cmp	r2, #0
 8001908:	d109      	bne.n	800191e <AjouterUneValeurDansTrame+0x2e>
        i++;
    }

    for(j = 0; j <= 1; j++)
    {
        Trame[i+j] = TabValeurASCII[j];
 800190a:	782a      	ldrb	r2, [r5, #0]
 800190c:	54e2      	strb	r2, [r4, r3]
 800190e:	786a      	ldrb	r2, [r5, #1]
 8001910:	18e3      	adds	r3, r4, r3
 8001912:	705a      	strb	r2, [r3, #1]
        //printf("%c", Trame[i+j]);
    }

    Trame[11] = '\r';
 8001914:	230d      	movs	r3, #13
 8001916:	72e3      	strb	r3, [r4, #11]
    Trame[12] = '\n';
 8001918:	3b03      	subs	r3, #3
 800191a:	7323      	strb	r3, [r4, #12]

    //printf("\n");
}
 800191c:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
        Trame[i] = EnteteTrame[i];
 800191e:	54e2      	strb	r2, [r4, r3]
        i++;
 8001920:	3301      	adds	r3, #1
 8001922:	e7ef      	b.n	8001904 <AjouterUneValeurDansTrame+0x14>
 8001924:	08002be5 	.word	0x08002be5

08001928 <main>:
{
 8001928:	b570      	push	{r4, r5, r6, lr}
 800192a:	b08a      	sub	sp, #40	; 0x28
  HAL_Init();
 800192c:	f7fe fda0 	bl	8000470 <HAL_Init>
  SystemClock_Config();
 8001930:	f7ff ff2c 	bl	800178c <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001934:	2004      	movs	r0, #4
 8001936:	4b38      	ldr	r3, [pc, #224]	; (8001a18 <main+0xf0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001938:	2501      	movs	r5, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800193a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800193e:	4301      	orrs	r1, r0
 8001940:	62d9      	str	r1, [r3, #44]	; 0x2c
 8001942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  huart2.Init.BaudRate = 57600;
 8001944:	26e1      	movs	r6, #225	; 0xe1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001946:	4002      	ands	r2, r0
 8001948:	9202      	str	r2, [sp, #8]
 800194a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800194c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800194e:	307c      	adds	r0, #124	; 0x7c
 8001950:	4301      	orrs	r1, r0
 8001952:	62d9      	str	r1, [r3, #44]	; 0x2c
 8001954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001956:	2120      	movs	r1, #32
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001958:	4002      	ands	r2, r0
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800195a:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800195c:	9203      	str	r2, [sp, #12]
 800195e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001962:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001964:	432a      	orrs	r2, r5
 8001966:	62da      	str	r2, [r3, #44]	; 0x2c
 8001968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800196a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800196c:	402b      	ands	r3, r5
 800196e:	9304      	str	r3, [sp, #16]
 8001970:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001972:	f7fe fec1 	bl	80006f8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8001976:	2380      	movs	r3, #128	; 0x80
 8001978:	019b      	lsls	r3, r3, #6
 800197a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800197c:	4b27      	ldr	r3, [pc, #156]	; (8001a1c <main+0xf4>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800197e:	a905      	add	r1, sp, #20
 8001980:	4827      	ldr	r0, [pc, #156]	; (8001a20 <main+0xf8>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001982:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001986:	f7fe fdfb 	bl	8000580 <HAL_GPIO_Init>
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800198a:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = LD2_Pin;
 800198c:	2320      	movs	r3, #32
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800198e:	05c0      	lsls	r0, r0, #23
 8001990:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = LD2_Pin;
 8001992:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001994:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001998:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800199a:	f7fe fdf1 	bl	8000580 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 800199e:	4821      	ldr	r0, [pc, #132]	; (8001a24 <main+0xfc>)
 80019a0:	4b21      	ldr	r3, [pc, #132]	; (8001a28 <main+0x100>)
  huart2.Init.BaudRate = 57600;
 80019a2:	0236      	lsls	r6, r6, #8
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019a4:	350b      	adds	r5, #11
  huart2.Instance = USART2;
 80019a6:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 57600;
 80019a8:	6046      	str	r6, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019aa:	6084      	str	r4, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019ac:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019ae:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019b0:	6145      	str	r5, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019b2:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019b4:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019b6:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019b8:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019ba:	f7ff feb1 	bl	8001720 <HAL_UART_Init>
 80019be:	42a0      	cmp	r0, r4
 80019c0:	d000      	beq.n	80019c4 <main+0x9c>
 80019c2:	e7fe      	b.n	80019c2 <main+0x9a>
  huart1.Instance = USART1;
 80019c4:	4c19      	ldr	r4, [pc, #100]	; (8001a2c <main+0x104>)
 80019c6:	4b1a      	ldr	r3, [pc, #104]	; (8001a30 <main+0x108>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019c8:	60a0      	str	r0, [r4, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019ca:	60e0      	str	r0, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019cc:	6120      	str	r0, [r4, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ce:	61a0      	str	r0, [r4, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019d0:	61e0      	str	r0, [r4, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019d2:	6220      	str	r0, [r4, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019d4:	6260      	str	r0, [r4, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019d6:	0020      	movs	r0, r4
  huart1.Instance = USART1;
 80019d8:	6023      	str	r3, [r4, #0]
  huart1.Init.BaudRate = 57600;
 80019da:	6066      	str	r6, [r4, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019dc:	6165      	str	r5, [r4, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019de:	f7ff fe9f 	bl	8001720 <HAL_UART_Init>
 80019e2:	2800      	cmp	r0, #0
 80019e4:	d000      	beq.n	80019e8 <main+0xc0>
 80019e6:	e7fe      	b.n	80019e6 <main+0xbe>
	  HAL_UART_Transmit(&huart1, (uint8_t*) TrameATTx, (uint16_t) sizeof(TrameATTx), HAL_MAX_DELAY);
 80019e8:	2601      	movs	r6, #1
	  HAL_Delay(4000); //J'envois toutes les 1 sec
 80019ea:	25fa      	movs	r5, #250	; 0xfa
  ConfigLoRaClick();
 80019ec:	f7ff ff16 	bl	800181c <ConfigLoRaClick>
	  HAL_UART_Transmit(&huart1, (uint8_t*) TrameATTx, (uint16_t) sizeof(TrameATTx), HAL_MAX_DELAY);
 80019f0:	4276      	negs	r6, r6
	  HAL_Delay(4000); //J'envois toutes les 1 sec
 80019f2:	012d      	lsls	r5, r5, #4
	  ConversationHexaChar(TCarac, valeur);
 80019f4:	a801      	add	r0, sp, #4
 80019f6:	2119      	movs	r1, #25
 80019f8:	f7ff ff4e 	bl	8001898 <ConversationHexaChar>
	  AjouterUneValeurDansTrame(TrameATTx, TCarac);
 80019fc:	a901      	add	r1, sp, #4
 80019fe:	a805      	add	r0, sp, #20
 8001a00:	f7ff ff76 	bl	80018f0 <AjouterUneValeurDansTrame>
	  HAL_UART_Transmit(&huart1, (uint8_t*) TrameATTx, (uint16_t) sizeof(TrameATTx), HAL_MAX_DELAY);
 8001a04:	0033      	movs	r3, r6
 8001a06:	220f      	movs	r2, #15
 8001a08:	a905      	add	r1, sp, #20
 8001a0a:	0020      	movs	r0, r4
 8001a0c:	f7ff fdf0 	bl	80015f0 <HAL_UART_Transmit>
	  HAL_Delay(4000); //J'envois toutes les 1 sec
 8001a10:	0028      	movs	r0, r5
 8001a12:	f7fe fd4b 	bl	80004ac <HAL_Delay>
 8001a16:	e7ed      	b.n	80019f4 <main+0xcc>
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	10210000 	.word	0x10210000
 8001a20:	50000800 	.word	0x50000800
 8001a24:	20000104 	.word	0x20000104
 8001a28:	40004400 	.word	0x40004400
 8001a2c:	20000094 	.word	0x20000094
 8001a30:	40013800 	.word	0x40013800

08001a34 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a34:	2201      	movs	r2, #1
 8001a36:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <HAL_MspInit+0x3c>)
{
 8001a38:	b510      	push	{r4, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a3a:	6b59      	ldr	r1, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8001a3c:	2005      	movs	r0, #5
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a42:	2280      	movs	r2, #128	; 0x80
 8001a44:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001a46:	0552      	lsls	r2, r2, #21
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	4240      	negs	r0, r0
 8001a50:	0011      	movs	r1, r2
 8001a52:	f7fe fd37 	bl	80004c4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001a56:	2200      	movs	r2, #0
 8001a58:	2002      	movs	r0, #2
 8001a5a:	0011      	movs	r1, r2
 8001a5c:	4240      	negs	r0, r0
 8001a5e:	f7fe fd31 	bl	80004c4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001a62:	2200      	movs	r2, #0
 8001a64:	2001      	movs	r0, #1
 8001a66:	0011      	movs	r1, r2
 8001a68:	4240      	negs	r0, r0
 8001a6a:	f7fe fd2b 	bl	80004c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a6e:	bd10      	pop	{r4, pc}
 8001a70:	40021000 	.word	0x40021000

08001a74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8001a76:	6803      	ldr	r3, [r0, #0]
 8001a78:	4a13      	ldr	r2, [pc, #76]	; (8001ac8 <HAL_UART_MspInit+0x54>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d117      	bne.n	8001aae <HAL_UART_MspInit+0x3a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a7e:	2380      	movs	r3, #128	; 0x80
 8001a80:	4a12      	ldr	r2, [pc, #72]	; (8001acc <HAL_UART_MspInit+0x58>)
 8001a82:	01db      	lsls	r3, r3, #7
 8001a84:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8001a86:	430b      	orrs	r3, r1
 8001a88:	6353      	str	r3, [r2, #52]	; 0x34
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a8a:	23c0      	movs	r3, #192	; 0xc0
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a90:	2302      	movs	r3, #2
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a92:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a96:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a9a:	3303      	adds	r3, #3
 8001a9c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001aa0:	3301      	adds	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa2:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001aa4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa6:	f7fe fd6b 	bl	8000580 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001aaa:	b007      	add	sp, #28
 8001aac:	bd00      	pop	{pc}
  else if(huart->Instance==USART2)
 8001aae:	4a08      	ldr	r2, [pc, #32]	; (8001ad0 <HAL_UART_MspInit+0x5c>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d1fa      	bne.n	8001aaa <HAL_UART_MspInit+0x36>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ab4:	2380      	movs	r3, #128	; 0x80
 8001ab6:	4a05      	ldr	r2, [pc, #20]	; (8001acc <HAL_UART_MspInit+0x58>)
 8001ab8:	029b      	lsls	r3, r3, #10
 8001aba:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8001abc:	430b      	orrs	r3, r1
 8001abe:	6393      	str	r3, [r2, #56]	; 0x38
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ac0:	230c      	movs	r3, #12
 8001ac2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac4:	3b0a      	subs	r3, #10
 8001ac6:	e7e4      	b.n	8001a92 <HAL_UART_MspInit+0x1e>
 8001ac8:	40013800 	.word	0x40013800
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	40004400 	.word	0x40004400

08001ad4 <NMI_Handler>:
 8001ad4:	4770      	bx	lr

08001ad6 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001ad6:	e7fe      	b.n	8001ad6 <HardFault_Handler>

08001ad8 <SVC_Handler>:
 8001ad8:	4770      	bx	lr

08001ada <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ada:	4770      	bx	lr

08001adc <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001adc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ade:	f7fe fcd7 	bl	8000490 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8001ae2:	f7fe fd48 	bl	8000576 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ae6:	bd10      	pop	{r4, pc}

08001ae8 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{    
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8001ae8:	2280      	movs	r2, #128	; 0x80
 8001aea:	4b10      	ldr	r3, [pc, #64]	; (8001b2c <SystemInit+0x44>)
 8001aec:	0052      	lsls	r2, r2, #1
 8001aee:	6819      	ldr	r1, [r3, #0]
 8001af0:	430a      	orrs	r2, r1
 8001af2:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8001af4:	68da      	ldr	r2, [r3, #12]
 8001af6:	490e      	ldr	r1, [pc, #56]	; (8001b30 <SystemInit+0x48>)
 8001af8:	400a      	ands	r2, r1
 8001afa:	60da      	str	r2, [r3, #12]
 
  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	490d      	ldr	r1, [pc, #52]	; (8001b34 <SystemInit+0x4c>)
 8001b00:	400a      	ands	r2, r1
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001b02:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8001b04:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	438a      	bics	r2, r1
 8001b0a:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	490a      	ldr	r1, [pc, #40]	; (8001b38 <SystemInit+0x50>)
 8001b10:	400a      	ands	r2, r1
 8001b12:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8001b14:	68da      	ldr	r2, [r3, #12]
 8001b16:	4909      	ldr	r1, [pc, #36]	; (8001b3c <SystemInit+0x54>)
 8001b18:	400a      	ands	r2, r1
 8001b1a:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	611a      	str	r2, [r3, #16]
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b20:	2280      	movs	r2, #128	; 0x80
 8001b22:	4b07      	ldr	r3, [pc, #28]	; (8001b40 <SystemInit+0x58>)
 8001b24:	0512      	lsls	r2, r2, #20
 8001b26:	609a      	str	r2, [r3, #8]
#endif
}
 8001b28:	4770      	bx	lr
 8001b2a:	46c0      	nop			; (mov r8, r8)
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	88ff400c 	.word	0x88ff400c
 8001b34:	fef6fff6 	.word	0xfef6fff6
 8001b38:	fffbffff 	.word	0xfffbffff
 8001b3c:	ff02ffff 	.word	0xff02ffff
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001b44:	480d      	ldr	r0, [pc, #52]	; (8001b7c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001b46:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001b48:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b4a:	e003      	b.n	8001b54 <LoopCopyDataInit>

08001b4c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8001b4e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b50:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b52:	3104      	adds	r1, #4

08001b54 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b54:	480b      	ldr	r0, [pc, #44]	; (8001b84 <LoopForever+0xa>)
  ldr  r3, =_edata
 8001b56:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <LoopForever+0xe>)
  adds  r2, r0, r1
 8001b58:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b5a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b5c:	d3f6      	bcc.n	8001b4c <CopyDataInit>
  ldr  r2, =_sbss
 8001b5e:	4a0b      	ldr	r2, [pc, #44]	; (8001b8c <LoopForever+0x12>)
  b  LoopFillZerobss
 8001b60:	e002      	b.n	8001b68 <LoopFillZerobss>

08001b62 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001b62:	2300      	movs	r3, #0
  str  r3, [r2]
 8001b64:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b66:	3204      	adds	r2, #4

08001b68 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8001b68:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <LoopForever+0x16>)
  cmp  r2, r3
 8001b6a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b6c:	d3f9      	bcc.n	8001b62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001b6e:	f7ff ffbb 	bl	8001ae8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b72:	f000 f811 	bl	8001b98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b76:	f7ff fed7 	bl	8001928 <main>

08001b7a <LoopForever>:

LoopForever:
    b LoopForever
 8001b7a:	e7fe      	b.n	8001b7a <LoopForever>
   ldr   r0, =_estack
 8001b7c:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8001b80:	08002d24 	.word	0x08002d24
  ldr  r0, =_sdata
 8001b84:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b88:	20000068 	.word	0x20000068
  ldr  r2, =_sbss
 8001b8c:	20000068 	.word	0x20000068
  ldr  r3, = _ebss
 8001b90:	20000178 	.word	0x20000178

08001b94 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b94:	e7fe      	b.n	8001b94 <ADC1_COMP_IRQHandler>
	...

08001b98 <__libc_init_array>:
 8001b98:	b570      	push	{r4, r5, r6, lr}
 8001b9a:	2600      	movs	r6, #0
 8001b9c:	4d0c      	ldr	r5, [pc, #48]	; (8001bd0 <__libc_init_array+0x38>)
 8001b9e:	4c0d      	ldr	r4, [pc, #52]	; (8001bd4 <__libc_init_array+0x3c>)
 8001ba0:	1b64      	subs	r4, r4, r5
 8001ba2:	10a4      	asrs	r4, r4, #2
 8001ba4:	42a6      	cmp	r6, r4
 8001ba6:	d109      	bne.n	8001bbc <__libc_init_array+0x24>
 8001ba8:	2600      	movs	r6, #0
 8001baa:	f001 f807 	bl	8002bbc <_init>
 8001bae:	4d0a      	ldr	r5, [pc, #40]	; (8001bd8 <__libc_init_array+0x40>)
 8001bb0:	4c0a      	ldr	r4, [pc, #40]	; (8001bdc <__libc_init_array+0x44>)
 8001bb2:	1b64      	subs	r4, r4, r5
 8001bb4:	10a4      	asrs	r4, r4, #2
 8001bb6:	42a6      	cmp	r6, r4
 8001bb8:	d105      	bne.n	8001bc6 <__libc_init_array+0x2e>
 8001bba:	bd70      	pop	{r4, r5, r6, pc}
 8001bbc:	00b3      	lsls	r3, r6, #2
 8001bbe:	58eb      	ldr	r3, [r5, r3]
 8001bc0:	4798      	blx	r3
 8001bc2:	3601      	adds	r6, #1
 8001bc4:	e7ee      	b.n	8001ba4 <__libc_init_array+0xc>
 8001bc6:	00b3      	lsls	r3, r6, #2
 8001bc8:	58eb      	ldr	r3, [r5, r3]
 8001bca:	4798      	blx	r3
 8001bcc:	3601      	adds	r6, #1
 8001bce:	e7f2      	b.n	8001bb6 <__libc_init_array+0x1e>
 8001bd0:	08002d1c 	.word	0x08002d1c
 8001bd4:	08002d1c 	.word	0x08002d1c
 8001bd8:	08002d1c 	.word	0x08002d1c
 8001bdc:	08002d20 	.word	0x08002d20

08001be0 <memcpy>:
 8001be0:	2300      	movs	r3, #0
 8001be2:	b510      	push	{r4, lr}
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d100      	bne.n	8001bea <memcpy+0xa>
 8001be8:	bd10      	pop	{r4, pc}
 8001bea:	5ccc      	ldrb	r4, [r1, r3]
 8001bec:	54c4      	strb	r4, [r0, r3]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	e7f8      	b.n	8001be4 <memcpy+0x4>

08001bf2 <memset>:
 8001bf2:	0003      	movs	r3, r0
 8001bf4:	1882      	adds	r2, r0, r2
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d100      	bne.n	8001bfc <memset+0xa>
 8001bfa:	4770      	bx	lr
 8001bfc:	7019      	strb	r1, [r3, #0]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	e7f9      	b.n	8001bf6 <memset+0x4>
	...

08001c04 <iprintf>:
 8001c04:	b40f      	push	{r0, r1, r2, r3}
 8001c06:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <iprintf+0x30>)
 8001c08:	b513      	push	{r0, r1, r4, lr}
 8001c0a:	681c      	ldr	r4, [r3, #0]
 8001c0c:	2c00      	cmp	r4, #0
 8001c0e:	d005      	beq.n	8001c1c <iprintf+0x18>
 8001c10:	69a3      	ldr	r3, [r4, #24]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d102      	bne.n	8001c1c <iprintf+0x18>
 8001c16:	0020      	movs	r0, r4
 8001c18:	f000 fa3c 	bl	8002094 <__sinit>
 8001c1c:	ab05      	add	r3, sp, #20
 8001c1e:	9a04      	ldr	r2, [sp, #16]
 8001c20:	68a1      	ldr	r1, [r4, #8]
 8001c22:	0020      	movs	r0, r4
 8001c24:	9301      	str	r3, [sp, #4]
 8001c26:	f000 fc07 	bl	8002438 <_vfiprintf_r>
 8001c2a:	bc16      	pop	{r1, r2, r4}
 8001c2c:	bc08      	pop	{r3}
 8001c2e:	b004      	add	sp, #16
 8001c30:	4718      	bx	r3
 8001c32:	46c0      	nop			; (mov r8, r8)
 8001c34:	20000004 	.word	0x20000004

08001c38 <_puts_r>:
 8001c38:	b570      	push	{r4, r5, r6, lr}
 8001c3a:	0005      	movs	r5, r0
 8001c3c:	000e      	movs	r6, r1
 8001c3e:	2800      	cmp	r0, #0
 8001c40:	d004      	beq.n	8001c4c <_puts_r+0x14>
 8001c42:	6983      	ldr	r3, [r0, #24]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d101      	bne.n	8001c4c <_puts_r+0x14>
 8001c48:	f000 fa24 	bl	8002094 <__sinit>
 8001c4c:	69ab      	ldr	r3, [r5, #24]
 8001c4e:	68ac      	ldr	r4, [r5, #8]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d102      	bne.n	8001c5a <_puts_r+0x22>
 8001c54:	0028      	movs	r0, r5
 8001c56:	f000 fa1d 	bl	8002094 <__sinit>
 8001c5a:	4b24      	ldr	r3, [pc, #144]	; (8001cec <_puts_r+0xb4>)
 8001c5c:	429c      	cmp	r4, r3
 8001c5e:	d10f      	bne.n	8001c80 <_puts_r+0x48>
 8001c60:	686c      	ldr	r4, [r5, #4]
 8001c62:	89a3      	ldrh	r3, [r4, #12]
 8001c64:	071b      	lsls	r3, r3, #28
 8001c66:	d502      	bpl.n	8001c6e <_puts_r+0x36>
 8001c68:	6923      	ldr	r3, [r4, #16]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d120      	bne.n	8001cb0 <_puts_r+0x78>
 8001c6e:	0021      	movs	r1, r4
 8001c70:	0028      	movs	r0, r5
 8001c72:	f000 f8a1 	bl	8001db8 <__swsetup_r>
 8001c76:	2800      	cmp	r0, #0
 8001c78:	d01a      	beq.n	8001cb0 <_puts_r+0x78>
 8001c7a:	2001      	movs	r0, #1
 8001c7c:	4240      	negs	r0, r0
 8001c7e:	bd70      	pop	{r4, r5, r6, pc}
 8001c80:	4b1b      	ldr	r3, [pc, #108]	; (8001cf0 <_puts_r+0xb8>)
 8001c82:	429c      	cmp	r4, r3
 8001c84:	d101      	bne.n	8001c8a <_puts_r+0x52>
 8001c86:	68ac      	ldr	r4, [r5, #8]
 8001c88:	e7eb      	b.n	8001c62 <_puts_r+0x2a>
 8001c8a:	4b1a      	ldr	r3, [pc, #104]	; (8001cf4 <_puts_r+0xbc>)
 8001c8c:	429c      	cmp	r4, r3
 8001c8e:	d1e8      	bne.n	8001c62 <_puts_r+0x2a>
 8001c90:	68ec      	ldr	r4, [r5, #12]
 8001c92:	e7e6      	b.n	8001c62 <_puts_r+0x2a>
 8001c94:	3b01      	subs	r3, #1
 8001c96:	3601      	adds	r6, #1
 8001c98:	60a3      	str	r3, [r4, #8]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	da04      	bge.n	8001ca8 <_puts_r+0x70>
 8001c9e:	69a2      	ldr	r2, [r4, #24]
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	db16      	blt.n	8001cd2 <_puts_r+0x9a>
 8001ca4:	290a      	cmp	r1, #10
 8001ca6:	d014      	beq.n	8001cd2 <_puts_r+0x9a>
 8001ca8:	6823      	ldr	r3, [r4, #0]
 8001caa:	1c5a      	adds	r2, r3, #1
 8001cac:	6022      	str	r2, [r4, #0]
 8001cae:	7019      	strb	r1, [r3, #0]
 8001cb0:	7831      	ldrb	r1, [r6, #0]
 8001cb2:	68a3      	ldr	r3, [r4, #8]
 8001cb4:	2900      	cmp	r1, #0
 8001cb6:	d1ed      	bne.n	8001c94 <_puts_r+0x5c>
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	60a3      	str	r3, [r4, #8]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	da0f      	bge.n	8001ce0 <_puts_r+0xa8>
 8001cc0:	0022      	movs	r2, r4
 8001cc2:	310a      	adds	r1, #10
 8001cc4:	0028      	movs	r0, r5
 8001cc6:	f000 f821 	bl	8001d0c <__swbuf_r>
 8001cca:	1c43      	adds	r3, r0, #1
 8001ccc:	d0d5      	beq.n	8001c7a <_puts_r+0x42>
 8001cce:	200a      	movs	r0, #10
 8001cd0:	e7d5      	b.n	8001c7e <_puts_r+0x46>
 8001cd2:	0022      	movs	r2, r4
 8001cd4:	0028      	movs	r0, r5
 8001cd6:	f000 f819 	bl	8001d0c <__swbuf_r>
 8001cda:	1c43      	adds	r3, r0, #1
 8001cdc:	d1e8      	bne.n	8001cb0 <_puts_r+0x78>
 8001cde:	e7cc      	b.n	8001c7a <_puts_r+0x42>
 8001ce0:	200a      	movs	r0, #10
 8001ce2:	6823      	ldr	r3, [r4, #0]
 8001ce4:	1c5a      	adds	r2, r3, #1
 8001ce6:	6022      	str	r2, [r4, #0]
 8001ce8:	7018      	strb	r0, [r3, #0]
 8001cea:	e7c8      	b.n	8001c7e <_puts_r+0x46>
 8001cec:	08002c9c 	.word	0x08002c9c
 8001cf0:	08002cbc 	.word	0x08002cbc
 8001cf4:	08002c7c 	.word	0x08002c7c

08001cf8 <puts>:
 8001cf8:	b510      	push	{r4, lr}
 8001cfa:	4b03      	ldr	r3, [pc, #12]	; (8001d08 <puts+0x10>)
 8001cfc:	0001      	movs	r1, r0
 8001cfe:	6818      	ldr	r0, [r3, #0]
 8001d00:	f7ff ff9a 	bl	8001c38 <_puts_r>
 8001d04:	bd10      	pop	{r4, pc}
 8001d06:	46c0      	nop			; (mov r8, r8)
 8001d08:	20000004 	.word	0x20000004

08001d0c <__swbuf_r>:
 8001d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d0e:	0005      	movs	r5, r0
 8001d10:	000e      	movs	r6, r1
 8001d12:	0014      	movs	r4, r2
 8001d14:	2800      	cmp	r0, #0
 8001d16:	d004      	beq.n	8001d22 <__swbuf_r+0x16>
 8001d18:	6983      	ldr	r3, [r0, #24]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <__swbuf_r+0x16>
 8001d1e:	f000 f9b9 	bl	8002094 <__sinit>
 8001d22:	4b22      	ldr	r3, [pc, #136]	; (8001dac <__swbuf_r+0xa0>)
 8001d24:	429c      	cmp	r4, r3
 8001d26:	d12d      	bne.n	8001d84 <__swbuf_r+0x78>
 8001d28:	686c      	ldr	r4, [r5, #4]
 8001d2a:	69a3      	ldr	r3, [r4, #24]
 8001d2c:	60a3      	str	r3, [r4, #8]
 8001d2e:	89a3      	ldrh	r3, [r4, #12]
 8001d30:	071b      	lsls	r3, r3, #28
 8001d32:	d531      	bpl.n	8001d98 <__swbuf_r+0x8c>
 8001d34:	6923      	ldr	r3, [r4, #16]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d02e      	beq.n	8001d98 <__swbuf_r+0x8c>
 8001d3a:	6823      	ldr	r3, [r4, #0]
 8001d3c:	6922      	ldr	r2, [r4, #16]
 8001d3e:	b2f7      	uxtb	r7, r6
 8001d40:	1a98      	subs	r0, r3, r2
 8001d42:	6963      	ldr	r3, [r4, #20]
 8001d44:	b2f6      	uxtb	r6, r6
 8001d46:	4298      	cmp	r0, r3
 8001d48:	db05      	blt.n	8001d56 <__swbuf_r+0x4a>
 8001d4a:	0021      	movs	r1, r4
 8001d4c:	0028      	movs	r0, r5
 8001d4e:	f000 f933 	bl	8001fb8 <_fflush_r>
 8001d52:	2800      	cmp	r0, #0
 8001d54:	d126      	bne.n	8001da4 <__swbuf_r+0x98>
 8001d56:	68a3      	ldr	r3, [r4, #8]
 8001d58:	3001      	adds	r0, #1
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	60a3      	str	r3, [r4, #8]
 8001d5e:	6823      	ldr	r3, [r4, #0]
 8001d60:	1c5a      	adds	r2, r3, #1
 8001d62:	6022      	str	r2, [r4, #0]
 8001d64:	701f      	strb	r7, [r3, #0]
 8001d66:	6963      	ldr	r3, [r4, #20]
 8001d68:	4298      	cmp	r0, r3
 8001d6a:	d004      	beq.n	8001d76 <__swbuf_r+0x6a>
 8001d6c:	89a3      	ldrh	r3, [r4, #12]
 8001d6e:	07db      	lsls	r3, r3, #31
 8001d70:	d51a      	bpl.n	8001da8 <__swbuf_r+0x9c>
 8001d72:	2e0a      	cmp	r6, #10
 8001d74:	d118      	bne.n	8001da8 <__swbuf_r+0x9c>
 8001d76:	0021      	movs	r1, r4
 8001d78:	0028      	movs	r0, r5
 8001d7a:	f000 f91d 	bl	8001fb8 <_fflush_r>
 8001d7e:	2800      	cmp	r0, #0
 8001d80:	d012      	beq.n	8001da8 <__swbuf_r+0x9c>
 8001d82:	e00f      	b.n	8001da4 <__swbuf_r+0x98>
 8001d84:	4b0a      	ldr	r3, [pc, #40]	; (8001db0 <__swbuf_r+0xa4>)
 8001d86:	429c      	cmp	r4, r3
 8001d88:	d101      	bne.n	8001d8e <__swbuf_r+0x82>
 8001d8a:	68ac      	ldr	r4, [r5, #8]
 8001d8c:	e7cd      	b.n	8001d2a <__swbuf_r+0x1e>
 8001d8e:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <__swbuf_r+0xa8>)
 8001d90:	429c      	cmp	r4, r3
 8001d92:	d1ca      	bne.n	8001d2a <__swbuf_r+0x1e>
 8001d94:	68ec      	ldr	r4, [r5, #12]
 8001d96:	e7c8      	b.n	8001d2a <__swbuf_r+0x1e>
 8001d98:	0021      	movs	r1, r4
 8001d9a:	0028      	movs	r0, r5
 8001d9c:	f000 f80c 	bl	8001db8 <__swsetup_r>
 8001da0:	2800      	cmp	r0, #0
 8001da2:	d0ca      	beq.n	8001d3a <__swbuf_r+0x2e>
 8001da4:	2601      	movs	r6, #1
 8001da6:	4276      	negs	r6, r6
 8001da8:	0030      	movs	r0, r6
 8001daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001dac:	08002c9c 	.word	0x08002c9c
 8001db0:	08002cbc 	.word	0x08002cbc
 8001db4:	08002c7c 	.word	0x08002c7c

08001db8 <__swsetup_r>:
 8001db8:	4b36      	ldr	r3, [pc, #216]	; (8001e94 <__swsetup_r+0xdc>)
 8001dba:	b570      	push	{r4, r5, r6, lr}
 8001dbc:	681d      	ldr	r5, [r3, #0]
 8001dbe:	0006      	movs	r6, r0
 8001dc0:	000c      	movs	r4, r1
 8001dc2:	2d00      	cmp	r5, #0
 8001dc4:	d005      	beq.n	8001dd2 <__swsetup_r+0x1a>
 8001dc6:	69ab      	ldr	r3, [r5, #24]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d102      	bne.n	8001dd2 <__swsetup_r+0x1a>
 8001dcc:	0028      	movs	r0, r5
 8001dce:	f000 f961 	bl	8002094 <__sinit>
 8001dd2:	4b31      	ldr	r3, [pc, #196]	; (8001e98 <__swsetup_r+0xe0>)
 8001dd4:	429c      	cmp	r4, r3
 8001dd6:	d10f      	bne.n	8001df8 <__swsetup_r+0x40>
 8001dd8:	686c      	ldr	r4, [r5, #4]
 8001dda:	230c      	movs	r3, #12
 8001ddc:	5ee2      	ldrsh	r2, [r4, r3]
 8001dde:	b293      	uxth	r3, r2
 8001de0:	0719      	lsls	r1, r3, #28
 8001de2:	d42d      	bmi.n	8001e40 <__swsetup_r+0x88>
 8001de4:	06d9      	lsls	r1, r3, #27
 8001de6:	d411      	bmi.n	8001e0c <__swsetup_r+0x54>
 8001de8:	2309      	movs	r3, #9
 8001dea:	2001      	movs	r0, #1
 8001dec:	6033      	str	r3, [r6, #0]
 8001dee:	3337      	adds	r3, #55	; 0x37
 8001df0:	4313      	orrs	r3, r2
 8001df2:	81a3      	strh	r3, [r4, #12]
 8001df4:	4240      	negs	r0, r0
 8001df6:	bd70      	pop	{r4, r5, r6, pc}
 8001df8:	4b28      	ldr	r3, [pc, #160]	; (8001e9c <__swsetup_r+0xe4>)
 8001dfa:	429c      	cmp	r4, r3
 8001dfc:	d101      	bne.n	8001e02 <__swsetup_r+0x4a>
 8001dfe:	68ac      	ldr	r4, [r5, #8]
 8001e00:	e7eb      	b.n	8001dda <__swsetup_r+0x22>
 8001e02:	4b27      	ldr	r3, [pc, #156]	; (8001ea0 <__swsetup_r+0xe8>)
 8001e04:	429c      	cmp	r4, r3
 8001e06:	d1e8      	bne.n	8001dda <__swsetup_r+0x22>
 8001e08:	68ec      	ldr	r4, [r5, #12]
 8001e0a:	e7e6      	b.n	8001dda <__swsetup_r+0x22>
 8001e0c:	075b      	lsls	r3, r3, #29
 8001e0e:	d513      	bpl.n	8001e38 <__swsetup_r+0x80>
 8001e10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001e12:	2900      	cmp	r1, #0
 8001e14:	d008      	beq.n	8001e28 <__swsetup_r+0x70>
 8001e16:	0023      	movs	r3, r4
 8001e18:	3344      	adds	r3, #68	; 0x44
 8001e1a:	4299      	cmp	r1, r3
 8001e1c:	d002      	beq.n	8001e24 <__swsetup_r+0x6c>
 8001e1e:	0030      	movs	r0, r6
 8001e20:	f000 fa3a 	bl	8002298 <_free_r>
 8001e24:	2300      	movs	r3, #0
 8001e26:	6363      	str	r3, [r4, #52]	; 0x34
 8001e28:	2224      	movs	r2, #36	; 0x24
 8001e2a:	89a3      	ldrh	r3, [r4, #12]
 8001e2c:	4393      	bics	r3, r2
 8001e2e:	81a3      	strh	r3, [r4, #12]
 8001e30:	2300      	movs	r3, #0
 8001e32:	6063      	str	r3, [r4, #4]
 8001e34:	6923      	ldr	r3, [r4, #16]
 8001e36:	6023      	str	r3, [r4, #0]
 8001e38:	2308      	movs	r3, #8
 8001e3a:	89a2      	ldrh	r2, [r4, #12]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	81a3      	strh	r3, [r4, #12]
 8001e40:	6923      	ldr	r3, [r4, #16]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d10b      	bne.n	8001e5e <__swsetup_r+0xa6>
 8001e46:	21a0      	movs	r1, #160	; 0xa0
 8001e48:	2280      	movs	r2, #128	; 0x80
 8001e4a:	89a3      	ldrh	r3, [r4, #12]
 8001e4c:	0089      	lsls	r1, r1, #2
 8001e4e:	0092      	lsls	r2, r2, #2
 8001e50:	400b      	ands	r3, r1
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d003      	beq.n	8001e5e <__swsetup_r+0xa6>
 8001e56:	0021      	movs	r1, r4
 8001e58:	0030      	movs	r0, r6
 8001e5a:	f000 f9d9 	bl	8002210 <__smakebuf_r>
 8001e5e:	2301      	movs	r3, #1
 8001e60:	89a2      	ldrh	r2, [r4, #12]
 8001e62:	4013      	ands	r3, r2
 8001e64:	d011      	beq.n	8001e8a <__swsetup_r+0xd2>
 8001e66:	2300      	movs	r3, #0
 8001e68:	60a3      	str	r3, [r4, #8]
 8001e6a:	6963      	ldr	r3, [r4, #20]
 8001e6c:	425b      	negs	r3, r3
 8001e6e:	61a3      	str	r3, [r4, #24]
 8001e70:	2000      	movs	r0, #0
 8001e72:	6923      	ldr	r3, [r4, #16]
 8001e74:	4283      	cmp	r3, r0
 8001e76:	d1be      	bne.n	8001df6 <__swsetup_r+0x3e>
 8001e78:	230c      	movs	r3, #12
 8001e7a:	5ee2      	ldrsh	r2, [r4, r3]
 8001e7c:	0613      	lsls	r3, r2, #24
 8001e7e:	d5ba      	bpl.n	8001df6 <__swsetup_r+0x3e>
 8001e80:	2340      	movs	r3, #64	; 0x40
 8001e82:	4313      	orrs	r3, r2
 8001e84:	81a3      	strh	r3, [r4, #12]
 8001e86:	3801      	subs	r0, #1
 8001e88:	e7b5      	b.n	8001df6 <__swsetup_r+0x3e>
 8001e8a:	0792      	lsls	r2, r2, #30
 8001e8c:	d400      	bmi.n	8001e90 <__swsetup_r+0xd8>
 8001e8e:	6963      	ldr	r3, [r4, #20]
 8001e90:	60a3      	str	r3, [r4, #8]
 8001e92:	e7ed      	b.n	8001e70 <__swsetup_r+0xb8>
 8001e94:	20000004 	.word	0x20000004
 8001e98:	08002c9c 	.word	0x08002c9c
 8001e9c:	08002cbc 	.word	0x08002cbc
 8001ea0:	08002c7c 	.word	0x08002c7c

08001ea4 <__sflush_r>:
 8001ea4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001ea6:	898a      	ldrh	r2, [r1, #12]
 8001ea8:	0005      	movs	r5, r0
 8001eaa:	000c      	movs	r4, r1
 8001eac:	0713      	lsls	r3, r2, #28
 8001eae:	d460      	bmi.n	8001f72 <__sflush_r+0xce>
 8001eb0:	684b      	ldr	r3, [r1, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	dc04      	bgt.n	8001ec0 <__sflush_r+0x1c>
 8001eb6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	dc01      	bgt.n	8001ec0 <__sflush_r+0x1c>
 8001ebc:	2000      	movs	r0, #0
 8001ebe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001ec0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8001ec2:	2f00      	cmp	r7, #0
 8001ec4:	d0fa      	beq.n	8001ebc <__sflush_r+0x18>
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	682e      	ldr	r6, [r5, #0]
 8001eca:	602b      	str	r3, [r5, #0]
 8001ecc:	2380      	movs	r3, #128	; 0x80
 8001ece:	015b      	lsls	r3, r3, #5
 8001ed0:	401a      	ands	r2, r3
 8001ed2:	d034      	beq.n	8001f3e <__sflush_r+0x9a>
 8001ed4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001ed6:	89a3      	ldrh	r3, [r4, #12]
 8001ed8:	075b      	lsls	r3, r3, #29
 8001eda:	d506      	bpl.n	8001eea <__sflush_r+0x46>
 8001edc:	6863      	ldr	r3, [r4, #4]
 8001ede:	1ac0      	subs	r0, r0, r3
 8001ee0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <__sflush_r+0x46>
 8001ee6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ee8:	1ac0      	subs	r0, r0, r3
 8001eea:	0002      	movs	r2, r0
 8001eec:	6a21      	ldr	r1, [r4, #32]
 8001eee:	2300      	movs	r3, #0
 8001ef0:	0028      	movs	r0, r5
 8001ef2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8001ef4:	47b8      	blx	r7
 8001ef6:	89a1      	ldrh	r1, [r4, #12]
 8001ef8:	1c43      	adds	r3, r0, #1
 8001efa:	d106      	bne.n	8001f0a <__sflush_r+0x66>
 8001efc:	682b      	ldr	r3, [r5, #0]
 8001efe:	2b1d      	cmp	r3, #29
 8001f00:	d831      	bhi.n	8001f66 <__sflush_r+0xc2>
 8001f02:	4a2c      	ldr	r2, [pc, #176]	; (8001fb4 <__sflush_r+0x110>)
 8001f04:	40da      	lsrs	r2, r3
 8001f06:	07d3      	lsls	r3, r2, #31
 8001f08:	d52d      	bpl.n	8001f66 <__sflush_r+0xc2>
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	6063      	str	r3, [r4, #4]
 8001f0e:	6923      	ldr	r3, [r4, #16]
 8001f10:	6023      	str	r3, [r4, #0]
 8001f12:	04cb      	lsls	r3, r1, #19
 8001f14:	d505      	bpl.n	8001f22 <__sflush_r+0x7e>
 8001f16:	1c43      	adds	r3, r0, #1
 8001f18:	d102      	bne.n	8001f20 <__sflush_r+0x7c>
 8001f1a:	682b      	ldr	r3, [r5, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d100      	bne.n	8001f22 <__sflush_r+0x7e>
 8001f20:	6560      	str	r0, [r4, #84]	; 0x54
 8001f22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001f24:	602e      	str	r6, [r5, #0]
 8001f26:	2900      	cmp	r1, #0
 8001f28:	d0c8      	beq.n	8001ebc <__sflush_r+0x18>
 8001f2a:	0023      	movs	r3, r4
 8001f2c:	3344      	adds	r3, #68	; 0x44
 8001f2e:	4299      	cmp	r1, r3
 8001f30:	d002      	beq.n	8001f38 <__sflush_r+0x94>
 8001f32:	0028      	movs	r0, r5
 8001f34:	f000 f9b0 	bl	8002298 <_free_r>
 8001f38:	2000      	movs	r0, #0
 8001f3a:	6360      	str	r0, [r4, #52]	; 0x34
 8001f3c:	e7bf      	b.n	8001ebe <__sflush_r+0x1a>
 8001f3e:	2301      	movs	r3, #1
 8001f40:	6a21      	ldr	r1, [r4, #32]
 8001f42:	0028      	movs	r0, r5
 8001f44:	47b8      	blx	r7
 8001f46:	1c43      	adds	r3, r0, #1
 8001f48:	d1c5      	bne.n	8001ed6 <__sflush_r+0x32>
 8001f4a:	682b      	ldr	r3, [r5, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d0c2      	beq.n	8001ed6 <__sflush_r+0x32>
 8001f50:	2b1d      	cmp	r3, #29
 8001f52:	d001      	beq.n	8001f58 <__sflush_r+0xb4>
 8001f54:	2b16      	cmp	r3, #22
 8001f56:	d101      	bne.n	8001f5c <__sflush_r+0xb8>
 8001f58:	602e      	str	r6, [r5, #0]
 8001f5a:	e7af      	b.n	8001ebc <__sflush_r+0x18>
 8001f5c:	2340      	movs	r3, #64	; 0x40
 8001f5e:	89a2      	ldrh	r2, [r4, #12]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	81a3      	strh	r3, [r4, #12]
 8001f64:	e7ab      	b.n	8001ebe <__sflush_r+0x1a>
 8001f66:	2340      	movs	r3, #64	; 0x40
 8001f68:	430b      	orrs	r3, r1
 8001f6a:	2001      	movs	r0, #1
 8001f6c:	81a3      	strh	r3, [r4, #12]
 8001f6e:	4240      	negs	r0, r0
 8001f70:	e7a5      	b.n	8001ebe <__sflush_r+0x1a>
 8001f72:	690f      	ldr	r7, [r1, #16]
 8001f74:	2f00      	cmp	r7, #0
 8001f76:	d0a1      	beq.n	8001ebc <__sflush_r+0x18>
 8001f78:	680b      	ldr	r3, [r1, #0]
 8001f7a:	600f      	str	r7, [r1, #0]
 8001f7c:	1bdb      	subs	r3, r3, r7
 8001f7e:	9301      	str	r3, [sp, #4]
 8001f80:	2300      	movs	r3, #0
 8001f82:	0792      	lsls	r2, r2, #30
 8001f84:	d100      	bne.n	8001f88 <__sflush_r+0xe4>
 8001f86:	694b      	ldr	r3, [r1, #20]
 8001f88:	60a3      	str	r3, [r4, #8]
 8001f8a:	9b01      	ldr	r3, [sp, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	dc00      	bgt.n	8001f92 <__sflush_r+0xee>
 8001f90:	e794      	b.n	8001ebc <__sflush_r+0x18>
 8001f92:	9b01      	ldr	r3, [sp, #4]
 8001f94:	003a      	movs	r2, r7
 8001f96:	6a21      	ldr	r1, [r4, #32]
 8001f98:	0028      	movs	r0, r5
 8001f9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001f9c:	47b0      	blx	r6
 8001f9e:	2800      	cmp	r0, #0
 8001fa0:	dc03      	bgt.n	8001faa <__sflush_r+0x106>
 8001fa2:	2340      	movs	r3, #64	; 0x40
 8001fa4:	89a2      	ldrh	r2, [r4, #12]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	e7df      	b.n	8001f6a <__sflush_r+0xc6>
 8001faa:	9b01      	ldr	r3, [sp, #4]
 8001fac:	183f      	adds	r7, r7, r0
 8001fae:	1a1b      	subs	r3, r3, r0
 8001fb0:	9301      	str	r3, [sp, #4]
 8001fb2:	e7ea      	b.n	8001f8a <__sflush_r+0xe6>
 8001fb4:	20400001 	.word	0x20400001

08001fb8 <_fflush_r>:
 8001fb8:	690b      	ldr	r3, [r1, #16]
 8001fba:	b570      	push	{r4, r5, r6, lr}
 8001fbc:	0005      	movs	r5, r0
 8001fbe:	000c      	movs	r4, r1
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <_fflush_r+0x10>
 8001fc4:	2000      	movs	r0, #0
 8001fc6:	bd70      	pop	{r4, r5, r6, pc}
 8001fc8:	2800      	cmp	r0, #0
 8001fca:	d004      	beq.n	8001fd6 <_fflush_r+0x1e>
 8001fcc:	6983      	ldr	r3, [r0, #24]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <_fflush_r+0x1e>
 8001fd2:	f000 f85f 	bl	8002094 <__sinit>
 8001fd6:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <_fflush_r+0x4c>)
 8001fd8:	429c      	cmp	r4, r3
 8001fda:	d109      	bne.n	8001ff0 <_fflush_r+0x38>
 8001fdc:	686c      	ldr	r4, [r5, #4]
 8001fde:	220c      	movs	r2, #12
 8001fe0:	5ea3      	ldrsh	r3, [r4, r2]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0ee      	beq.n	8001fc4 <_fflush_r+0xc>
 8001fe6:	0021      	movs	r1, r4
 8001fe8:	0028      	movs	r0, r5
 8001fea:	f7ff ff5b 	bl	8001ea4 <__sflush_r>
 8001fee:	e7ea      	b.n	8001fc6 <_fflush_r+0xe>
 8001ff0:	4b05      	ldr	r3, [pc, #20]	; (8002008 <_fflush_r+0x50>)
 8001ff2:	429c      	cmp	r4, r3
 8001ff4:	d101      	bne.n	8001ffa <_fflush_r+0x42>
 8001ff6:	68ac      	ldr	r4, [r5, #8]
 8001ff8:	e7f1      	b.n	8001fde <_fflush_r+0x26>
 8001ffa:	4b04      	ldr	r3, [pc, #16]	; (800200c <_fflush_r+0x54>)
 8001ffc:	429c      	cmp	r4, r3
 8001ffe:	d1ee      	bne.n	8001fde <_fflush_r+0x26>
 8002000:	68ec      	ldr	r4, [r5, #12]
 8002002:	e7ec      	b.n	8001fde <_fflush_r+0x26>
 8002004:	08002c9c 	.word	0x08002c9c
 8002008:	08002cbc 	.word	0x08002cbc
 800200c:	08002c7c 	.word	0x08002c7c

08002010 <_cleanup_r>:
 8002010:	b510      	push	{r4, lr}
 8002012:	4902      	ldr	r1, [pc, #8]	; (800201c <_cleanup_r+0xc>)
 8002014:	f000 f8b2 	bl	800217c <_fwalk_reent>
 8002018:	bd10      	pop	{r4, pc}
 800201a:	46c0      	nop			; (mov r8, r8)
 800201c:	08001fb9 	.word	0x08001fb9

08002020 <std.isra.0>:
 8002020:	2300      	movs	r3, #0
 8002022:	b510      	push	{r4, lr}
 8002024:	0004      	movs	r4, r0
 8002026:	6003      	str	r3, [r0, #0]
 8002028:	6043      	str	r3, [r0, #4]
 800202a:	6083      	str	r3, [r0, #8]
 800202c:	8181      	strh	r1, [r0, #12]
 800202e:	6643      	str	r3, [r0, #100]	; 0x64
 8002030:	81c2      	strh	r2, [r0, #14]
 8002032:	6103      	str	r3, [r0, #16]
 8002034:	6143      	str	r3, [r0, #20]
 8002036:	6183      	str	r3, [r0, #24]
 8002038:	0019      	movs	r1, r3
 800203a:	2208      	movs	r2, #8
 800203c:	305c      	adds	r0, #92	; 0x5c
 800203e:	f7ff fdd8 	bl	8001bf2 <memset>
 8002042:	4b05      	ldr	r3, [pc, #20]	; (8002058 <std.isra.0+0x38>)
 8002044:	6224      	str	r4, [r4, #32]
 8002046:	6263      	str	r3, [r4, #36]	; 0x24
 8002048:	4b04      	ldr	r3, [pc, #16]	; (800205c <std.isra.0+0x3c>)
 800204a:	62a3      	str	r3, [r4, #40]	; 0x28
 800204c:	4b04      	ldr	r3, [pc, #16]	; (8002060 <std.isra.0+0x40>)
 800204e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002050:	4b04      	ldr	r3, [pc, #16]	; (8002064 <std.isra.0+0x44>)
 8002052:	6323      	str	r3, [r4, #48]	; 0x30
 8002054:	bd10      	pop	{r4, pc}
 8002056:	46c0      	nop			; (mov r8, r8)
 8002058:	080029a5 	.word	0x080029a5
 800205c:	080029cd 	.word	0x080029cd
 8002060:	08002a05 	.word	0x08002a05
 8002064:	08002a31 	.word	0x08002a31

08002068 <__sfmoreglue>:
 8002068:	b570      	push	{r4, r5, r6, lr}
 800206a:	2568      	movs	r5, #104	; 0x68
 800206c:	1e4a      	subs	r2, r1, #1
 800206e:	4355      	muls	r5, r2
 8002070:	000e      	movs	r6, r1
 8002072:	0029      	movs	r1, r5
 8002074:	3174      	adds	r1, #116	; 0x74
 8002076:	f000 f959 	bl	800232c <_malloc_r>
 800207a:	1e04      	subs	r4, r0, #0
 800207c:	d008      	beq.n	8002090 <__sfmoreglue+0x28>
 800207e:	2100      	movs	r1, #0
 8002080:	002a      	movs	r2, r5
 8002082:	6001      	str	r1, [r0, #0]
 8002084:	6046      	str	r6, [r0, #4]
 8002086:	300c      	adds	r0, #12
 8002088:	60a0      	str	r0, [r4, #8]
 800208a:	3268      	adds	r2, #104	; 0x68
 800208c:	f7ff fdb1 	bl	8001bf2 <memset>
 8002090:	0020      	movs	r0, r4
 8002092:	bd70      	pop	{r4, r5, r6, pc}

08002094 <__sinit>:
 8002094:	6983      	ldr	r3, [r0, #24]
 8002096:	b513      	push	{r0, r1, r4, lr}
 8002098:	0004      	movs	r4, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d128      	bne.n	80020f0 <__sinit+0x5c>
 800209e:	6483      	str	r3, [r0, #72]	; 0x48
 80020a0:	64c3      	str	r3, [r0, #76]	; 0x4c
 80020a2:	6503      	str	r3, [r0, #80]	; 0x50
 80020a4:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <__sinit+0x60>)
 80020a6:	4a14      	ldr	r2, [pc, #80]	; (80020f8 <__sinit+0x64>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	6282      	str	r2, [r0, #40]	; 0x28
 80020ac:	9301      	str	r3, [sp, #4]
 80020ae:	4298      	cmp	r0, r3
 80020b0:	d101      	bne.n	80020b6 <__sinit+0x22>
 80020b2:	2301      	movs	r3, #1
 80020b4:	6183      	str	r3, [r0, #24]
 80020b6:	0020      	movs	r0, r4
 80020b8:	f000 f820 	bl	80020fc <__sfp>
 80020bc:	6060      	str	r0, [r4, #4]
 80020be:	0020      	movs	r0, r4
 80020c0:	f000 f81c 	bl	80020fc <__sfp>
 80020c4:	60a0      	str	r0, [r4, #8]
 80020c6:	0020      	movs	r0, r4
 80020c8:	f000 f818 	bl	80020fc <__sfp>
 80020cc:	2200      	movs	r2, #0
 80020ce:	60e0      	str	r0, [r4, #12]
 80020d0:	2104      	movs	r1, #4
 80020d2:	6860      	ldr	r0, [r4, #4]
 80020d4:	f7ff ffa4 	bl	8002020 <std.isra.0>
 80020d8:	2201      	movs	r2, #1
 80020da:	2109      	movs	r1, #9
 80020dc:	68a0      	ldr	r0, [r4, #8]
 80020de:	f7ff ff9f 	bl	8002020 <std.isra.0>
 80020e2:	2202      	movs	r2, #2
 80020e4:	2112      	movs	r1, #18
 80020e6:	68e0      	ldr	r0, [r4, #12]
 80020e8:	f7ff ff9a 	bl	8002020 <std.isra.0>
 80020ec:	2301      	movs	r3, #1
 80020ee:	61a3      	str	r3, [r4, #24]
 80020f0:	bd13      	pop	{r0, r1, r4, pc}
 80020f2:	46c0      	nop			; (mov r8, r8)
 80020f4:	08002cdc 	.word	0x08002cdc
 80020f8:	08002011 	.word	0x08002011

080020fc <__sfp>:
 80020fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020fe:	4b1e      	ldr	r3, [pc, #120]	; (8002178 <__sfp+0x7c>)
 8002100:	0007      	movs	r7, r0
 8002102:	681e      	ldr	r6, [r3, #0]
 8002104:	69b3      	ldr	r3, [r6, #24]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d102      	bne.n	8002110 <__sfp+0x14>
 800210a:	0030      	movs	r0, r6
 800210c:	f7ff ffc2 	bl	8002094 <__sinit>
 8002110:	3648      	adds	r6, #72	; 0x48
 8002112:	68b4      	ldr	r4, [r6, #8]
 8002114:	6873      	ldr	r3, [r6, #4]
 8002116:	3b01      	subs	r3, #1
 8002118:	d504      	bpl.n	8002124 <__sfp+0x28>
 800211a:	6833      	ldr	r3, [r6, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d007      	beq.n	8002130 <__sfp+0x34>
 8002120:	6836      	ldr	r6, [r6, #0]
 8002122:	e7f6      	b.n	8002112 <__sfp+0x16>
 8002124:	220c      	movs	r2, #12
 8002126:	5ea5      	ldrsh	r5, [r4, r2]
 8002128:	2d00      	cmp	r5, #0
 800212a:	d00d      	beq.n	8002148 <__sfp+0x4c>
 800212c:	3468      	adds	r4, #104	; 0x68
 800212e:	e7f2      	b.n	8002116 <__sfp+0x1a>
 8002130:	2104      	movs	r1, #4
 8002132:	0038      	movs	r0, r7
 8002134:	f7ff ff98 	bl	8002068 <__sfmoreglue>
 8002138:	6030      	str	r0, [r6, #0]
 800213a:	2800      	cmp	r0, #0
 800213c:	d1f0      	bne.n	8002120 <__sfp+0x24>
 800213e:	230c      	movs	r3, #12
 8002140:	0004      	movs	r4, r0
 8002142:	603b      	str	r3, [r7, #0]
 8002144:	0020      	movs	r0, r4
 8002146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002148:	2301      	movs	r3, #1
 800214a:	0020      	movs	r0, r4
 800214c:	425b      	negs	r3, r3
 800214e:	81e3      	strh	r3, [r4, #14]
 8002150:	3302      	adds	r3, #2
 8002152:	81a3      	strh	r3, [r4, #12]
 8002154:	6665      	str	r5, [r4, #100]	; 0x64
 8002156:	6025      	str	r5, [r4, #0]
 8002158:	60a5      	str	r5, [r4, #8]
 800215a:	6065      	str	r5, [r4, #4]
 800215c:	6125      	str	r5, [r4, #16]
 800215e:	6165      	str	r5, [r4, #20]
 8002160:	61a5      	str	r5, [r4, #24]
 8002162:	2208      	movs	r2, #8
 8002164:	0029      	movs	r1, r5
 8002166:	305c      	adds	r0, #92	; 0x5c
 8002168:	f7ff fd43 	bl	8001bf2 <memset>
 800216c:	6365      	str	r5, [r4, #52]	; 0x34
 800216e:	63a5      	str	r5, [r4, #56]	; 0x38
 8002170:	64a5      	str	r5, [r4, #72]	; 0x48
 8002172:	64e5      	str	r5, [r4, #76]	; 0x4c
 8002174:	e7e6      	b.n	8002144 <__sfp+0x48>
 8002176:	46c0      	nop			; (mov r8, r8)
 8002178:	08002cdc 	.word	0x08002cdc

0800217c <_fwalk_reent>:
 800217c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800217e:	0004      	movs	r4, r0
 8002180:	0007      	movs	r7, r0
 8002182:	2600      	movs	r6, #0
 8002184:	9101      	str	r1, [sp, #4]
 8002186:	3448      	adds	r4, #72	; 0x48
 8002188:	2c00      	cmp	r4, #0
 800218a:	d101      	bne.n	8002190 <_fwalk_reent+0x14>
 800218c:	0030      	movs	r0, r6
 800218e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002190:	6863      	ldr	r3, [r4, #4]
 8002192:	68a5      	ldr	r5, [r4, #8]
 8002194:	9300      	str	r3, [sp, #0]
 8002196:	9b00      	ldr	r3, [sp, #0]
 8002198:	3b01      	subs	r3, #1
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	d501      	bpl.n	80021a2 <_fwalk_reent+0x26>
 800219e:	6824      	ldr	r4, [r4, #0]
 80021a0:	e7f2      	b.n	8002188 <_fwalk_reent+0xc>
 80021a2:	89ab      	ldrh	r3, [r5, #12]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d908      	bls.n	80021ba <_fwalk_reent+0x3e>
 80021a8:	220e      	movs	r2, #14
 80021aa:	5eab      	ldrsh	r3, [r5, r2]
 80021ac:	3301      	adds	r3, #1
 80021ae:	d004      	beq.n	80021ba <_fwalk_reent+0x3e>
 80021b0:	0029      	movs	r1, r5
 80021b2:	0038      	movs	r0, r7
 80021b4:	9b01      	ldr	r3, [sp, #4]
 80021b6:	4798      	blx	r3
 80021b8:	4306      	orrs	r6, r0
 80021ba:	3568      	adds	r5, #104	; 0x68
 80021bc:	e7eb      	b.n	8002196 <_fwalk_reent+0x1a>
	...

080021c0 <__swhatbuf_r>:
 80021c0:	b570      	push	{r4, r5, r6, lr}
 80021c2:	000e      	movs	r6, r1
 80021c4:	001d      	movs	r5, r3
 80021c6:	230e      	movs	r3, #14
 80021c8:	5ec9      	ldrsh	r1, [r1, r3]
 80021ca:	b090      	sub	sp, #64	; 0x40
 80021cc:	0014      	movs	r4, r2
 80021ce:	2900      	cmp	r1, #0
 80021d0:	da07      	bge.n	80021e2 <__swhatbuf_r+0x22>
 80021d2:	2300      	movs	r3, #0
 80021d4:	602b      	str	r3, [r5, #0]
 80021d6:	89b3      	ldrh	r3, [r6, #12]
 80021d8:	061b      	lsls	r3, r3, #24
 80021da:	d411      	bmi.n	8002200 <__swhatbuf_r+0x40>
 80021dc:	2380      	movs	r3, #128	; 0x80
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	e00f      	b.n	8002202 <__swhatbuf_r+0x42>
 80021e2:	aa01      	add	r2, sp, #4
 80021e4:	f000 fc50 	bl	8002a88 <_fstat_r>
 80021e8:	2800      	cmp	r0, #0
 80021ea:	dbf2      	blt.n	80021d2 <__swhatbuf_r+0x12>
 80021ec:	22f0      	movs	r2, #240	; 0xf0
 80021ee:	9b02      	ldr	r3, [sp, #8]
 80021f0:	0212      	lsls	r2, r2, #8
 80021f2:	4013      	ands	r3, r2
 80021f4:	4a05      	ldr	r2, [pc, #20]	; (800220c <__swhatbuf_r+0x4c>)
 80021f6:	189b      	adds	r3, r3, r2
 80021f8:	425a      	negs	r2, r3
 80021fa:	4153      	adcs	r3, r2
 80021fc:	602b      	str	r3, [r5, #0]
 80021fe:	e7ed      	b.n	80021dc <__swhatbuf_r+0x1c>
 8002200:	2340      	movs	r3, #64	; 0x40
 8002202:	2000      	movs	r0, #0
 8002204:	6023      	str	r3, [r4, #0]
 8002206:	b010      	add	sp, #64	; 0x40
 8002208:	bd70      	pop	{r4, r5, r6, pc}
 800220a:	46c0      	nop			; (mov r8, r8)
 800220c:	ffffe000 	.word	0xffffe000

08002210 <__smakebuf_r>:
 8002210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002212:	2602      	movs	r6, #2
 8002214:	898b      	ldrh	r3, [r1, #12]
 8002216:	0005      	movs	r5, r0
 8002218:	000c      	movs	r4, r1
 800221a:	4233      	tst	r3, r6
 800221c:	d006      	beq.n	800222c <__smakebuf_r+0x1c>
 800221e:	0023      	movs	r3, r4
 8002220:	3347      	adds	r3, #71	; 0x47
 8002222:	6023      	str	r3, [r4, #0]
 8002224:	6123      	str	r3, [r4, #16]
 8002226:	2301      	movs	r3, #1
 8002228:	6163      	str	r3, [r4, #20]
 800222a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800222c:	ab01      	add	r3, sp, #4
 800222e:	466a      	mov	r2, sp
 8002230:	f7ff ffc6 	bl	80021c0 <__swhatbuf_r>
 8002234:	9900      	ldr	r1, [sp, #0]
 8002236:	0007      	movs	r7, r0
 8002238:	0028      	movs	r0, r5
 800223a:	f000 f877 	bl	800232c <_malloc_r>
 800223e:	2800      	cmp	r0, #0
 8002240:	d108      	bne.n	8002254 <__smakebuf_r+0x44>
 8002242:	220c      	movs	r2, #12
 8002244:	5ea3      	ldrsh	r3, [r4, r2]
 8002246:	059a      	lsls	r2, r3, #22
 8002248:	d4ef      	bmi.n	800222a <__smakebuf_r+0x1a>
 800224a:	2203      	movs	r2, #3
 800224c:	4393      	bics	r3, r2
 800224e:	431e      	orrs	r6, r3
 8002250:	81a6      	strh	r6, [r4, #12]
 8002252:	e7e4      	b.n	800221e <__smakebuf_r+0xe>
 8002254:	4b0f      	ldr	r3, [pc, #60]	; (8002294 <__smakebuf_r+0x84>)
 8002256:	62ab      	str	r3, [r5, #40]	; 0x28
 8002258:	2380      	movs	r3, #128	; 0x80
 800225a:	89a2      	ldrh	r2, [r4, #12]
 800225c:	6020      	str	r0, [r4, #0]
 800225e:	4313      	orrs	r3, r2
 8002260:	81a3      	strh	r3, [r4, #12]
 8002262:	9b00      	ldr	r3, [sp, #0]
 8002264:	6120      	str	r0, [r4, #16]
 8002266:	6163      	str	r3, [r4, #20]
 8002268:	9b01      	ldr	r3, [sp, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00d      	beq.n	800228a <__smakebuf_r+0x7a>
 800226e:	230e      	movs	r3, #14
 8002270:	5ee1      	ldrsh	r1, [r4, r3]
 8002272:	0028      	movs	r0, r5
 8002274:	f000 fc1a 	bl	8002aac <_isatty_r>
 8002278:	2800      	cmp	r0, #0
 800227a:	d006      	beq.n	800228a <__smakebuf_r+0x7a>
 800227c:	2203      	movs	r2, #3
 800227e:	89a3      	ldrh	r3, [r4, #12]
 8002280:	4393      	bics	r3, r2
 8002282:	001a      	movs	r2, r3
 8002284:	2301      	movs	r3, #1
 8002286:	4313      	orrs	r3, r2
 8002288:	81a3      	strh	r3, [r4, #12]
 800228a:	89a0      	ldrh	r0, [r4, #12]
 800228c:	4338      	orrs	r0, r7
 800228e:	81a0      	strh	r0, [r4, #12]
 8002290:	e7cb      	b.n	800222a <__smakebuf_r+0x1a>
 8002292:	46c0      	nop			; (mov r8, r8)
 8002294:	08002011 	.word	0x08002011

08002298 <_free_r>:
 8002298:	b570      	push	{r4, r5, r6, lr}
 800229a:	0005      	movs	r5, r0
 800229c:	2900      	cmp	r1, #0
 800229e:	d010      	beq.n	80022c2 <_free_r+0x2a>
 80022a0:	1f0c      	subs	r4, r1, #4
 80022a2:	6823      	ldr	r3, [r4, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	da00      	bge.n	80022aa <_free_r+0x12>
 80022a8:	18e4      	adds	r4, r4, r3
 80022aa:	0028      	movs	r0, r5
 80022ac:	f000 fc2f 	bl	8002b0e <__malloc_lock>
 80022b0:	4a1d      	ldr	r2, [pc, #116]	; (8002328 <_free_r+0x90>)
 80022b2:	6813      	ldr	r3, [r2, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d105      	bne.n	80022c4 <_free_r+0x2c>
 80022b8:	6063      	str	r3, [r4, #4]
 80022ba:	6014      	str	r4, [r2, #0]
 80022bc:	0028      	movs	r0, r5
 80022be:	f000 fc27 	bl	8002b10 <__malloc_unlock>
 80022c2:	bd70      	pop	{r4, r5, r6, pc}
 80022c4:	42a3      	cmp	r3, r4
 80022c6:	d909      	bls.n	80022dc <_free_r+0x44>
 80022c8:	6821      	ldr	r1, [r4, #0]
 80022ca:	1860      	adds	r0, r4, r1
 80022cc:	4283      	cmp	r3, r0
 80022ce:	d1f3      	bne.n	80022b8 <_free_r+0x20>
 80022d0:	6818      	ldr	r0, [r3, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	1841      	adds	r1, r0, r1
 80022d6:	6021      	str	r1, [r4, #0]
 80022d8:	e7ee      	b.n	80022b8 <_free_r+0x20>
 80022da:	0013      	movs	r3, r2
 80022dc:	685a      	ldr	r2, [r3, #4]
 80022de:	2a00      	cmp	r2, #0
 80022e0:	d001      	beq.n	80022e6 <_free_r+0x4e>
 80022e2:	42a2      	cmp	r2, r4
 80022e4:	d9f9      	bls.n	80022da <_free_r+0x42>
 80022e6:	6819      	ldr	r1, [r3, #0]
 80022e8:	1858      	adds	r0, r3, r1
 80022ea:	42a0      	cmp	r0, r4
 80022ec:	d10b      	bne.n	8002306 <_free_r+0x6e>
 80022ee:	6820      	ldr	r0, [r4, #0]
 80022f0:	1809      	adds	r1, r1, r0
 80022f2:	1858      	adds	r0, r3, r1
 80022f4:	6019      	str	r1, [r3, #0]
 80022f6:	4282      	cmp	r2, r0
 80022f8:	d1e0      	bne.n	80022bc <_free_r+0x24>
 80022fa:	6810      	ldr	r0, [r2, #0]
 80022fc:	6852      	ldr	r2, [r2, #4]
 80022fe:	1841      	adds	r1, r0, r1
 8002300:	6019      	str	r1, [r3, #0]
 8002302:	605a      	str	r2, [r3, #4]
 8002304:	e7da      	b.n	80022bc <_free_r+0x24>
 8002306:	42a0      	cmp	r0, r4
 8002308:	d902      	bls.n	8002310 <_free_r+0x78>
 800230a:	230c      	movs	r3, #12
 800230c:	602b      	str	r3, [r5, #0]
 800230e:	e7d5      	b.n	80022bc <_free_r+0x24>
 8002310:	6821      	ldr	r1, [r4, #0]
 8002312:	1860      	adds	r0, r4, r1
 8002314:	4282      	cmp	r2, r0
 8002316:	d103      	bne.n	8002320 <_free_r+0x88>
 8002318:	6810      	ldr	r0, [r2, #0]
 800231a:	6852      	ldr	r2, [r2, #4]
 800231c:	1841      	adds	r1, r0, r1
 800231e:	6021      	str	r1, [r4, #0]
 8002320:	6062      	str	r2, [r4, #4]
 8002322:	605c      	str	r4, [r3, #4]
 8002324:	e7ca      	b.n	80022bc <_free_r+0x24>
 8002326:	46c0      	nop			; (mov r8, r8)
 8002328:	20000084 	.word	0x20000084

0800232c <_malloc_r>:
 800232c:	2303      	movs	r3, #3
 800232e:	b570      	push	{r4, r5, r6, lr}
 8002330:	1ccd      	adds	r5, r1, #3
 8002332:	439d      	bics	r5, r3
 8002334:	3508      	adds	r5, #8
 8002336:	0006      	movs	r6, r0
 8002338:	2d0c      	cmp	r5, #12
 800233a:	d21e      	bcs.n	800237a <_malloc_r+0x4e>
 800233c:	250c      	movs	r5, #12
 800233e:	42a9      	cmp	r1, r5
 8002340:	d81d      	bhi.n	800237e <_malloc_r+0x52>
 8002342:	0030      	movs	r0, r6
 8002344:	f000 fbe3 	bl	8002b0e <__malloc_lock>
 8002348:	4a25      	ldr	r2, [pc, #148]	; (80023e0 <_malloc_r+0xb4>)
 800234a:	6814      	ldr	r4, [r2, #0]
 800234c:	0021      	movs	r1, r4
 800234e:	2900      	cmp	r1, #0
 8002350:	d119      	bne.n	8002386 <_malloc_r+0x5a>
 8002352:	4c24      	ldr	r4, [pc, #144]	; (80023e4 <_malloc_r+0xb8>)
 8002354:	6823      	ldr	r3, [r4, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d103      	bne.n	8002362 <_malloc_r+0x36>
 800235a:	0030      	movs	r0, r6
 800235c:	f000 fb10 	bl	8002980 <_sbrk_r>
 8002360:	6020      	str	r0, [r4, #0]
 8002362:	0029      	movs	r1, r5
 8002364:	0030      	movs	r0, r6
 8002366:	f000 fb0b 	bl	8002980 <_sbrk_r>
 800236a:	1c43      	adds	r3, r0, #1
 800236c:	d12c      	bne.n	80023c8 <_malloc_r+0x9c>
 800236e:	230c      	movs	r3, #12
 8002370:	0030      	movs	r0, r6
 8002372:	6033      	str	r3, [r6, #0]
 8002374:	f000 fbcc 	bl	8002b10 <__malloc_unlock>
 8002378:	e003      	b.n	8002382 <_malloc_r+0x56>
 800237a:	2d00      	cmp	r5, #0
 800237c:	dadf      	bge.n	800233e <_malloc_r+0x12>
 800237e:	230c      	movs	r3, #12
 8002380:	6033      	str	r3, [r6, #0]
 8002382:	2000      	movs	r0, #0
 8002384:	bd70      	pop	{r4, r5, r6, pc}
 8002386:	680b      	ldr	r3, [r1, #0]
 8002388:	1b5b      	subs	r3, r3, r5
 800238a:	d41a      	bmi.n	80023c2 <_malloc_r+0x96>
 800238c:	2b0b      	cmp	r3, #11
 800238e:	d903      	bls.n	8002398 <_malloc_r+0x6c>
 8002390:	600b      	str	r3, [r1, #0]
 8002392:	18cc      	adds	r4, r1, r3
 8002394:	6025      	str	r5, [r4, #0]
 8002396:	e003      	b.n	80023a0 <_malloc_r+0x74>
 8002398:	428c      	cmp	r4, r1
 800239a:	d10e      	bne.n	80023ba <_malloc_r+0x8e>
 800239c:	6863      	ldr	r3, [r4, #4]
 800239e:	6013      	str	r3, [r2, #0]
 80023a0:	0030      	movs	r0, r6
 80023a2:	f000 fbb5 	bl	8002b10 <__malloc_unlock>
 80023a6:	0020      	movs	r0, r4
 80023a8:	2207      	movs	r2, #7
 80023aa:	300b      	adds	r0, #11
 80023ac:	1d23      	adds	r3, r4, #4
 80023ae:	4390      	bics	r0, r2
 80023b0:	1ac3      	subs	r3, r0, r3
 80023b2:	d0e7      	beq.n	8002384 <_malloc_r+0x58>
 80023b4:	425a      	negs	r2, r3
 80023b6:	50e2      	str	r2, [r4, r3]
 80023b8:	e7e4      	b.n	8002384 <_malloc_r+0x58>
 80023ba:	684b      	ldr	r3, [r1, #4]
 80023bc:	6063      	str	r3, [r4, #4]
 80023be:	000c      	movs	r4, r1
 80023c0:	e7ee      	b.n	80023a0 <_malloc_r+0x74>
 80023c2:	000c      	movs	r4, r1
 80023c4:	6849      	ldr	r1, [r1, #4]
 80023c6:	e7c2      	b.n	800234e <_malloc_r+0x22>
 80023c8:	2303      	movs	r3, #3
 80023ca:	1cc4      	adds	r4, r0, #3
 80023cc:	439c      	bics	r4, r3
 80023ce:	42a0      	cmp	r0, r4
 80023d0:	d0e0      	beq.n	8002394 <_malloc_r+0x68>
 80023d2:	1a21      	subs	r1, r4, r0
 80023d4:	0030      	movs	r0, r6
 80023d6:	f000 fad3 	bl	8002980 <_sbrk_r>
 80023da:	1c43      	adds	r3, r0, #1
 80023dc:	d1da      	bne.n	8002394 <_malloc_r+0x68>
 80023de:	e7c6      	b.n	800236e <_malloc_r+0x42>
 80023e0:	20000084 	.word	0x20000084
 80023e4:	20000088 	.word	0x20000088

080023e8 <__sfputc_r>:
 80023e8:	6893      	ldr	r3, [r2, #8]
 80023ea:	b510      	push	{r4, lr}
 80023ec:	3b01      	subs	r3, #1
 80023ee:	6093      	str	r3, [r2, #8]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	da05      	bge.n	8002400 <__sfputc_r+0x18>
 80023f4:	6994      	ldr	r4, [r2, #24]
 80023f6:	42a3      	cmp	r3, r4
 80023f8:	db08      	blt.n	800240c <__sfputc_r+0x24>
 80023fa:	b2cb      	uxtb	r3, r1
 80023fc:	2b0a      	cmp	r3, #10
 80023fe:	d005      	beq.n	800240c <__sfputc_r+0x24>
 8002400:	6813      	ldr	r3, [r2, #0]
 8002402:	1c58      	adds	r0, r3, #1
 8002404:	6010      	str	r0, [r2, #0]
 8002406:	7019      	strb	r1, [r3, #0]
 8002408:	b2c8      	uxtb	r0, r1
 800240a:	bd10      	pop	{r4, pc}
 800240c:	f7ff fc7e 	bl	8001d0c <__swbuf_r>
 8002410:	e7fb      	b.n	800240a <__sfputc_r+0x22>

08002412 <__sfputs_r>:
 8002412:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002414:	0006      	movs	r6, r0
 8002416:	000f      	movs	r7, r1
 8002418:	0014      	movs	r4, r2
 800241a:	18d5      	adds	r5, r2, r3
 800241c:	42ac      	cmp	r4, r5
 800241e:	d101      	bne.n	8002424 <__sfputs_r+0x12>
 8002420:	2000      	movs	r0, #0
 8002422:	e007      	b.n	8002434 <__sfputs_r+0x22>
 8002424:	7821      	ldrb	r1, [r4, #0]
 8002426:	003a      	movs	r2, r7
 8002428:	0030      	movs	r0, r6
 800242a:	f7ff ffdd 	bl	80023e8 <__sfputc_r>
 800242e:	3401      	adds	r4, #1
 8002430:	1c43      	adds	r3, r0, #1
 8002432:	d1f3      	bne.n	800241c <__sfputs_r+0xa>
 8002434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002438 <_vfiprintf_r>:
 8002438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800243a:	b09f      	sub	sp, #124	; 0x7c
 800243c:	0006      	movs	r6, r0
 800243e:	000f      	movs	r7, r1
 8002440:	0014      	movs	r4, r2
 8002442:	9305      	str	r3, [sp, #20]
 8002444:	2800      	cmp	r0, #0
 8002446:	d004      	beq.n	8002452 <_vfiprintf_r+0x1a>
 8002448:	6983      	ldr	r3, [r0, #24]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <_vfiprintf_r+0x1a>
 800244e:	f7ff fe21 	bl	8002094 <__sinit>
 8002452:	4b7f      	ldr	r3, [pc, #508]	; (8002650 <_vfiprintf_r+0x218>)
 8002454:	429f      	cmp	r7, r3
 8002456:	d15c      	bne.n	8002512 <_vfiprintf_r+0xda>
 8002458:	6877      	ldr	r7, [r6, #4]
 800245a:	89bb      	ldrh	r3, [r7, #12]
 800245c:	071b      	lsls	r3, r3, #28
 800245e:	d562      	bpl.n	8002526 <_vfiprintf_r+0xee>
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d05f      	beq.n	8002526 <_vfiprintf_r+0xee>
 8002466:	2300      	movs	r3, #0
 8002468:	ad06      	add	r5, sp, #24
 800246a:	616b      	str	r3, [r5, #20]
 800246c:	3320      	adds	r3, #32
 800246e:	766b      	strb	r3, [r5, #25]
 8002470:	3310      	adds	r3, #16
 8002472:	76ab      	strb	r3, [r5, #26]
 8002474:	9402      	str	r4, [sp, #8]
 8002476:	9c02      	ldr	r4, [sp, #8]
 8002478:	7823      	ldrb	r3, [r4, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d15d      	bne.n	800253a <_vfiprintf_r+0x102>
 800247e:	9b02      	ldr	r3, [sp, #8]
 8002480:	1ae3      	subs	r3, r4, r3
 8002482:	9304      	str	r3, [sp, #16]
 8002484:	d00d      	beq.n	80024a2 <_vfiprintf_r+0x6a>
 8002486:	9b04      	ldr	r3, [sp, #16]
 8002488:	9a02      	ldr	r2, [sp, #8]
 800248a:	0039      	movs	r1, r7
 800248c:	0030      	movs	r0, r6
 800248e:	f7ff ffc0 	bl	8002412 <__sfputs_r>
 8002492:	1c43      	adds	r3, r0, #1
 8002494:	d100      	bne.n	8002498 <_vfiprintf_r+0x60>
 8002496:	e0cc      	b.n	8002632 <_vfiprintf_r+0x1fa>
 8002498:	696a      	ldr	r2, [r5, #20]
 800249a:	9b04      	ldr	r3, [sp, #16]
 800249c:	4694      	mov	ip, r2
 800249e:	4463      	add	r3, ip
 80024a0:	616b      	str	r3, [r5, #20]
 80024a2:	7823      	ldrb	r3, [r4, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d100      	bne.n	80024aa <_vfiprintf_r+0x72>
 80024a8:	e0c3      	b.n	8002632 <_vfiprintf_r+0x1fa>
 80024aa:	2201      	movs	r2, #1
 80024ac:	2300      	movs	r3, #0
 80024ae:	4252      	negs	r2, r2
 80024b0:	606a      	str	r2, [r5, #4]
 80024b2:	a902      	add	r1, sp, #8
 80024b4:	3254      	adds	r2, #84	; 0x54
 80024b6:	1852      	adds	r2, r2, r1
 80024b8:	3401      	adds	r4, #1
 80024ba:	602b      	str	r3, [r5, #0]
 80024bc:	60eb      	str	r3, [r5, #12]
 80024be:	60ab      	str	r3, [r5, #8]
 80024c0:	7013      	strb	r3, [r2, #0]
 80024c2:	65ab      	str	r3, [r5, #88]	; 0x58
 80024c4:	7821      	ldrb	r1, [r4, #0]
 80024c6:	2205      	movs	r2, #5
 80024c8:	4862      	ldr	r0, [pc, #392]	; (8002654 <_vfiprintf_r+0x21c>)
 80024ca:	f000 fb15 	bl	8002af8 <memchr>
 80024ce:	1c63      	adds	r3, r4, #1
 80024d0:	469c      	mov	ip, r3
 80024d2:	2800      	cmp	r0, #0
 80024d4:	d135      	bne.n	8002542 <_vfiprintf_r+0x10a>
 80024d6:	6829      	ldr	r1, [r5, #0]
 80024d8:	06cb      	lsls	r3, r1, #27
 80024da:	d504      	bpl.n	80024e6 <_vfiprintf_r+0xae>
 80024dc:	2353      	movs	r3, #83	; 0x53
 80024de:	aa02      	add	r2, sp, #8
 80024e0:	3020      	adds	r0, #32
 80024e2:	189b      	adds	r3, r3, r2
 80024e4:	7018      	strb	r0, [r3, #0]
 80024e6:	070b      	lsls	r3, r1, #28
 80024e8:	d504      	bpl.n	80024f4 <_vfiprintf_r+0xbc>
 80024ea:	2353      	movs	r3, #83	; 0x53
 80024ec:	202b      	movs	r0, #43	; 0x2b
 80024ee:	aa02      	add	r2, sp, #8
 80024f0:	189b      	adds	r3, r3, r2
 80024f2:	7018      	strb	r0, [r3, #0]
 80024f4:	7823      	ldrb	r3, [r4, #0]
 80024f6:	2b2a      	cmp	r3, #42	; 0x2a
 80024f8:	d02c      	beq.n	8002554 <_vfiprintf_r+0x11c>
 80024fa:	2000      	movs	r0, #0
 80024fc:	210a      	movs	r1, #10
 80024fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002500:	7822      	ldrb	r2, [r4, #0]
 8002502:	3a30      	subs	r2, #48	; 0x30
 8002504:	2a09      	cmp	r2, #9
 8002506:	d800      	bhi.n	800250a <_vfiprintf_r+0xd2>
 8002508:	e06b      	b.n	80025e2 <_vfiprintf_r+0x1aa>
 800250a:	2800      	cmp	r0, #0
 800250c:	d02a      	beq.n	8002564 <_vfiprintf_r+0x12c>
 800250e:	9309      	str	r3, [sp, #36]	; 0x24
 8002510:	e028      	b.n	8002564 <_vfiprintf_r+0x12c>
 8002512:	4b51      	ldr	r3, [pc, #324]	; (8002658 <_vfiprintf_r+0x220>)
 8002514:	429f      	cmp	r7, r3
 8002516:	d101      	bne.n	800251c <_vfiprintf_r+0xe4>
 8002518:	68b7      	ldr	r7, [r6, #8]
 800251a:	e79e      	b.n	800245a <_vfiprintf_r+0x22>
 800251c:	4b4f      	ldr	r3, [pc, #316]	; (800265c <_vfiprintf_r+0x224>)
 800251e:	429f      	cmp	r7, r3
 8002520:	d19b      	bne.n	800245a <_vfiprintf_r+0x22>
 8002522:	68f7      	ldr	r7, [r6, #12]
 8002524:	e799      	b.n	800245a <_vfiprintf_r+0x22>
 8002526:	0039      	movs	r1, r7
 8002528:	0030      	movs	r0, r6
 800252a:	f7ff fc45 	bl	8001db8 <__swsetup_r>
 800252e:	2800      	cmp	r0, #0
 8002530:	d099      	beq.n	8002466 <_vfiprintf_r+0x2e>
 8002532:	2001      	movs	r0, #1
 8002534:	4240      	negs	r0, r0
 8002536:	b01f      	add	sp, #124	; 0x7c
 8002538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800253a:	2b25      	cmp	r3, #37	; 0x25
 800253c:	d09f      	beq.n	800247e <_vfiprintf_r+0x46>
 800253e:	3401      	adds	r4, #1
 8002540:	e79a      	b.n	8002478 <_vfiprintf_r+0x40>
 8002542:	4b44      	ldr	r3, [pc, #272]	; (8002654 <_vfiprintf_r+0x21c>)
 8002544:	6829      	ldr	r1, [r5, #0]
 8002546:	1ac0      	subs	r0, r0, r3
 8002548:	2301      	movs	r3, #1
 800254a:	4083      	lsls	r3, r0
 800254c:	430b      	orrs	r3, r1
 800254e:	602b      	str	r3, [r5, #0]
 8002550:	4664      	mov	r4, ip
 8002552:	e7b7      	b.n	80024c4 <_vfiprintf_r+0x8c>
 8002554:	9b05      	ldr	r3, [sp, #20]
 8002556:	1d18      	adds	r0, r3, #4
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	9005      	str	r0, [sp, #20]
 800255c:	2b00      	cmp	r3, #0
 800255e:	db3a      	blt.n	80025d6 <_vfiprintf_r+0x19e>
 8002560:	9309      	str	r3, [sp, #36]	; 0x24
 8002562:	4664      	mov	r4, ip
 8002564:	7823      	ldrb	r3, [r4, #0]
 8002566:	2b2e      	cmp	r3, #46	; 0x2e
 8002568:	d10b      	bne.n	8002582 <_vfiprintf_r+0x14a>
 800256a:	7863      	ldrb	r3, [r4, #1]
 800256c:	1c62      	adds	r2, r4, #1
 800256e:	2b2a      	cmp	r3, #42	; 0x2a
 8002570:	d13f      	bne.n	80025f2 <_vfiprintf_r+0x1ba>
 8002572:	9b05      	ldr	r3, [sp, #20]
 8002574:	3402      	adds	r4, #2
 8002576:	1d1a      	adds	r2, r3, #4
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	9205      	str	r2, [sp, #20]
 800257c:	2b00      	cmp	r3, #0
 800257e:	db35      	blt.n	80025ec <_vfiprintf_r+0x1b4>
 8002580:	9307      	str	r3, [sp, #28]
 8002582:	7821      	ldrb	r1, [r4, #0]
 8002584:	2203      	movs	r2, #3
 8002586:	4836      	ldr	r0, [pc, #216]	; (8002660 <_vfiprintf_r+0x228>)
 8002588:	f000 fab6 	bl	8002af8 <memchr>
 800258c:	2800      	cmp	r0, #0
 800258e:	d007      	beq.n	80025a0 <_vfiprintf_r+0x168>
 8002590:	4b33      	ldr	r3, [pc, #204]	; (8002660 <_vfiprintf_r+0x228>)
 8002592:	682a      	ldr	r2, [r5, #0]
 8002594:	1ac0      	subs	r0, r0, r3
 8002596:	2340      	movs	r3, #64	; 0x40
 8002598:	4083      	lsls	r3, r0
 800259a:	4313      	orrs	r3, r2
 800259c:	602b      	str	r3, [r5, #0]
 800259e:	3401      	adds	r4, #1
 80025a0:	7821      	ldrb	r1, [r4, #0]
 80025a2:	1c63      	adds	r3, r4, #1
 80025a4:	2206      	movs	r2, #6
 80025a6:	482f      	ldr	r0, [pc, #188]	; (8002664 <_vfiprintf_r+0x22c>)
 80025a8:	9302      	str	r3, [sp, #8]
 80025aa:	7629      	strb	r1, [r5, #24]
 80025ac:	f000 faa4 	bl	8002af8 <memchr>
 80025b0:	2800      	cmp	r0, #0
 80025b2:	d044      	beq.n	800263e <_vfiprintf_r+0x206>
 80025b4:	4b2c      	ldr	r3, [pc, #176]	; (8002668 <_vfiprintf_r+0x230>)
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d12f      	bne.n	800261a <_vfiprintf_r+0x1e2>
 80025ba:	6829      	ldr	r1, [r5, #0]
 80025bc:	9b05      	ldr	r3, [sp, #20]
 80025be:	2207      	movs	r2, #7
 80025c0:	05c9      	lsls	r1, r1, #23
 80025c2:	d528      	bpl.n	8002616 <_vfiprintf_r+0x1de>
 80025c4:	189b      	adds	r3, r3, r2
 80025c6:	4393      	bics	r3, r2
 80025c8:	3308      	adds	r3, #8
 80025ca:	9305      	str	r3, [sp, #20]
 80025cc:	696b      	ldr	r3, [r5, #20]
 80025ce:	9a03      	ldr	r2, [sp, #12]
 80025d0:	189b      	adds	r3, r3, r2
 80025d2:	616b      	str	r3, [r5, #20]
 80025d4:	e74f      	b.n	8002476 <_vfiprintf_r+0x3e>
 80025d6:	425b      	negs	r3, r3
 80025d8:	60eb      	str	r3, [r5, #12]
 80025da:	2302      	movs	r3, #2
 80025dc:	430b      	orrs	r3, r1
 80025de:	602b      	str	r3, [r5, #0]
 80025e0:	e7bf      	b.n	8002562 <_vfiprintf_r+0x12a>
 80025e2:	434b      	muls	r3, r1
 80025e4:	3401      	adds	r4, #1
 80025e6:	189b      	adds	r3, r3, r2
 80025e8:	2001      	movs	r0, #1
 80025ea:	e789      	b.n	8002500 <_vfiprintf_r+0xc8>
 80025ec:	2301      	movs	r3, #1
 80025ee:	425b      	negs	r3, r3
 80025f0:	e7c6      	b.n	8002580 <_vfiprintf_r+0x148>
 80025f2:	2300      	movs	r3, #0
 80025f4:	0014      	movs	r4, r2
 80025f6:	200a      	movs	r0, #10
 80025f8:	001a      	movs	r2, r3
 80025fa:	606b      	str	r3, [r5, #4]
 80025fc:	7821      	ldrb	r1, [r4, #0]
 80025fe:	3930      	subs	r1, #48	; 0x30
 8002600:	2909      	cmp	r1, #9
 8002602:	d903      	bls.n	800260c <_vfiprintf_r+0x1d4>
 8002604:	2b00      	cmp	r3, #0
 8002606:	d0bc      	beq.n	8002582 <_vfiprintf_r+0x14a>
 8002608:	9207      	str	r2, [sp, #28]
 800260a:	e7ba      	b.n	8002582 <_vfiprintf_r+0x14a>
 800260c:	4342      	muls	r2, r0
 800260e:	3401      	adds	r4, #1
 8002610:	1852      	adds	r2, r2, r1
 8002612:	2301      	movs	r3, #1
 8002614:	e7f2      	b.n	80025fc <_vfiprintf_r+0x1c4>
 8002616:	3307      	adds	r3, #7
 8002618:	e7d5      	b.n	80025c6 <_vfiprintf_r+0x18e>
 800261a:	ab05      	add	r3, sp, #20
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	003a      	movs	r2, r7
 8002620:	4b12      	ldr	r3, [pc, #72]	; (800266c <_vfiprintf_r+0x234>)
 8002622:	0029      	movs	r1, r5
 8002624:	0030      	movs	r0, r6
 8002626:	e000      	b.n	800262a <_vfiprintf_r+0x1f2>
 8002628:	bf00      	nop
 800262a:	9003      	str	r0, [sp, #12]
 800262c:	9b03      	ldr	r3, [sp, #12]
 800262e:	3301      	adds	r3, #1
 8002630:	d1cc      	bne.n	80025cc <_vfiprintf_r+0x194>
 8002632:	89bb      	ldrh	r3, [r7, #12]
 8002634:	065b      	lsls	r3, r3, #25
 8002636:	d500      	bpl.n	800263a <_vfiprintf_r+0x202>
 8002638:	e77b      	b.n	8002532 <_vfiprintf_r+0xfa>
 800263a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800263c:	e77b      	b.n	8002536 <_vfiprintf_r+0xfe>
 800263e:	ab05      	add	r3, sp, #20
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	003a      	movs	r2, r7
 8002644:	4b09      	ldr	r3, [pc, #36]	; (800266c <_vfiprintf_r+0x234>)
 8002646:	0029      	movs	r1, r5
 8002648:	0030      	movs	r0, r6
 800264a:	f000 f87f 	bl	800274c <_printf_i>
 800264e:	e7ec      	b.n	800262a <_vfiprintf_r+0x1f2>
 8002650:	08002c9c 	.word	0x08002c9c
 8002654:	08002ce0 	.word	0x08002ce0
 8002658:	08002cbc 	.word	0x08002cbc
 800265c:	08002c7c 	.word	0x08002c7c
 8002660:	08002ce6 	.word	0x08002ce6
 8002664:	08002cea 	.word	0x08002cea
 8002668:	00000000 	.word	0x00000000
 800266c:	08002413 	.word	0x08002413

08002670 <_printf_common>:
 8002670:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002672:	0015      	movs	r5, r2
 8002674:	9301      	str	r3, [sp, #4]
 8002676:	688a      	ldr	r2, [r1, #8]
 8002678:	690b      	ldr	r3, [r1, #16]
 800267a:	9000      	str	r0, [sp, #0]
 800267c:	000c      	movs	r4, r1
 800267e:	4293      	cmp	r3, r2
 8002680:	da00      	bge.n	8002684 <_printf_common+0x14>
 8002682:	0013      	movs	r3, r2
 8002684:	0022      	movs	r2, r4
 8002686:	602b      	str	r3, [r5, #0]
 8002688:	3243      	adds	r2, #67	; 0x43
 800268a:	7812      	ldrb	r2, [r2, #0]
 800268c:	2a00      	cmp	r2, #0
 800268e:	d001      	beq.n	8002694 <_printf_common+0x24>
 8002690:	3301      	adds	r3, #1
 8002692:	602b      	str	r3, [r5, #0]
 8002694:	6823      	ldr	r3, [r4, #0]
 8002696:	069b      	lsls	r3, r3, #26
 8002698:	d502      	bpl.n	80026a0 <_printf_common+0x30>
 800269a:	682b      	ldr	r3, [r5, #0]
 800269c:	3302      	adds	r3, #2
 800269e:	602b      	str	r3, [r5, #0]
 80026a0:	2706      	movs	r7, #6
 80026a2:	6823      	ldr	r3, [r4, #0]
 80026a4:	401f      	ands	r7, r3
 80026a6:	d027      	beq.n	80026f8 <_printf_common+0x88>
 80026a8:	0023      	movs	r3, r4
 80026aa:	3343      	adds	r3, #67	; 0x43
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	1e5a      	subs	r2, r3, #1
 80026b0:	4193      	sbcs	r3, r2
 80026b2:	6822      	ldr	r2, [r4, #0]
 80026b4:	0692      	lsls	r2, r2, #26
 80026b6:	d430      	bmi.n	800271a <_printf_common+0xaa>
 80026b8:	0022      	movs	r2, r4
 80026ba:	9901      	ldr	r1, [sp, #4]
 80026bc:	3243      	adds	r2, #67	; 0x43
 80026be:	9800      	ldr	r0, [sp, #0]
 80026c0:	9e08      	ldr	r6, [sp, #32]
 80026c2:	47b0      	blx	r6
 80026c4:	1c43      	adds	r3, r0, #1
 80026c6:	d025      	beq.n	8002714 <_printf_common+0xa4>
 80026c8:	2306      	movs	r3, #6
 80026ca:	6820      	ldr	r0, [r4, #0]
 80026cc:	682a      	ldr	r2, [r5, #0]
 80026ce:	68e1      	ldr	r1, [r4, #12]
 80026d0:	4003      	ands	r3, r0
 80026d2:	2500      	movs	r5, #0
 80026d4:	2b04      	cmp	r3, #4
 80026d6:	d103      	bne.n	80026e0 <_printf_common+0x70>
 80026d8:	1a8d      	subs	r5, r1, r2
 80026da:	43eb      	mvns	r3, r5
 80026dc:	17db      	asrs	r3, r3, #31
 80026de:	401d      	ands	r5, r3
 80026e0:	68a3      	ldr	r3, [r4, #8]
 80026e2:	6922      	ldr	r2, [r4, #16]
 80026e4:	4293      	cmp	r3, r2
 80026e6:	dd01      	ble.n	80026ec <_printf_common+0x7c>
 80026e8:	1a9b      	subs	r3, r3, r2
 80026ea:	18ed      	adds	r5, r5, r3
 80026ec:	2700      	movs	r7, #0
 80026ee:	42bd      	cmp	r5, r7
 80026f0:	d120      	bne.n	8002734 <_printf_common+0xc4>
 80026f2:	2000      	movs	r0, #0
 80026f4:	e010      	b.n	8002718 <_printf_common+0xa8>
 80026f6:	3701      	adds	r7, #1
 80026f8:	68e3      	ldr	r3, [r4, #12]
 80026fa:	682a      	ldr	r2, [r5, #0]
 80026fc:	1a9b      	subs	r3, r3, r2
 80026fe:	429f      	cmp	r7, r3
 8002700:	dad2      	bge.n	80026a8 <_printf_common+0x38>
 8002702:	0022      	movs	r2, r4
 8002704:	2301      	movs	r3, #1
 8002706:	3219      	adds	r2, #25
 8002708:	9901      	ldr	r1, [sp, #4]
 800270a:	9800      	ldr	r0, [sp, #0]
 800270c:	9e08      	ldr	r6, [sp, #32]
 800270e:	47b0      	blx	r6
 8002710:	1c43      	adds	r3, r0, #1
 8002712:	d1f0      	bne.n	80026f6 <_printf_common+0x86>
 8002714:	2001      	movs	r0, #1
 8002716:	4240      	negs	r0, r0
 8002718:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800271a:	2030      	movs	r0, #48	; 0x30
 800271c:	18e1      	adds	r1, r4, r3
 800271e:	3143      	adds	r1, #67	; 0x43
 8002720:	7008      	strb	r0, [r1, #0]
 8002722:	0021      	movs	r1, r4
 8002724:	1c5a      	adds	r2, r3, #1
 8002726:	3145      	adds	r1, #69	; 0x45
 8002728:	7809      	ldrb	r1, [r1, #0]
 800272a:	18a2      	adds	r2, r4, r2
 800272c:	3243      	adds	r2, #67	; 0x43
 800272e:	3302      	adds	r3, #2
 8002730:	7011      	strb	r1, [r2, #0]
 8002732:	e7c1      	b.n	80026b8 <_printf_common+0x48>
 8002734:	0022      	movs	r2, r4
 8002736:	2301      	movs	r3, #1
 8002738:	321a      	adds	r2, #26
 800273a:	9901      	ldr	r1, [sp, #4]
 800273c:	9800      	ldr	r0, [sp, #0]
 800273e:	9e08      	ldr	r6, [sp, #32]
 8002740:	47b0      	blx	r6
 8002742:	1c43      	adds	r3, r0, #1
 8002744:	d0e6      	beq.n	8002714 <_printf_common+0xa4>
 8002746:	3701      	adds	r7, #1
 8002748:	e7d1      	b.n	80026ee <_printf_common+0x7e>
	...

0800274c <_printf_i>:
 800274c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800274e:	b08b      	sub	sp, #44	; 0x2c
 8002750:	9206      	str	r2, [sp, #24]
 8002752:	000a      	movs	r2, r1
 8002754:	3243      	adds	r2, #67	; 0x43
 8002756:	9307      	str	r3, [sp, #28]
 8002758:	9005      	str	r0, [sp, #20]
 800275a:	9204      	str	r2, [sp, #16]
 800275c:	7e0a      	ldrb	r2, [r1, #24]
 800275e:	000c      	movs	r4, r1
 8002760:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002762:	2a6e      	cmp	r2, #110	; 0x6e
 8002764:	d100      	bne.n	8002768 <_printf_i+0x1c>
 8002766:	e08f      	b.n	8002888 <_printf_i+0x13c>
 8002768:	d817      	bhi.n	800279a <_printf_i+0x4e>
 800276a:	2a63      	cmp	r2, #99	; 0x63
 800276c:	d02c      	beq.n	80027c8 <_printf_i+0x7c>
 800276e:	d808      	bhi.n	8002782 <_printf_i+0x36>
 8002770:	2a00      	cmp	r2, #0
 8002772:	d100      	bne.n	8002776 <_printf_i+0x2a>
 8002774:	e099      	b.n	80028aa <_printf_i+0x15e>
 8002776:	2a58      	cmp	r2, #88	; 0x58
 8002778:	d054      	beq.n	8002824 <_printf_i+0xd8>
 800277a:	0026      	movs	r6, r4
 800277c:	3642      	adds	r6, #66	; 0x42
 800277e:	7032      	strb	r2, [r6, #0]
 8002780:	e029      	b.n	80027d6 <_printf_i+0x8a>
 8002782:	2a64      	cmp	r2, #100	; 0x64
 8002784:	d001      	beq.n	800278a <_printf_i+0x3e>
 8002786:	2a69      	cmp	r2, #105	; 0x69
 8002788:	d1f7      	bne.n	800277a <_printf_i+0x2e>
 800278a:	6821      	ldr	r1, [r4, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	0608      	lsls	r0, r1, #24
 8002790:	d523      	bpl.n	80027da <_printf_i+0x8e>
 8002792:	1d11      	adds	r1, r2, #4
 8002794:	6019      	str	r1, [r3, #0]
 8002796:	6815      	ldr	r5, [r2, #0]
 8002798:	e025      	b.n	80027e6 <_printf_i+0x9a>
 800279a:	2a73      	cmp	r2, #115	; 0x73
 800279c:	d100      	bne.n	80027a0 <_printf_i+0x54>
 800279e:	e088      	b.n	80028b2 <_printf_i+0x166>
 80027a0:	d808      	bhi.n	80027b4 <_printf_i+0x68>
 80027a2:	2a6f      	cmp	r2, #111	; 0x6f
 80027a4:	d029      	beq.n	80027fa <_printf_i+0xae>
 80027a6:	2a70      	cmp	r2, #112	; 0x70
 80027a8:	d1e7      	bne.n	800277a <_printf_i+0x2e>
 80027aa:	2220      	movs	r2, #32
 80027ac:	6809      	ldr	r1, [r1, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	6022      	str	r2, [r4, #0]
 80027b2:	e003      	b.n	80027bc <_printf_i+0x70>
 80027b4:	2a75      	cmp	r2, #117	; 0x75
 80027b6:	d020      	beq.n	80027fa <_printf_i+0xae>
 80027b8:	2a78      	cmp	r2, #120	; 0x78
 80027ba:	d1de      	bne.n	800277a <_printf_i+0x2e>
 80027bc:	0022      	movs	r2, r4
 80027be:	2178      	movs	r1, #120	; 0x78
 80027c0:	3245      	adds	r2, #69	; 0x45
 80027c2:	7011      	strb	r1, [r2, #0]
 80027c4:	4a6c      	ldr	r2, [pc, #432]	; (8002978 <_printf_i+0x22c>)
 80027c6:	e030      	b.n	800282a <_printf_i+0xde>
 80027c8:	000e      	movs	r6, r1
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	3642      	adds	r6, #66	; 0x42
 80027ce:	1d11      	adds	r1, r2, #4
 80027d0:	6019      	str	r1, [r3, #0]
 80027d2:	6813      	ldr	r3, [r2, #0]
 80027d4:	7033      	strb	r3, [r6, #0]
 80027d6:	2301      	movs	r3, #1
 80027d8:	e079      	b.n	80028ce <_printf_i+0x182>
 80027da:	0649      	lsls	r1, r1, #25
 80027dc:	d5d9      	bpl.n	8002792 <_printf_i+0x46>
 80027de:	1d11      	adds	r1, r2, #4
 80027e0:	6019      	str	r1, [r3, #0]
 80027e2:	2300      	movs	r3, #0
 80027e4:	5ed5      	ldrsh	r5, [r2, r3]
 80027e6:	2d00      	cmp	r5, #0
 80027e8:	da03      	bge.n	80027f2 <_printf_i+0xa6>
 80027ea:	232d      	movs	r3, #45	; 0x2d
 80027ec:	9a04      	ldr	r2, [sp, #16]
 80027ee:	426d      	negs	r5, r5
 80027f0:	7013      	strb	r3, [r2, #0]
 80027f2:	4b62      	ldr	r3, [pc, #392]	; (800297c <_printf_i+0x230>)
 80027f4:	270a      	movs	r7, #10
 80027f6:	9303      	str	r3, [sp, #12]
 80027f8:	e02f      	b.n	800285a <_printf_i+0x10e>
 80027fa:	6820      	ldr	r0, [r4, #0]
 80027fc:	6819      	ldr	r1, [r3, #0]
 80027fe:	0605      	lsls	r5, r0, #24
 8002800:	d503      	bpl.n	800280a <_printf_i+0xbe>
 8002802:	1d08      	adds	r0, r1, #4
 8002804:	6018      	str	r0, [r3, #0]
 8002806:	680d      	ldr	r5, [r1, #0]
 8002808:	e005      	b.n	8002816 <_printf_i+0xca>
 800280a:	0640      	lsls	r0, r0, #25
 800280c:	d5f9      	bpl.n	8002802 <_printf_i+0xb6>
 800280e:	680d      	ldr	r5, [r1, #0]
 8002810:	1d08      	adds	r0, r1, #4
 8002812:	6018      	str	r0, [r3, #0]
 8002814:	b2ad      	uxth	r5, r5
 8002816:	4b59      	ldr	r3, [pc, #356]	; (800297c <_printf_i+0x230>)
 8002818:	2708      	movs	r7, #8
 800281a:	9303      	str	r3, [sp, #12]
 800281c:	2a6f      	cmp	r2, #111	; 0x6f
 800281e:	d018      	beq.n	8002852 <_printf_i+0x106>
 8002820:	270a      	movs	r7, #10
 8002822:	e016      	b.n	8002852 <_printf_i+0x106>
 8002824:	3145      	adds	r1, #69	; 0x45
 8002826:	700a      	strb	r2, [r1, #0]
 8002828:	4a54      	ldr	r2, [pc, #336]	; (800297c <_printf_i+0x230>)
 800282a:	9203      	str	r2, [sp, #12]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	6821      	ldr	r1, [r4, #0]
 8002830:	1d10      	adds	r0, r2, #4
 8002832:	6018      	str	r0, [r3, #0]
 8002834:	6815      	ldr	r5, [r2, #0]
 8002836:	0608      	lsls	r0, r1, #24
 8002838:	d522      	bpl.n	8002880 <_printf_i+0x134>
 800283a:	07cb      	lsls	r3, r1, #31
 800283c:	d502      	bpl.n	8002844 <_printf_i+0xf8>
 800283e:	2320      	movs	r3, #32
 8002840:	4319      	orrs	r1, r3
 8002842:	6021      	str	r1, [r4, #0]
 8002844:	2710      	movs	r7, #16
 8002846:	2d00      	cmp	r5, #0
 8002848:	d103      	bne.n	8002852 <_printf_i+0x106>
 800284a:	2320      	movs	r3, #32
 800284c:	6822      	ldr	r2, [r4, #0]
 800284e:	439a      	bics	r2, r3
 8002850:	6022      	str	r2, [r4, #0]
 8002852:	0023      	movs	r3, r4
 8002854:	2200      	movs	r2, #0
 8002856:	3343      	adds	r3, #67	; 0x43
 8002858:	701a      	strb	r2, [r3, #0]
 800285a:	6863      	ldr	r3, [r4, #4]
 800285c:	60a3      	str	r3, [r4, #8]
 800285e:	2b00      	cmp	r3, #0
 8002860:	db5c      	blt.n	800291c <_printf_i+0x1d0>
 8002862:	2204      	movs	r2, #4
 8002864:	6821      	ldr	r1, [r4, #0]
 8002866:	4391      	bics	r1, r2
 8002868:	6021      	str	r1, [r4, #0]
 800286a:	2d00      	cmp	r5, #0
 800286c:	d158      	bne.n	8002920 <_printf_i+0x1d4>
 800286e:	9e04      	ldr	r6, [sp, #16]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d064      	beq.n	800293e <_printf_i+0x1f2>
 8002874:	0026      	movs	r6, r4
 8002876:	9b03      	ldr	r3, [sp, #12]
 8002878:	3642      	adds	r6, #66	; 0x42
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	7033      	strb	r3, [r6, #0]
 800287e:	e05e      	b.n	800293e <_printf_i+0x1f2>
 8002880:	0648      	lsls	r0, r1, #25
 8002882:	d5da      	bpl.n	800283a <_printf_i+0xee>
 8002884:	b2ad      	uxth	r5, r5
 8002886:	e7d8      	b.n	800283a <_printf_i+0xee>
 8002888:	6809      	ldr	r1, [r1, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	0608      	lsls	r0, r1, #24
 800288e:	d505      	bpl.n	800289c <_printf_i+0x150>
 8002890:	1d11      	adds	r1, r2, #4
 8002892:	6019      	str	r1, [r3, #0]
 8002894:	6813      	ldr	r3, [r2, #0]
 8002896:	6962      	ldr	r2, [r4, #20]
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	e006      	b.n	80028aa <_printf_i+0x15e>
 800289c:	0649      	lsls	r1, r1, #25
 800289e:	d5f7      	bpl.n	8002890 <_printf_i+0x144>
 80028a0:	1d11      	adds	r1, r2, #4
 80028a2:	6019      	str	r1, [r3, #0]
 80028a4:	6813      	ldr	r3, [r2, #0]
 80028a6:	8aa2      	ldrh	r2, [r4, #20]
 80028a8:	801a      	strh	r2, [r3, #0]
 80028aa:	2300      	movs	r3, #0
 80028ac:	9e04      	ldr	r6, [sp, #16]
 80028ae:	6123      	str	r3, [r4, #16]
 80028b0:	e054      	b.n	800295c <_printf_i+0x210>
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	1d11      	adds	r1, r2, #4
 80028b6:	6019      	str	r1, [r3, #0]
 80028b8:	6816      	ldr	r6, [r2, #0]
 80028ba:	2100      	movs	r1, #0
 80028bc:	6862      	ldr	r2, [r4, #4]
 80028be:	0030      	movs	r0, r6
 80028c0:	f000 f91a 	bl	8002af8 <memchr>
 80028c4:	2800      	cmp	r0, #0
 80028c6:	d001      	beq.n	80028cc <_printf_i+0x180>
 80028c8:	1b80      	subs	r0, r0, r6
 80028ca:	6060      	str	r0, [r4, #4]
 80028cc:	6863      	ldr	r3, [r4, #4]
 80028ce:	6123      	str	r3, [r4, #16]
 80028d0:	2300      	movs	r3, #0
 80028d2:	9a04      	ldr	r2, [sp, #16]
 80028d4:	7013      	strb	r3, [r2, #0]
 80028d6:	e041      	b.n	800295c <_printf_i+0x210>
 80028d8:	6923      	ldr	r3, [r4, #16]
 80028da:	0032      	movs	r2, r6
 80028dc:	9906      	ldr	r1, [sp, #24]
 80028de:	9805      	ldr	r0, [sp, #20]
 80028e0:	9d07      	ldr	r5, [sp, #28]
 80028e2:	47a8      	blx	r5
 80028e4:	1c43      	adds	r3, r0, #1
 80028e6:	d043      	beq.n	8002970 <_printf_i+0x224>
 80028e8:	6823      	ldr	r3, [r4, #0]
 80028ea:	2500      	movs	r5, #0
 80028ec:	079b      	lsls	r3, r3, #30
 80028ee:	d40f      	bmi.n	8002910 <_printf_i+0x1c4>
 80028f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80028f2:	68e0      	ldr	r0, [r4, #12]
 80028f4:	4298      	cmp	r0, r3
 80028f6:	da3d      	bge.n	8002974 <_printf_i+0x228>
 80028f8:	0018      	movs	r0, r3
 80028fa:	e03b      	b.n	8002974 <_printf_i+0x228>
 80028fc:	0022      	movs	r2, r4
 80028fe:	2301      	movs	r3, #1
 8002900:	3219      	adds	r2, #25
 8002902:	9906      	ldr	r1, [sp, #24]
 8002904:	9805      	ldr	r0, [sp, #20]
 8002906:	9e07      	ldr	r6, [sp, #28]
 8002908:	47b0      	blx	r6
 800290a:	1c43      	adds	r3, r0, #1
 800290c:	d030      	beq.n	8002970 <_printf_i+0x224>
 800290e:	3501      	adds	r5, #1
 8002910:	68e3      	ldr	r3, [r4, #12]
 8002912:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002914:	1a9b      	subs	r3, r3, r2
 8002916:	429d      	cmp	r5, r3
 8002918:	dbf0      	blt.n	80028fc <_printf_i+0x1b0>
 800291a:	e7e9      	b.n	80028f0 <_printf_i+0x1a4>
 800291c:	2d00      	cmp	r5, #0
 800291e:	d0a9      	beq.n	8002874 <_printf_i+0x128>
 8002920:	9e04      	ldr	r6, [sp, #16]
 8002922:	0028      	movs	r0, r5
 8002924:	0039      	movs	r1, r7
 8002926:	f7fd fc7f 	bl	8000228 <__aeabi_uidivmod>
 800292a:	9b03      	ldr	r3, [sp, #12]
 800292c:	3e01      	subs	r6, #1
 800292e:	5c5b      	ldrb	r3, [r3, r1]
 8002930:	0028      	movs	r0, r5
 8002932:	7033      	strb	r3, [r6, #0]
 8002934:	0039      	movs	r1, r7
 8002936:	f7fd fbf1 	bl	800011c <__udivsi3>
 800293a:	1e05      	subs	r5, r0, #0
 800293c:	d1f1      	bne.n	8002922 <_printf_i+0x1d6>
 800293e:	2f08      	cmp	r7, #8
 8002940:	d109      	bne.n	8002956 <_printf_i+0x20a>
 8002942:	6823      	ldr	r3, [r4, #0]
 8002944:	07db      	lsls	r3, r3, #31
 8002946:	d506      	bpl.n	8002956 <_printf_i+0x20a>
 8002948:	6863      	ldr	r3, [r4, #4]
 800294a:	6922      	ldr	r2, [r4, #16]
 800294c:	4293      	cmp	r3, r2
 800294e:	dc02      	bgt.n	8002956 <_printf_i+0x20a>
 8002950:	2330      	movs	r3, #48	; 0x30
 8002952:	3e01      	subs	r6, #1
 8002954:	7033      	strb	r3, [r6, #0]
 8002956:	9b04      	ldr	r3, [sp, #16]
 8002958:	1b9b      	subs	r3, r3, r6
 800295a:	6123      	str	r3, [r4, #16]
 800295c:	9b07      	ldr	r3, [sp, #28]
 800295e:	aa09      	add	r2, sp, #36	; 0x24
 8002960:	9300      	str	r3, [sp, #0]
 8002962:	0021      	movs	r1, r4
 8002964:	9b06      	ldr	r3, [sp, #24]
 8002966:	9805      	ldr	r0, [sp, #20]
 8002968:	f7ff fe82 	bl	8002670 <_printf_common>
 800296c:	1c43      	adds	r3, r0, #1
 800296e:	d1b3      	bne.n	80028d8 <_printf_i+0x18c>
 8002970:	2001      	movs	r0, #1
 8002972:	4240      	negs	r0, r0
 8002974:	b00b      	add	sp, #44	; 0x2c
 8002976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002978:	08002d02 	.word	0x08002d02
 800297c:	08002cf1 	.word	0x08002cf1

08002980 <_sbrk_r>:
 8002980:	2300      	movs	r3, #0
 8002982:	b570      	push	{r4, r5, r6, lr}
 8002984:	4c06      	ldr	r4, [pc, #24]	; (80029a0 <_sbrk_r+0x20>)
 8002986:	0005      	movs	r5, r0
 8002988:	0008      	movs	r0, r1
 800298a:	6023      	str	r3, [r4, #0]
 800298c:	f000 f8fe 	bl	8002b8c <_sbrk>
 8002990:	1c43      	adds	r3, r0, #1
 8002992:	d103      	bne.n	800299c <_sbrk_r+0x1c>
 8002994:	6823      	ldr	r3, [r4, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d000      	beq.n	800299c <_sbrk_r+0x1c>
 800299a:	602b      	str	r3, [r5, #0]
 800299c:	bd70      	pop	{r4, r5, r6, pc}
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	20000174 	.word	0x20000174

080029a4 <__sread>:
 80029a4:	b570      	push	{r4, r5, r6, lr}
 80029a6:	000c      	movs	r4, r1
 80029a8:	250e      	movs	r5, #14
 80029aa:	5f49      	ldrsh	r1, [r1, r5]
 80029ac:	f000 f8b2 	bl	8002b14 <_read_r>
 80029b0:	2800      	cmp	r0, #0
 80029b2:	db03      	blt.n	80029bc <__sread+0x18>
 80029b4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80029b6:	181b      	adds	r3, r3, r0
 80029b8:	6563      	str	r3, [r4, #84]	; 0x54
 80029ba:	bd70      	pop	{r4, r5, r6, pc}
 80029bc:	89a3      	ldrh	r3, [r4, #12]
 80029be:	4a02      	ldr	r2, [pc, #8]	; (80029c8 <__sread+0x24>)
 80029c0:	4013      	ands	r3, r2
 80029c2:	81a3      	strh	r3, [r4, #12]
 80029c4:	e7f9      	b.n	80029ba <__sread+0x16>
 80029c6:	46c0      	nop			; (mov r8, r8)
 80029c8:	ffffefff 	.word	0xffffefff

080029cc <__swrite>:
 80029cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ce:	001f      	movs	r7, r3
 80029d0:	898b      	ldrh	r3, [r1, #12]
 80029d2:	0005      	movs	r5, r0
 80029d4:	000c      	movs	r4, r1
 80029d6:	0016      	movs	r6, r2
 80029d8:	05db      	lsls	r3, r3, #23
 80029da:	d505      	bpl.n	80029e8 <__swrite+0x1c>
 80029dc:	230e      	movs	r3, #14
 80029de:	5ec9      	ldrsh	r1, [r1, r3]
 80029e0:	2200      	movs	r2, #0
 80029e2:	2302      	movs	r3, #2
 80029e4:	f000 f874 	bl	8002ad0 <_lseek_r>
 80029e8:	89a3      	ldrh	r3, [r4, #12]
 80029ea:	4a05      	ldr	r2, [pc, #20]	; (8002a00 <__swrite+0x34>)
 80029ec:	0028      	movs	r0, r5
 80029ee:	4013      	ands	r3, r2
 80029f0:	81a3      	strh	r3, [r4, #12]
 80029f2:	0032      	movs	r2, r6
 80029f4:	230e      	movs	r3, #14
 80029f6:	5ee1      	ldrsh	r1, [r4, r3]
 80029f8:	003b      	movs	r3, r7
 80029fa:	f000 f81f 	bl	8002a3c <_write_r>
 80029fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a00:	ffffefff 	.word	0xffffefff

08002a04 <__sseek>:
 8002a04:	b570      	push	{r4, r5, r6, lr}
 8002a06:	000c      	movs	r4, r1
 8002a08:	250e      	movs	r5, #14
 8002a0a:	5f49      	ldrsh	r1, [r1, r5]
 8002a0c:	f000 f860 	bl	8002ad0 <_lseek_r>
 8002a10:	89a3      	ldrh	r3, [r4, #12]
 8002a12:	1c42      	adds	r2, r0, #1
 8002a14:	d103      	bne.n	8002a1e <__sseek+0x1a>
 8002a16:	4a05      	ldr	r2, [pc, #20]	; (8002a2c <__sseek+0x28>)
 8002a18:	4013      	ands	r3, r2
 8002a1a:	81a3      	strh	r3, [r4, #12]
 8002a1c:	bd70      	pop	{r4, r5, r6, pc}
 8002a1e:	2280      	movs	r2, #128	; 0x80
 8002a20:	0152      	lsls	r2, r2, #5
 8002a22:	4313      	orrs	r3, r2
 8002a24:	81a3      	strh	r3, [r4, #12]
 8002a26:	6560      	str	r0, [r4, #84]	; 0x54
 8002a28:	e7f8      	b.n	8002a1c <__sseek+0x18>
 8002a2a:	46c0      	nop			; (mov r8, r8)
 8002a2c:	ffffefff 	.word	0xffffefff

08002a30 <__sclose>:
 8002a30:	b510      	push	{r4, lr}
 8002a32:	230e      	movs	r3, #14
 8002a34:	5ec9      	ldrsh	r1, [r1, r3]
 8002a36:	f000 f815 	bl	8002a64 <_close_r>
 8002a3a:	bd10      	pop	{r4, pc}

08002a3c <_write_r>:
 8002a3c:	b570      	push	{r4, r5, r6, lr}
 8002a3e:	0005      	movs	r5, r0
 8002a40:	0008      	movs	r0, r1
 8002a42:	0011      	movs	r1, r2
 8002a44:	2200      	movs	r2, #0
 8002a46:	4c06      	ldr	r4, [pc, #24]	; (8002a60 <_write_r+0x24>)
 8002a48:	6022      	str	r2, [r4, #0]
 8002a4a:	001a      	movs	r2, r3
 8002a4c:	f000 f8ae 	bl	8002bac <_write>
 8002a50:	1c43      	adds	r3, r0, #1
 8002a52:	d103      	bne.n	8002a5c <_write_r+0x20>
 8002a54:	6823      	ldr	r3, [r4, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d000      	beq.n	8002a5c <_write_r+0x20>
 8002a5a:	602b      	str	r3, [r5, #0]
 8002a5c:	bd70      	pop	{r4, r5, r6, pc}
 8002a5e:	46c0      	nop			; (mov r8, r8)
 8002a60:	20000174 	.word	0x20000174

08002a64 <_close_r>:
 8002a64:	2300      	movs	r3, #0
 8002a66:	b570      	push	{r4, r5, r6, lr}
 8002a68:	4c06      	ldr	r4, [pc, #24]	; (8002a84 <_close_r+0x20>)
 8002a6a:	0005      	movs	r5, r0
 8002a6c:	0008      	movs	r0, r1
 8002a6e:	6023      	str	r3, [r4, #0]
 8002a70:	f000 f864 	bl	8002b3c <_close>
 8002a74:	1c43      	adds	r3, r0, #1
 8002a76:	d103      	bne.n	8002a80 <_close_r+0x1c>
 8002a78:	6823      	ldr	r3, [r4, #0]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d000      	beq.n	8002a80 <_close_r+0x1c>
 8002a7e:	602b      	str	r3, [r5, #0]
 8002a80:	bd70      	pop	{r4, r5, r6, pc}
 8002a82:	46c0      	nop			; (mov r8, r8)
 8002a84:	20000174 	.word	0x20000174

08002a88 <_fstat_r>:
 8002a88:	2300      	movs	r3, #0
 8002a8a:	b570      	push	{r4, r5, r6, lr}
 8002a8c:	4c06      	ldr	r4, [pc, #24]	; (8002aa8 <_fstat_r+0x20>)
 8002a8e:	0005      	movs	r5, r0
 8002a90:	0008      	movs	r0, r1
 8002a92:	0011      	movs	r1, r2
 8002a94:	6023      	str	r3, [r4, #0]
 8002a96:	f000 f859 	bl	8002b4c <_fstat>
 8002a9a:	1c43      	adds	r3, r0, #1
 8002a9c:	d103      	bne.n	8002aa6 <_fstat_r+0x1e>
 8002a9e:	6823      	ldr	r3, [r4, #0]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d000      	beq.n	8002aa6 <_fstat_r+0x1e>
 8002aa4:	602b      	str	r3, [r5, #0]
 8002aa6:	bd70      	pop	{r4, r5, r6, pc}
 8002aa8:	20000174 	.word	0x20000174

08002aac <_isatty_r>:
 8002aac:	2300      	movs	r3, #0
 8002aae:	b570      	push	{r4, r5, r6, lr}
 8002ab0:	4c06      	ldr	r4, [pc, #24]	; (8002acc <_isatty_r+0x20>)
 8002ab2:	0005      	movs	r5, r0
 8002ab4:	0008      	movs	r0, r1
 8002ab6:	6023      	str	r3, [r4, #0]
 8002ab8:	f000 f850 	bl	8002b5c <_isatty>
 8002abc:	1c43      	adds	r3, r0, #1
 8002abe:	d103      	bne.n	8002ac8 <_isatty_r+0x1c>
 8002ac0:	6823      	ldr	r3, [r4, #0]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d000      	beq.n	8002ac8 <_isatty_r+0x1c>
 8002ac6:	602b      	str	r3, [r5, #0]
 8002ac8:	bd70      	pop	{r4, r5, r6, pc}
 8002aca:	46c0      	nop			; (mov r8, r8)
 8002acc:	20000174 	.word	0x20000174

08002ad0 <_lseek_r>:
 8002ad0:	b570      	push	{r4, r5, r6, lr}
 8002ad2:	0005      	movs	r5, r0
 8002ad4:	0008      	movs	r0, r1
 8002ad6:	0011      	movs	r1, r2
 8002ad8:	2200      	movs	r2, #0
 8002ada:	4c06      	ldr	r4, [pc, #24]	; (8002af4 <_lseek_r+0x24>)
 8002adc:	6022      	str	r2, [r4, #0]
 8002ade:	001a      	movs	r2, r3
 8002ae0:	f000 f844 	bl	8002b6c <_lseek>
 8002ae4:	1c43      	adds	r3, r0, #1
 8002ae6:	d103      	bne.n	8002af0 <_lseek_r+0x20>
 8002ae8:	6823      	ldr	r3, [r4, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d000      	beq.n	8002af0 <_lseek_r+0x20>
 8002aee:	602b      	str	r3, [r5, #0]
 8002af0:	bd70      	pop	{r4, r5, r6, pc}
 8002af2:	46c0      	nop			; (mov r8, r8)
 8002af4:	20000174 	.word	0x20000174

08002af8 <memchr>:
 8002af8:	b2c9      	uxtb	r1, r1
 8002afa:	1882      	adds	r2, r0, r2
 8002afc:	4290      	cmp	r0, r2
 8002afe:	d101      	bne.n	8002b04 <memchr+0xc>
 8002b00:	2000      	movs	r0, #0
 8002b02:	4770      	bx	lr
 8002b04:	7803      	ldrb	r3, [r0, #0]
 8002b06:	428b      	cmp	r3, r1
 8002b08:	d0fb      	beq.n	8002b02 <memchr+0xa>
 8002b0a:	3001      	adds	r0, #1
 8002b0c:	e7f6      	b.n	8002afc <memchr+0x4>

08002b0e <__malloc_lock>:
 8002b0e:	4770      	bx	lr

08002b10 <__malloc_unlock>:
 8002b10:	4770      	bx	lr
	...

08002b14 <_read_r>:
 8002b14:	b570      	push	{r4, r5, r6, lr}
 8002b16:	0005      	movs	r5, r0
 8002b18:	0008      	movs	r0, r1
 8002b1a:	0011      	movs	r1, r2
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	4c06      	ldr	r4, [pc, #24]	; (8002b38 <_read_r+0x24>)
 8002b20:	6022      	str	r2, [r4, #0]
 8002b22:	001a      	movs	r2, r3
 8002b24:	f000 f82a 	bl	8002b7c <_read>
 8002b28:	1c43      	adds	r3, r0, #1
 8002b2a:	d103      	bne.n	8002b34 <_read_r+0x20>
 8002b2c:	6823      	ldr	r3, [r4, #0]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d000      	beq.n	8002b34 <_read_r+0x20>
 8002b32:	602b      	str	r3, [r5, #0]
 8002b34:	bd70      	pop	{r4, r5, r6, pc}
 8002b36:	46c0      	nop			; (mov r8, r8)
 8002b38:	20000174 	.word	0x20000174

08002b3c <_close>:
 8002b3c:	2258      	movs	r2, #88	; 0x58
 8002b3e:	2001      	movs	r0, #1
 8002b40:	4b01      	ldr	r3, [pc, #4]	; (8002b48 <_close+0xc>)
 8002b42:	4240      	negs	r0, r0
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	4770      	bx	lr
 8002b48:	20000174 	.word	0x20000174

08002b4c <_fstat>:
 8002b4c:	2258      	movs	r2, #88	; 0x58
 8002b4e:	2001      	movs	r0, #1
 8002b50:	4b01      	ldr	r3, [pc, #4]	; (8002b58 <_fstat+0xc>)
 8002b52:	4240      	negs	r0, r0
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	4770      	bx	lr
 8002b58:	20000174 	.word	0x20000174

08002b5c <_isatty>:
 8002b5c:	2258      	movs	r2, #88	; 0x58
 8002b5e:	4b02      	ldr	r3, [pc, #8]	; (8002b68 <_isatty+0xc>)
 8002b60:	2000      	movs	r0, #0
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	4770      	bx	lr
 8002b66:	46c0      	nop			; (mov r8, r8)
 8002b68:	20000174 	.word	0x20000174

08002b6c <_lseek>:
 8002b6c:	2258      	movs	r2, #88	; 0x58
 8002b6e:	2001      	movs	r0, #1
 8002b70:	4b01      	ldr	r3, [pc, #4]	; (8002b78 <_lseek+0xc>)
 8002b72:	4240      	negs	r0, r0
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	4770      	bx	lr
 8002b78:	20000174 	.word	0x20000174

08002b7c <_read>:
 8002b7c:	2258      	movs	r2, #88	; 0x58
 8002b7e:	2001      	movs	r0, #1
 8002b80:	4b01      	ldr	r3, [pc, #4]	; (8002b88 <_read+0xc>)
 8002b82:	4240      	negs	r0, r0
 8002b84:	601a      	str	r2, [r3, #0]
 8002b86:	4770      	bx	lr
 8002b88:	20000174 	.word	0x20000174

08002b8c <_sbrk>:
 8002b8c:	4b05      	ldr	r3, [pc, #20]	; (8002ba4 <_sbrk+0x18>)
 8002b8e:	0002      	movs	r2, r0
 8002b90:	6819      	ldr	r1, [r3, #0]
 8002b92:	2900      	cmp	r1, #0
 8002b94:	d101      	bne.n	8002b9a <_sbrk+0xe>
 8002b96:	4904      	ldr	r1, [pc, #16]	; (8002ba8 <_sbrk+0x1c>)
 8002b98:	6019      	str	r1, [r3, #0]
 8002b9a:	6818      	ldr	r0, [r3, #0]
 8002b9c:	1882      	adds	r2, r0, r2
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	4770      	bx	lr
 8002ba2:	46c0      	nop			; (mov r8, r8)
 8002ba4:	2000008c 	.word	0x2000008c
 8002ba8:	20000178 	.word	0x20000178

08002bac <_write>:
 8002bac:	2258      	movs	r2, #88	; 0x58
 8002bae:	2001      	movs	r0, #1
 8002bb0:	4b01      	ldr	r3, [pc, #4]	; (8002bb8 <_write+0xc>)
 8002bb2:	4240      	negs	r0, r0
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	4770      	bx	lr
 8002bb8:	20000174 	.word	0x20000174

08002bbc <_init>:
 8002bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bbe:	46c0      	nop			; (mov r8, r8)
 8002bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bc2:	bc08      	pop	{r3}
 8002bc4:	469e      	mov	lr, r3
 8002bc6:	4770      	bx	lr

08002bc8 <_fini>:
 8002bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bca:	46c0      	nop			; (mov r8, r8)
 8002bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bce:	bc08      	pop	{r3}
 8002bd0:	469e      	mov	lr, r3
 8002bd2:	4770      	bx	lr
